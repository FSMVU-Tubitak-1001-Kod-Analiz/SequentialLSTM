old_code,fixed_code,SmellRule
"{""function"": ""public boolean doSave(Carrello bean) throws SQLException\n{\nConnection con = null;\nPreparedStatement psEffettua = null;\nPreparedStatement psCarrello = null;\nPreparedStatement psHa = null;\nPreparedStatement psCarrelloId = null;\nPreparedStatement psTaglia = null;\nString sqlEffettua = ""INSERT INTO effettua(username) VALUES(?)"";\nString sqlCarrello = ""INSERT INTO ordine(username, riepilogo) VALUES(?,?)"";\nString sqlHa = ""INSERT INTO ha(codiceOrdine, codiceScarpa) VALUES(?,?)"";\nString getCarrelloId = ""SELECT MAX(codice) FROM ordine"";\nString sqlTaglia = ""INSERT INTO taglia(taglia, codiceScarpa, codiceOrdine) VALUES(?,?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsEffettua = con.prepareStatement(sqlEffettua);\npsEffettua.setString(1, bean.getUsername());\npsEffettua.executeUpdate();\npsCarrello = con.prepareStatement(sqlCarrello);\npsCarrello.setString(1, bean.getUsername());\nString riepilogo = bean.getScarpe() + ""<br>Totale: "" + bean.getScarpe().parallelStream().mapToDouble(c -> c.getPrezzo()).sum();\npsCarrello.setString(2, riepilogo);\npsCarrello.executeUpdate();\ncon.commit();\npsCarrelloId = con.prepareStatement(getCarrelloId);\nResultSet rs = psCarrelloId.executeQuery();\nrs.next();\nint codiceCarrello = rs.getInt(""max(codice)"");\npsTaglia = con.prepareStatement(sqlTaglia);\npsHa = con.prepareStatement(sqlHa);\npsTaglia.setInt(3, codiceCarrello);\npsHa.setInt(1, codiceCarrello);\nfor (ScarpaOrdine s : bean.getScarpe()) {\npsHa.setInt(2, s.getId());\npsHa.executeUpdate();\npsTaglia.setInt(1, s.getTaglia());\npsTaglia.setInt(2, s.getId());\npsTaglia.executeUpdate();\n}\ncon.commit();\n} catch (SQLException e) {\ne.printStackTrace();\nreturn false;\n} finally {\ntry {\nif (psHa != null)\npsHa.close();\nif (psCarrello != null)\npsCarrello.close();\nif (psEffettua != null)\npsEffettua.close();\nif (psCarrelloId != null)\npsCarrelloId.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn true;\n}\n""}","{""function"": ""public boolean doSave(Carrello bean) throws SQLException\n{\nConnection con = null;\nPreparedStatement psEffettua = null;\nPreparedStatement psCarrello = null;\nPreparedStatement psHa = null;\nPreparedStatement psCarrelloId = null;\nPreparedStatement psTaglia = null;\nString sqlEffettua = ""INSERT INTO effettua(username) VALUES(?)"";\nString sqlCarrello = ""INSERT INTO ordine(username, riepilogo) VALUES(?,?)"";\nString sqlHa = ""INSERT INTO ha(codiceOrdine, codiceScarpa) VALUES(?,?)"";\nString getCarrelloId = ""SELECT MAX(codice) FROM ordine"";\nString sqlTaglia = ""INSERT INTO taglia(taglia, codiceScarpa, codiceOrdine) VALUES(?,?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsEffettua = con.prepareStatement(sqlEffettua);\npsEffettua.setString(1, bean.getUsername());\npsEffettua.executeUpdate();\npsCarrello = con.prepareStatement(sqlCarrello);\npsCarrello.setString(1, bean.getUsername());\nString riepilogo = bean.getScarpe() + ""<br>Totale: "" + bean.getScarpe().parallelStream().mapToDouble(c -> c.getPrezzo()).sum();\npsCarrello.setString(2, riepilogo);\npsCarrello.executeUpdate();\ncon.commit();\npsCarrelloId = con.prepareStatement(getCarrelloId);\nResultSet rs = psCarrelloId.executeQuery();\nrs.next();\nint codiceCarrello = rs.getInt(""max(codice)"");\npsTaglia = con.prepareStatement(sqlTaglia);\npsHa = con.prepareStatement(sqlHa);\npsTaglia.setInt(3, codiceCarrello);\npsHa.setInt(1, codiceCarrello);\nfor (ScarpaOrdine s : bean.getScarpe()) {\npsHa.setInt(2, s.getId());\npsHa.executeUpdate();\npsTaglia.setInt(1, s.getTaglia());\npsTaglia.setInt(2, s.getId());\npsTaglia.executeUpdate();\n}\ncon.commit();\n} catch (SQLException e) {\ne.printStackTrace();\nreturn false;\n} finally {\ntry {\nif (psHa != null)\npsHa.close();\nif (psCarrello != null)\npsCarrello.close();\nif (psEffettua != null)\npsEffettua.close();\nif (psCarrelloId != null)\npsCarrelloId.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn true;\n}\n""}","java:S106
"
"{""function"": ""public Collection<Carrello> doRetrieveAll() throws SQLException\n{\nreturn null;\n}\n""}","{""function"": ""public Collection<Carrello> doRetrieveAll() throws SQLException\n{\nConnection con = null;\nPreparedStatement ps = null;\nResultSet rs = null;\nString sql = ""SELECT * FROM ordine"";\nCollection<Carrello> ordini = new LinkedList<>();\ntry {\ncon = ds.getConnection();\nps = con.prepareStatement(sql);\nrs = ps.executeQuery();\nwhile (rs.next()) {\nCarrello c = new Carrello();\nc.setUsername(rs.getString(""username""));\nc.setRiepilogo(rs.getString(""riepilogo""));\nordini.add(c);\n}\n} finally {\ntry {\nif (ps != null)\nps.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn ordini;\n}\n""}","java:S1168
"
"{""function"": ""public Collection<Carrello> getOrdini(String username) throws SQLException\n{\nConnection con = null;\nPreparedStatement psOrdine = null;\nPreparedStatement psScarpe = null;\nResultSet rsOrdine = null;\nResultSet rsScarpe = null;\nCollection<Carrello> ordini = new LinkedList<>();\nScarpaDataSource sds = new ScarpaDataSource();\nString sqlOrdine = ""SELECT codice FROM ordine WHERE username=?"";\nString sqlScarpe = ""SELECT DISTINCT(t.codiceScarpa), t.taglia FROM ha, taglia as t WHERE ha.codiceOrdine=? and t.codiceOrdine=ha.codiceOrdine"";\ntry {\ncon = ds.getConnection();\npsOrdine = con.prepareStatement(sqlOrdine);\npsScarpe = con.prepareStatement(sqlScarpe);\npsOrdine.setString(1, username);\nrsOrdine = psOrdine.executeQuery();\nwhile (rsOrdine.next()) {\nCarrello c = new Carrello();\nc.setUsername(username);\nint codiceCarrello = rsOrdine.getInt(""codice"");\nc.setCodice(codiceCarrello);\npsScarpe.setInt(1, codiceCarrello);\nrsScarpe = psScarpe.executeQuery();\nwhile (rsScarpe.next()) {\nint codiceScarpa = rsScarpe.getInt(""codiceScarpa"");\nint taglia = rsScarpe.getInt(""taglia"");\nScarpaOrdine s = new ScarpaOrdine(sds.doRetrieveByKey(codiceScarpa + """"));\ns.setTaglia(taglia);\nc.getScarpe().add(s);\n}\nordini.add(c);\n}\n} finally {\ntry {\nif (psOrdine != null)\npsOrdine.close();\nif (psScarpe != null)\npsScarpe.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn ordini;\n}\n""}","{""function"": ""public Collection<Carrello> getOrdini(String username) throws SQLException\n{\nConnection con = null;\nPreparedStatement psOrdine = null;\nResultSet rsOrdine = null;\nCollection<Carrello> ordini = new LinkedList<>();\nString sqlOrdine = ""SELECT riepilogo FROM ordine WHERE username=?"";\ntry {\ncon = ds.getConnection();\npsOrdine = con.prepareStatement(sqlOrdine);\npsOrdine.setString(1, username);\nrsOrdine = psOrdine.executeQuery();\nwhile (rsOrdine.next()) {\nCarrello c = new Carrello();\nc.setRiepilogo(rsOrdine.getString(""riepilogo""));\nordini.add(c);\n}\n} finally {\ntry {\nif (psOrdine != null)\npsOrdine.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn ordini;\n}\n""}","java:S2095
"
"{""function"": ""public Collection<Carrello> doRetrieveAll() throws SQLException\n{\nConnection con = null;\nPreparedStatement psOrdine = null;\nPreparedStatement psHa = null;\nResultSet rsOrdine = null;\nResultSet rsHa = null;\nCollection<Carrello> ordini = new LinkedList<>();\nString sqlOrdine = ""SELECT * FROM ORDINE"";\nString sqlHa = ""SELECT codiceScarpa FROM ha WHERE codiceOrdine=?"";\ntry {\ncon = ds.getConnection();\npsHa = con.prepareStatement(sqlHa);\npsOrdine = con.prepareStatement(sqlOrdine);\nrsOrdine = psOrdine.executeQuery();\nwhile (rsOrdine.next()) {\npsHa.setInt(1, rsOrdine.getInt(""codice""));\nrsHa = psHa.executeQuery();\nCarrello carrello = new Carrello();\nwhile (rsHa.next()) {\nScarpa s = new Scarpa();\ns.setId(rsHa.getInt(""codiceScarpa""));\ncarrello.getScarpe().add(s);\n}\ncarrello.setCodice(rsOrdine.getInt(""codice""));\ncarrello.setUsername(rsOrdine.getString(""username""));\nordini.add(carrello);\n}\n} finally {\ntry {\nif (psOrdine != null)\npsOrdine.close();\nif (psHa != null)\npsHa.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn ordini;\n}\n""}","{""function"": ""public Collection<Carrello> doRetrieveAll() throws SQLException\n{\nreturn null;\n}\n""}","java:S2095
"
"{""function"": ""public ArrayList<ScarpaOrdine> getScarpe()\n{\nreturn scarpe;\n}\n""}","{""function"": ""public List<ScarpaOrdine> getScarpe()\n{\nreturn scarpe;\n}\n""}","java:S1319
"
"{""function"": ""public void setScarpe(ArrayList<ScarpaOrdine> scarpe)\n{\nthis.scarpe = scarpe;\n}\n""}","{""function"": ""public void setScarpe(List<ScarpaOrdine> scarpe)\n{\nthis.scarpe = scarpe;\n}\n""}","java:S1319
"
"{""function"": ""public boolean doSave(Carrello bean) throws SQLException\n{\nConnection con = null;\nPreparedStatement psCarrello = null;\nPreparedStatement psHa = null;\nString sqlCarrello = ""INSERT INTO ordine(codice) VALUES(?)"";\nString sqlHa = ""INSERT INTO ha(codiceScarpa) VALUES(?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsCarrello = con.prepareStatement(sqlCarrello);\npsCarrello.setInt(1, bean.getCodice());\npsHa = con.prepareStatement(sqlHa);\nfor (Scarpa s : bean.getScarpe()) psHa.setInt(1, s.getId());\n} catch (SQLException e) {\ne.printStackTrace();\n} finally {\ntry {\nif (psHa != null)\npsHa.close();\nif (psCarrello != null)\npsCarrello.close();\n} finally {\ncon.close();\n}\n}\nreturn true;\n}\n""}","{""function"": ""public boolean doSave(Carrello bean) throws SQLException\n{\nConnection con = null;\nPreparedStatement psEffettua = null;\nPreparedStatement psCarrello = null;\nPreparedStatement psHa = null;\nString sqlEffettua = ""INSEERT INTO effettua(username) VALUES(?)"";\nString sqlCarrello = ""INSERT INTO ordine(username) VALUES(?)"";\nString sqlHa = ""INSERT INTO ha(codiceScarpa) VALUES(?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsEffettua = con.prepareStatement(sqlEffettua);\npsEffettua.setString(1, bean.getUsername());\npsEffettua.executeUpdate();\npsCarrello = con.prepareStatement(sqlCarrello);\npsCarrello.setString(1, bean.getUsername());\npsCarrello.executeUpdate();\npsHa = con.prepareStatement(sqlHa);\nfor (Scarpa s : bean.getScarpe()) {\npsHa.setInt(1, s.getId());\npsHa.executeUpdate();\n}\ncon.commit();\n} catch (SQLException e) {\ne.printStackTrace();\nreturn false;\n} finally {\ntry {\nif (psHa != null)\npsHa.close();\nif (psCarrello != null)\npsCarrello.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn true;\n}\n""}","java:S2259
"
"{""function"": ""public boolean doDelete(String nome) throws SQLException\n{\nreturn false;\n}\n""}","{""function"": ""public boolean doDelete(String nome) throws SQLException\n{\nreturn false;\n}\n""}","java:S1135
"
"{""function"": ""public boolean doDelete(String nome) throws SQLException\n{\nreturn false;\n}\n""}","{""function"": ""public boolean doDelete(String nome) throws SQLException\n{\nreturn false;\n}\n""}","java:S1135
"
"{""function"": ""public Carrello doRetrieveByKey(String code) throws SQLException\n{\nreturn null;\n}\n""}","{""function"": ""public Carrello doRetrieveByKey(String code) throws SQLException\n{\nreturn null;\n}\n""}","java:S1135
"
"{""function"": ""public Collection<Carrello> doRetrieveAll() throws SQLException\n{\nreturn null;\n}\n""}","{""function"": ""public Collection<Carrello> doRetrieveAll() throws SQLException\n{\nConnection con = null;\nPreparedStatement psOrdine = null;\nPreparedStatement psHa = null;\nResultSet rsOrdine = null;\nResultSet rsHa = null;\nCollection<Carrello> ordini = new LinkedList<>();\nString sqlOrdine = ""SELECT * FROM ORDINE"";\nString sqlHa = ""SELECT codiceScarpa FROM ha WHERE codiceOrdine=?"";\ntry {\ncon = ds.getConnection();\npsHa = con.prepareStatement(sqlHa);\npsOrdine = con.prepareStatement(sqlOrdine);\nrsOrdine = psOrdine.executeQuery();\nwhile (rsOrdine.next()) {\npsHa.setInt(1, rsOrdine.getInt(""codice""));\nrsHa = psHa.executeQuery();\nCarrello carrello = new Carrello();\nwhile (rsHa.next()) {\nScarpa s = new Scarpa();\ns.setId(rsHa.getInt(""codiceScarpa""));\ncarrello.getScarpe().add(s);\n}\ncarrello.setCodice(rsOrdine.getInt(""codice""));\ncarrello.setUsername(rsOrdine.getString(""username""));\nordini.add(carrello);\n}\n} finally {\ntry {\nif (psOrdine != null)\npsOrdine.close();\nif (psHa != null)\npsHa.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn ordini;\n}\n""}","java:S1168
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString id = request.getParameter(""id"");\nfor (Part part : request.getParts()) {\nString fileName = part.getSubmittedFileName();\nif (fileName != null && !fileName.equals("""")) {\ntry {\nFotoControl.updatePhoto(id, part.getInputStream());\n} catch (SQLException sqlException) {\nSystem.out.println(sqlException);\n}\n}\n}\nresponse.sendRedirect(request.getContextPath() + ""/admin/add.jsp"");\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString id = request.getParameter(""id"");\nfor (Part part : request.getParts()) {\nString fileName = part.getSubmittedFileName();\nif (fileName != null && !fileName.equals("""")) {\ntry {\nFotoControl.updatePhoto(id, part.getInputStream());\n} catch (SQLException sqlException) {\n}\n}\n}\nresponse.sendRedirect(request.getContextPath() + ""/admin/add.jsp"");\n}\n""}","java:S106
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome = request.getParameter(""nome"");\nint taglia = Integer.parseInt(request.getParameter(""taglia""));\ndouble prezzo = Double.parseDouble(request.getParameter(""prezzo""));\nCollection<Part> foto = request.getParts();\nScarpa scarpa = new Scarpa();\nscarpa.setNome(nome);\nscarpa.setTaglia(taglia);\nscarpa.setPrezzo(prezzo);\nScarpaDataSource ds = new ScarpaDataSource();\ntry {\nds.doSave(scarpa);\nCollection<Scarpa> scarpe = ds.doRetrieveAll();\nrequest.setAttribute(""scarpe"", scarpe);\nthis.getServletContext().getRequestDispatcher(""/common/index.jsp"").forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome = request.getParameter(""nome"");\nint taglia = Integer.parseInt(request.getParameter(""taglia""));\ndouble prezzo = Double.parseDouble(request.getParameter(""prezzo""));\nScarpa scarpa = new Scarpa();\nscarpa.setNome(nome);\nscarpa.setTaglia(taglia);\nscarpa.setPrezzo(prezzo);\nScarpaDataSource ds = new ScarpaDataSource();\ntry {\nds.doSave(scarpa);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","java:S1854
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome = request.getParameter(""nome"");\nint taglia = Integer.parseInt(request.getParameter(""taglia""));\ndouble prezzo = Double.parseDouble(request.getParameter(""prezzo""));\nCollection<Part> foto = request.getParts();\nScarpa scarpa = new Scarpa();\nscarpa.setNome(nome);\nscarpa.setTaglia(taglia);\nscarpa.setPrezzo(prezzo);\nScarpaDataSource ds = new ScarpaDataSource();\ntry {\nds.doSave(scarpa);\nCollection<Scarpa> scarpe = ds.doRetrieveAll();\nrequest.setAttribute(""scarpe"", scarpe);\nthis.getServletContext().getRequestDispatcher(""/common/index.jsp"").forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome = request.getParameter(""nome"");\nint taglia = Integer.parseInt(request.getParameter(""taglia""));\ndouble prezzo = Double.parseDouble(request.getParameter(""prezzo""));\nScarpa scarpa = new Scarpa();\nscarpa.setNome(nome);\nscarpa.setTaglia(taglia);\nscarpa.setPrezzo(prezzo);\nScarpaDataSource ds = new ScarpaDataSource();\ntry {\nds.doSave(scarpa);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","java:S1481
"
"{""function"": ""public static synchronized void updatePhoto(String idA, InputStream photo) throws SQLException\n{\nConnection con = null;\nPreparedStatement stmt = null;\ntry {\ncon = ds.getConnection();\nstmt = con.prepareStatement(""UPDATE scarpa SET foto = ? WHERE id = ?"");\ntry {\nstmt.setBinaryStream(1, photo, photo.available());\nstmt.setString(2, idA);\nstmt.executeUpdate();\n} catch (IOException e) {\nSystem.out.println(e);\n}\n} finally {\ntry {\nif (stmt != null)\nstmt.close();\n} catch (SQLException sqlException) {\nSystem.out.println(sqlException);\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","{""function"": ""public static synchronized void updatePhoto(String idA, InputStream photo) throws SQLException\n{\nConnection con = null;\nPreparedStatement stmt = null;\ntry {\ncon = ds.getConnection();\nstmt = con.prepareStatement(""UPDATE scarpa SET foto = ? WHERE id = ?"");\ntry {\nstmt.setBinaryStream(1, photo, photo.available());\nstmt.setString(2, idA);\nstmt.executeUpdate();\n} catch (IOException e) {\n}\n} finally {\ntry {\nif (stmt != null)\nstmt.close();\n} catch (SQLException sqlException) {\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","java:S106
"
"{""function"": ""public static synchronized void updatePhoto(String idA, InputStream photo) throws SQLException\n{\nConnection con = null;\nPreparedStatement stmt = null;\ntry {\ncon = ds.getConnection();\nstmt = con.prepareStatement(""UPDATE scarpa SET foto = ? WHERE id = ?"");\ntry {\nstmt.setBinaryStream(1, photo, photo.available());\nstmt.setString(2, idA);\nstmt.executeUpdate();\n} catch (IOException e) {\nSystem.out.println(e);\n}\n} finally {\ntry {\nif (stmt != null)\nstmt.close();\n} catch (SQLException sqlException) {\nSystem.out.println(sqlException);\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","{""function"": ""public static synchronized void updatePhoto(String idA, InputStream photo) throws SQLException\n{\nConnection con = null;\nPreparedStatement stmt = null;\ntry {\ncon = ds.getConnection();\nstmt = con.prepareStatement(""UPDATE scarpa SET foto = ? WHERE id = ?"");\ntry {\nstmt.setBinaryStream(1, photo, photo.available());\nstmt.setString(2, idA);\nstmt.executeUpdate();\n} catch (IOException e) {\n}\n} finally {\ntry {\nif (stmt != null)\nstmt.close();\n} catch (SQLException sqlException) {\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","java:S106
"
"{""function"": ""public static synchronized byte[] load(String id)\n{\nConnection connection = null;\nPreparedStatement stmt = null;\nResultSet rs = null;\nbyte[] bt = null;\ntry {\nconnection = ds.getConnection();\nString sql = ""SELECT foto FROM scarpa WHERE id = ?"";\nstmt = connection.prepareStatement(sql);\nstmt.setString(1, id);\nrs = stmt.executeQuery();\nif (rs.next()) {\nbt = rs.getBytes(""foto"");\n}\n} catch (SQLException sqlException) {\nSystem.out.println(sqlException);\n} finally {\ntry {\nif (stmt != null)\nstmt.close();\n} catch (SQLException sqlException) {\nSystem.out.println(sqlException);\n} finally {\nif (connection != null)\ntry {\nconnection.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n}\nreturn bt;\n}\n""}","{""function"": ""public static synchronized byte[] load(String id)\n{\nConnection connection = null;\nPreparedStatement stmt = null;\nResultSet rs = null;\nbyte[] bt = null;\ntry {\nconnection = ds.getConnection();\nString sql = ""SELECT foto FROM scarpa WHERE id = ?"";\nstmt = connection.prepareStatement(sql);\nstmt.setString(1, id);\nrs = stmt.executeQuery();\nif (rs.next()) {\nbt = rs.getBytes(""foto"");\n}\n} catch (SQLException sqlException) {\n} finally {\ntry {\nif (stmt != null)\nstmt.close();\n} catch (SQLException sqlException) {\n} finally {\nif (connection != null)\ntry {\nconnection.close();\n} catch (SQLException e) {\n}\n}\n}\nreturn bt;\n}\n""}","java:S106
"
"{""function"": ""public static synchronized byte[] load(String id)\n{\nConnection connection = null;\nPreparedStatement stmt = null;\nResultSet rs = null;\nbyte[] bt = null;\ntry {\nconnection = ds.getConnection();\nString sql = ""SELECT foto FROM scarpa WHERE id = ?"";\nstmt = connection.prepareStatement(sql);\nstmt.setString(1, id);\nrs = stmt.executeQuery();\nif (rs.next()) {\nbt = rs.getBytes(""foto"");\n}\n} catch (SQLException sqlException) {\nSystem.out.println(sqlException);\n} finally {\ntry {\nif (stmt != null)\nstmt.close();\n} catch (SQLException sqlException) {\nSystem.out.println(sqlException);\n} finally {\nif (connection != null)\ntry {\nconnection.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n}\nreturn bt;\n}\n""}","{""function"": ""public static synchronized byte[] load(String id)\n{\nConnection connection = null;\nPreparedStatement stmt = null;\nResultSet rs = null;\nbyte[] bt = null;\ntry {\nconnection = ds.getConnection();\nString sql = ""SELECT foto FROM scarpa WHERE id = ?"";\nstmt = connection.prepareStatement(sql);\nstmt.setString(1, id);\nrs = stmt.executeQuery();\nif (rs.next()) {\nbt = rs.getBytes(""foto"");\n}\n} catch (SQLException sqlException) {\n} finally {\ntry {\nif (stmt != null)\nstmt.close();\n} catch (SQLException sqlException) {\n} finally {\nif (connection != null)\ntry {\nconnection.close();\n} catch (SQLException e) {\n}\n}\n}\nreturn bt;\n}\n""}","java:S106
"
"{""function"": ""public String toHash(String password)\n{\nString hashString = null;\ntry {\njava.security.MessageDigest digest = java.security.MessageDigest.getInstance(""SHA-512"");\nbyte[] hash = digest.digest(password.getBytes(StandardCharsets.UTF_8));\nhashString = """";\nfor (int i = 0; i < hash.length; i++) {\nhashString += Integer.toHexString((hash[i] & 0xFF) | 0x100).toLowerCase().substring(1, 3);\n}\n} catch (java.security.NoSuchAlgorithmException e) {\nSystem.out.println(e);\n}\nreturn hashString;\n}\n""}","{""function"": ""public String toHash(String password)\n{\nString hashString = null;\ntry {\njava.security.MessageDigest digest = java.security.MessageDigest.getInstance(""SHA-512"");\nbyte[] hash = digest.digest(password.getBytes(StandardCharsets.UTF_8));\nhashString = """";\nfor (int i = 0; i < hash.length; i++) {\nhashString += Integer.toHexString((hash[i] & 0xFF) | 0x100).toLowerCase().substring(1, 3);\n}\n} catch (java.security.NoSuchAlgorithmException e) {\n}\nreturn hashString;\n}\n""}","java:S106
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome;\nString cognome;\nString[] telefoni;\nString username;\nString email;\nString password;\nString età;\nboolean usernameValid = false;\nboolean emailValid = false;\nRequestDispatcher dispatcherToSignup = request.getRequestDispatcher(""signup.jsp"");\nnome = request.getParameter(""nome"");\ncognome = request.getParameter(""cognome"");\netà = request.getParameter(""età"");\ntelefoni = request.getParameterValues(""telefono"");\nusername = request.getParameter(""username"");\nemail = request.getParameter(""email"");\npassword = request.getParameter(""password"");\nString errors = """";\nSignupDataSource ds = new SignupDataSource();\nCheckFields check = new CheckFields();\ntry {\nif (nome.isBlank())\nerrors += ""Inserisci il nome<br>"";\nif (cognome.isBlank())\nerrors += ""Inserisci il cognome<br>"";\nif (età.isBlank())\nerrors += ""Inserisci l'età<br>"";\nif (username.isBlank())\nerrors += ""Inserisci la username<br>"";\nif (email.isBlank())\nerrors += ""Inserisci la email<br>"";\nif (password.isBlank())\nerrors += ""Inserisci la password<br>"";\nelse if (password.length() < 8)\nerrors += ""La password deve essere lunga almeno 8 caratteri"";\nif (errors.isEmpty()) {\nusernameValid = check.checkUsername(username);\nemailValid = check.checkEmail(email);\nif (!usernameValid)\nerrors += ""Questa username è già esistente<br>"";\nif (!emailValid)\nerrors += ""Questa e-mail è già registrata<br>"";\nif (errors.isEmpty()) {\npassword = toHash(password);\nds.insertNewUser(nome, cognome, username, email, password, Integer.parseInt(età), telefoni);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\nreturn;\n}\n}\nrequest.setAttribute(""errors"", errors);\ndispatcherToSignup.forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome;\nString cognome;\nString[] telefoni;\nString username;\nString email;\nString password;\nString età;\nboolean usernameValid = false;\nboolean emailValid = false;\nRequestDispatcher dispatcherToSignup = request.getRequestDispatcher(""signup.jsp"");\nnome = request.getParameter(""nome"");\ncognome = request.getParameter(""cognome"");\netà = request.getParameter(""età"");\ntelefoni = request.getParameterValues(""telefono"");\nusername = request.getParameter(""username"");\nemail = request.getParameter(""email"");\npassword = request.getParameter(""password"");\nString errors = """";\nSignupDataSource ds = new SignupDataSource();\nCheckFields check = new CheckFields();\ntry {\nif (nome.isBlank())\nerrors += ""Inserisci il nome<br>"";\nif (cognome.isBlank())\nerrors += ""Inserisci il cognome<br>"";\nif (età.isBlank())\nerrors += ""Inserisci l'età<br>"";\nif (username.isBlank())\nerrors += ""Inserisci la username<br>"";\nif (email.isBlank())\nerrors += ""Inserisci la email<br>"";\nif (password.isBlank())\nerrors += ""Inserisci la password<br>"";\nelse if (password.length() < 8)\nerrors += ""La password deve essere lunga almeno 8 caratteri"";\nif (errors.isEmpty()) {\nusernameValid = check.checkUsername(username);\nemailValid = check.checkEmail(email);\nif (!usernameValid)\nerrors += ""Questa username è già esistente<br>"";\nif (!emailValid)\nerrors += ""Questa e-mail è già registrata<br>"";\nif (errors.isEmpty()) {\npassword = toHash(password);\nds.insertNewUser(nome, cognome, username, email, password, Integer.parseInt(età), telefoni);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\nreturn;\n}\n}\nrequest.setAttribute(""errors"", errors);\ndispatcherToSignup.forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","java:S1659
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome;\nString cognome;\nString[] telefoni;\nString username;\nString email;\nString password;\nString età;\nboolean usernameValid = false;\nboolean emailValid = false;\nRequestDispatcher dispatcherToSignup = request.getRequestDispatcher(""signup.jsp"");\nnome = request.getParameter(""nome"");\ncognome = request.getParameter(""cognome"");\netà = request.getParameter(""età"");\ntelefoni = request.getParameterValues(""telefono"");\nusername = request.getParameter(""username"");\nemail = request.getParameter(""email"");\npassword = request.getParameter(""password"");\nString errors = """";\nSignupDataSource ds = new SignupDataSource();\nCheckFields check = new CheckFields();\ntry {\nif (nome.isBlank())\nerrors += ""Inserisci il nome<br>"";\nif (cognome.isBlank())\nerrors += ""Inserisci il cognome<br>"";\nif (età.isBlank())\nerrors += ""Inserisci l'età<br>"";\nif (username.isBlank())\nerrors += ""Inserisci la username<br>"";\nif (email.isBlank())\nerrors += ""Inserisci la email<br>"";\nif (password.isBlank())\nerrors += ""Inserisci la password<br>"";\nelse if (password.length() < 8)\nerrors += ""La password deve essere lunga almeno 8 caratteri"";\nif (errors.isEmpty()) {\nusernameValid = check.checkUsername(username);\nemailValid = check.checkEmail(email);\nif (!usernameValid)\nerrors += ""Questa username è già esistente<br>"";\nif (!emailValid)\nerrors += ""Questa e-mail è già registrata<br>"";\nif (errors.isEmpty()) {\npassword = toHash(password);\nds.insertNewUser(nome, cognome, username, email, password, Integer.parseInt(età), telefoni);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\nreturn;\n}\n}\nrequest.setAttribute(""errors"", errors);\ndispatcherToSignup.forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome;\nString cognome;\nString[] telefoni;\nString username;\nString email;\nString password;\nString età;\nboolean usernameValid = false;\nboolean emailValid = false;\nRequestDispatcher dispatcherToSignup = request.getRequestDispatcher(""signup.jsp"");\nnome = request.getParameter(""nome"");\ncognome = request.getParameter(""cognome"");\netà = request.getParameter(""età"");\ntelefoni = request.getParameterValues(""telefono"");\nusername = request.getParameter(""username"");\nemail = request.getParameter(""email"");\npassword = request.getParameter(""password"");\nString errors = """";\nSignupDataSource ds = new SignupDataSource();\nCheckFields check = new CheckFields();\ntry {\nif (nome.isBlank())\nerrors += ""Inserisci il nome<br>"";\nif (cognome.isBlank())\nerrors += ""Inserisci il cognome<br>"";\nif (età.isBlank())\nerrors += ""Inserisci l'età<br>"";\nif (username.isBlank())\nerrors += ""Inserisci la username<br>"";\nif (email.isBlank())\nerrors += ""Inserisci la email<br>"";\nif (password.isBlank())\nerrors += ""Inserisci la password<br>"";\nelse if (password.length() < 8)\nerrors += ""La password deve essere lunga almeno 8 caratteri"";\nif (errors.isEmpty()) {\nusernameValid = check.checkUsername(username);\nemailValid = check.checkEmail(email);\nif (!usernameValid)\nerrors += ""Questa username è già esistente<br>"";\nif (!emailValid)\nerrors += ""Questa e-mail è già registrata<br>"";\nif (errors.isEmpty()) {\npassword = toHash(password);\nds.insertNewUser(nome, cognome, username, email, password, Integer.parseInt(età), telefoni);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\nreturn;\n}\n}\nrequest.setAttribute(""errors"", errors);\ndispatcherToSignup.forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","java:S1197
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome;\nString cognome;\nString[] telefoni;\nString username;\nString email;\nString password;\nString età;\nboolean usernameValid = false;\nboolean emailValid = false;\nRequestDispatcher dispatcherToSignup = request.getRequestDispatcher(""signup.jsp"");\nnome = request.getParameter(""nome"");\ncognome = request.getParameter(""cognome"");\netà = request.getParameter(""età"");\ntelefoni = request.getParameterValues(""telefono"");\nusername = request.getParameter(""username"");\nemail = request.getParameter(""email"");\npassword = request.getParameter(""password"");\nString errors = """";\nSignupDataSource ds = new SignupDataSource();\nCheckFields check = new CheckFields();\ntry {\nif (nome.isBlank())\nerrors += ""Inserisci il nome<br>"";\nif (cognome.isBlank())\nerrors += ""Inserisci il cognome<br>"";\nif (età.isBlank())\nerrors += ""Inserisci l'età<br>"";\nif (username.isBlank())\nerrors += ""Inserisci la username<br>"";\nif (email.isBlank())\nerrors += ""Inserisci la email<br>"";\nif (password.isBlank())\nerrors += ""Inserisci la password<br>"";\nelse if (password.length() < 8)\nerrors += ""La password deve essere lunga almeno 8 caratteri"";\nif (errors.isEmpty()) {\nusernameValid = check.checkUsername(username);\nemailValid = check.checkEmail(email);\nif (!usernameValid)\nerrors += ""Questa username è già esistente<br>"";\nif (!emailValid)\nerrors += ""Questa e-mail è già registrata<br>"";\nif (errors.isEmpty()) {\npassword = toHash(password);\nds.insertNewUser(nome, cognome, username, email, password, Integer.parseInt(età), telefoni);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\nreturn;\n}\n}\nrequest.setAttribute(""errors"", errors);\ndispatcherToSignup.forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome;\nString cognome;\nString[] telefoni;\nString username;\nString email;\nString password;\nString età;\nboolean usernameValid = false;\nboolean emailValid = false;\nRequestDispatcher dispatcherToSignup = request.getRequestDispatcher(""signup.jsp"");\nnome = request.getParameter(""nome"");\ncognome = request.getParameter(""cognome"");\netà = request.getParameter(""età"");\ntelefoni = request.getParameterValues(""telefono"");\nusername = request.getParameter(""username"");\nemail = request.getParameter(""email"");\npassword = request.getParameter(""password"");\nString errors = """";\nSignupDataSource ds = new SignupDataSource();\nCheckFields check = new CheckFields();\ntry {\nif (nome.isBlank())\nerrors += ""Inserisci il nome<br>"";\nif (cognome.isBlank())\nerrors += ""Inserisci il cognome<br>"";\nif (età.isBlank())\nerrors += ""Inserisci l'età<br>"";\nif (username.isBlank())\nerrors += ""Inserisci la username<br>"";\nif (email.isBlank())\nerrors += ""Inserisci la email<br>"";\nif (password.isBlank())\nerrors += ""Inserisci la password<br>"";\nelse if (password.length() < 8)\nerrors += ""La password deve essere lunga almeno 8 caratteri"";\nif (errors.isEmpty()) {\nusernameValid = check.checkUsername(username);\nemailValid = check.checkEmail(email);\nif (!usernameValid)\nerrors += ""Questa username è già esistente<br>"";\nif (!emailValid)\nerrors += ""Questa e-mail è già registrata<br>"";\nif (errors.isEmpty()) {\npassword = toHash(password);\nds.insertNewUser(nome, cognome, username, email, password, Integer.parseInt(età), telefoni);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\nreturn;\n}\n}\nrequest.setAttribute(""errors"", errors);\ndispatcherToSignup.forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","java:S117
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome;\nString cognome;\nString[] telefoni;\nString username;\nString email;\nString password;\nString età;\nboolean usernameValid = false;\nboolean emailValid = false;\nRequestDispatcher dispatcherToSignup = request.getRequestDispatcher(""signup.jsp"");\nnome = request.getParameter(""nome"");\ncognome = request.getParameter(""cognome"");\netà = request.getParameter(""età"");\ntelefoni = request.getParameterValues(""telefono"");\nusername = request.getParameter(""username"");\nemail = request.getParameter(""email"");\npassword = request.getParameter(""password"");\nString errors = """";\nSignupDataSource ds = new SignupDataSource();\nCheckFields check = new CheckFields();\ntry {\nif (nome.isBlank())\nerrors += ""Inserisci il nome<br>"";\nif (cognome.isBlank())\nerrors += ""Inserisci il cognome<br>"";\nif (età.isBlank())\nerrors += ""Inserisci l'età<br>"";\nif (username.isBlank())\nerrors += ""Inserisci la username<br>"";\nif (email.isBlank())\nerrors += ""Inserisci la email<br>"";\nif (password.isBlank())\nerrors += ""Inserisci la password<br>"";\nelse if (password.length() < 8)\nerrors += ""La password deve essere lunga almeno 8 caratteri"";\nif (errors.isEmpty()) {\nusernameValid = check.checkUsername(username);\nemailValid = check.checkEmail(email);\nif (!usernameValid)\nerrors += ""Questa username è già esistente<br>"";\nif (!emailValid)\nerrors += ""Questa e-mail è già registrata<br>"";\nif (errors.isEmpty()) {\npassword = toHash(password);\nds.insertNewUser(nome, cognome, username, email, password, Integer.parseInt(età), telefoni);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\nreturn;\n}\n}\nrequest.setAttribute(""errors"", errors);\ndispatcherToSignup.forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString nome;\nString cognome;\nString[] telefoni;\nString username;\nString email;\nString password;\nString età;\nboolean usernameValid = false;\nboolean emailValid = false;\nRequestDispatcher dispatcherToSignup = request.getRequestDispatcher(""signup.jsp"");\nnome = request.getParameter(""nome"");\ncognome = request.getParameter(""cognome"");\netà = request.getParameter(""età"");\ntelefoni = request.getParameterValues(""telefono"");\nusername = request.getParameter(""username"");\nemail = request.getParameter(""email"");\npassword = request.getParameter(""password"");\nString errors = """";\nSignupDataSource ds = new SignupDataSource();\nCheckFields check = new CheckFields();\ntry {\nif (nome.isBlank())\nerrors += ""Inserisci il nome<br>"";\nif (cognome.isBlank())\nerrors += ""Inserisci il cognome<br>"";\nif (età.isBlank())\nerrors += ""Inserisci l'età<br>"";\nif (username.isBlank())\nerrors += ""Inserisci la username<br>"";\nif (email.isBlank())\nerrors += ""Inserisci la email<br>"";\nif (password.isBlank())\nerrors += ""Inserisci la password<br>"";\nelse if (password.length() < 8)\nerrors += ""La password deve essere lunga almeno 8 caratteri"";\nif (errors.isEmpty()) {\nusernameValid = check.checkUsername(username);\nemailValid = check.checkEmail(email);\nif (!usernameValid)\nerrors += ""Questa username è già esistente<br>"";\nif (!emailValid)\nerrors += ""Questa e-mail è già registrata<br>"";\nif (errors.isEmpty()) {\npassword = toHash(password);\nds.insertNewUser(nome, cognome, username, email, password, Integer.parseInt(età), telefoni);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\nreturn;\n}\n}\nrequest.setAttribute(""errors"", errors);\ndispatcherToSignup.forward(request, response);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","java:S1659
"
"{""function"": ""public synchronized void insertNewUser(String nome, String cognome, String username, String email, String password, int età, String[] telefoni) throws SQLException\n{\nConnection con = null;\nPreparedStatement psUser = null;\nPreparedStatement psTel = null;\nString userQuery = ""INSERT INTO utente(username, email, pass, nome, cognome, età) VALUES(?,?,?,?,?,?)"";\nString telQuery = ""INSERT INTO telefono(num, username) VALUES(?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsUser = con.prepareStatement(userQuery);\npsUser.setString(1, username);\npsUser.setString(2, email);\npsUser.setString(3, password);\npsUser.setString(4, nome);\npsUser.setString(5, cognome);\npsUser.setInt(6, età);\npsUser.executeUpdate();\npsTel = con.prepareStatement(telQuery);\npsTel.setString(2, username);\nfor (String s : telefoni) {\npsTel.setString(1, s);\npsTel.executeUpdate();\n}\ncon.commit();\n} finally {\ntry {\nif (psUser != null)\npsUser.close();\nif (psTel != null)\npsTel.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","{""function"": ""public synchronized void insertNewUser(String nome, String cognome, String username, String email, String password, int età, String[] telefoni) throws SQLException\n{\nConnection con = null;\nPreparedStatement psUser = null;\nPreparedStatement psTel = null;\nString userQuery = ""INSERT INTO utente(username, email, pass, nome, cognome, età) VALUES(?,?,?,?,?,?)"";\nString telQuery = ""INSERT INTO telefono(num, username) VALUES(?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsUser = con.prepareStatement(userQuery);\npsUser.setString(1, username);\npsUser.setString(2, email);\npsUser.setString(3, password);\npsUser.setString(4, nome);\npsUser.setString(5, cognome);\npsUser.setInt(6, età);\npsUser.executeUpdate();\npsTel = con.prepareStatement(telQuery);\npsTel.setString(2, username);\nfor (String s : telefoni) {\npsTel.setString(1, s);\npsTel.executeUpdate();\n}\ncon.commit();\n} finally {\ntry {\nif (psUser != null)\npsUser.close();\nif (psTel != null)\npsTel.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","java:S1659
"
"{""function"": ""public synchronized void insertNewUser(String nome, String cognome, String username, String email, String password, int età, String[] telefoni) throws SQLException\n{\nConnection con = null;\nPreparedStatement psUser = null, psTel = null;\nString userQuery = ""INSERT INTO utente(username, email, pass, nome, cognome, età) VALUES(?,?,?,?,?,?)"";\nString telQuery = ""INSERT INTO telefono(num, username) VALUES(?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsUser = con.prepareStatement(userQuery);\npsUser.setString(1, username);\npsUser.setString(2, email);\npsUser.setString(3, password);\npsUser.setString(4, nome);\npsUser.setString(5, cognome);\npsUser.setInt(6, età);\nSystem.out.println(""user insert: "" + psUser.executeUpdate());\npsTel = con.prepareStatement(telQuery);\npsTel.setString(2, username);\nfor (String s : telefoni) {\npsTel.setString(1, s);\nSystem.out.println(""tel insert: "" + psTel.executeUpdate());\ncon.commit();\n}\n} finally {\ntry {\nif (psUser != null)\npsUser.close();\nif (psTel != null)\npsTel.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","{""function"": ""public synchronized void insertNewUser(String nome, String cognome, String username, String email, String password, int età, String[] telefoni) throws SQLException\n{\nConnection con = null;\nPreparedStatement psUser = null;\nPreparedStatement psTel = null;\nString userQuery = ""INSERT INTO utente(username, email, pass, nome, cognome, età) VALUES(?,?,?,?,?,?)"";\nString telQuery = ""INSERT INTO telefono(num, username) VALUES(?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsUser = con.prepareStatement(userQuery);\npsUser.setString(1, username);\npsUser.setString(2, email);\npsUser.setString(3, password);\npsUser.setString(4, nome);\npsUser.setString(5, cognome);\npsUser.setInt(6, età);\npsUser.executeUpdate();\npsTel = con.prepareStatement(telQuery);\npsTel.setString(2, username);\nfor (String s : telefoni) {\npsTel.setString(1, s);\npsTel.executeUpdate();\n}\ncon.commit();\n} finally {\ntry {\nif (psUser != null)\npsUser.close();\nif (psTel != null)\npsTel.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","java:S106
"
"{""function"": ""public synchronized void insertNewUser(String nome, String cognome, String username, String email, String password, int età, String[] telefoni) throws SQLException\n{\nConnection con = null;\nPreparedStatement psUser = null, psTel = null;\nString userQuery = ""INSERT INTO utente(username, email, pass, nome, cognome, età) VALUES(?,?,?,?,?,?)"";\nString telQuery = ""INSERT INTO telefono(num, username) VALUES(?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsUser = con.prepareStatement(userQuery);\npsUser.setString(1, username);\npsUser.setString(2, email);\npsUser.setString(3, password);\npsUser.setString(4, nome);\npsUser.setString(5, cognome);\npsUser.setInt(6, età);\nSystem.out.println(""user insert: "" + psUser.executeUpdate());\npsTel = con.prepareStatement(telQuery);\npsTel.setString(2, username);\nfor (String s : telefoni) {\npsTel.setString(1, s);\nSystem.out.println(""tel insert: "" + psTel.executeUpdate());\ncon.commit();\n}\n} finally {\ntry {\nif (psUser != null)\npsUser.close();\nif (psTel != null)\npsTel.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","{""function"": ""public synchronized void insertNewUser(String nome, String cognome, String username, String email, String password, int età, String[] telefoni) throws SQLException\n{\nConnection con = null;\nPreparedStatement psUser = null;\nPreparedStatement psTel = null;\nString userQuery = ""INSERT INTO utente(username, email, pass, nome, cognome, età) VALUES(?,?,?,?,?,?)"";\nString telQuery = ""INSERT INTO telefono(num, username) VALUES(?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsUser = con.prepareStatement(userQuery);\npsUser.setString(1, username);\npsUser.setString(2, email);\npsUser.setString(3, password);\npsUser.setString(4, nome);\npsUser.setString(5, cognome);\npsUser.setInt(6, età);\npsUser.executeUpdate();\npsTel = con.prepareStatement(telQuery);\npsTel.setString(2, username);\nfor (String s : telefoni) {\npsTel.setString(1, s);\npsTel.executeUpdate();\n}\ncon.commit();\n} finally {\ntry {\nif (psUser != null)\npsUser.close();\nif (psTel != null)\npsTel.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\n}\n""}","java:S106
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString scarpaId = request.getParameter(""scarpaId"");\nint taglia = Integer.parseInt(request.getParameter(""taglia""));\nString prova = request.getParameter(""quantita"");\nint quantità = Integer.parseInt(prova);\nHttpSession session = request.getSession();\nCarrello carrello = (Carrello) session.getAttribute(""carrello"");\nif (carrello == null)\ncarrello = new Carrello();\nScarpaDataSource sds = new ScarpaDataSource();\ntry {\nScarpa s = sds.doRetrieveByKey(scarpaId);\ns.setId(Integer.parseInt(scarpaId));\nScarpaOrdine so = new ScarpaOrdine(s);\nso.setTaglia(taglia);\nso.setQuantità(quantità);\ncarrello.getScarpe().add(so);\nsession.setAttribute(""carrello"", carrello);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString scarpaId = request.getParameter(""scarpaId"");\nint taglia = Integer.parseInt(request.getParameter(""taglia""));\nString prova = request.getParameter(""quantita"");\nint quantità = Integer.parseInt(prova);\nHttpSession session = request.getSession();\nCarrello carrello = (Carrello) session.getAttribute(""carrello"");\nif (carrello == null)\ncarrello = new Carrello();\nScarpaDataSource sds = new ScarpaDataSource();\ntry {\nScarpa s = sds.doRetrieveByKey(scarpaId);\ns.setId(Integer.parseInt(scarpaId));\nScarpaOrdine so = new ScarpaOrdine(s);\nso.setTaglia(taglia);\nso.setQuantità(quantità);\ncarrello.getScarpe().add(so);\nsession.setAttribute(""carrello"", carrello);\nresponse.sendRedirect(request.getContextPath() + ""/common/index.jsp"");\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n""}","java:S117
"
"{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString scarpaId = request.getParameter(""id"");\ndouble prezzo = Double.parseDouble(request.getParameter(""prezzo""));\nScarpaDataSource ds = new ScarpaDataSource();\ntry {\nds.updatePrezzo(scarpaId, prezzo);\n} catch (NumberFormatException e) {\ne.printStackTrace();\n} catch (SQLException e) {\ne.printStackTrace();\n}\nresponse.sendRedirect(request.getContextPath() + ""/admin/add.jsp"");\n}\n""}","{""function"": ""protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n{\nString scarpaId = request.getParameter(""id"");\ndouble prezzo = Double.parseDouble(request.getParameter(""prezzo""));\nScarpaDataSource ds = new ScarpaDataSource();\ntry {\nds.updatePrezzo(scarpaId, prezzo);\n} catch (SQLException e) {\ne.printStackTrace();\n}\nresponse.sendRedirect(request.getContextPath() + ""/admin/add.jsp"");\n}\n""}","java:S2147
"
"{""function"": ""public boolean doSave(Carrello bean) throws SQLException\n{\nConnection con = null;\nPreparedStatement psEffettua = null;\nPreparedStatement psCarrello = null;\nPreparedStatement psHa = null;\nPreparedStatement psCarrelloId = null;\nPreparedStatement psTaglia = null;\nString sqlEffettua = ""INSERT INTO effettua(username) VALUES(?)"";\nString sqlCarrello = ""INSERT INTO ordine(username, riepilogo) VALUES(?,?)"";\nString sqlHa = ""INSERT INTO ha(codiceOrdine, codiceScarpa) VALUES(?,?)"";\nString getCarrelloId = ""SELECT MAX(codice) FROM ordine"";\nString sqlTaglia = ""INSERT INTO taglia(taglia, codiceScarpa, codiceOrdine) VALUES(?,?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsEffettua = con.prepareStatement(sqlEffettua);\npsEffettua.setString(1, bean.getUsername());\npsEffettua.executeUpdate();\npsCarrello = con.prepareStatement(sqlCarrello);\npsCarrello.setString(1, bean.getUsername());\nString riepilogo = bean.getScarpe() + ""<br>Totale: "" + bean.getScarpe().parallelStream().mapToDouble(c -> c.getPrezzo()).sum();\npsCarrello.setString(2, riepilogo);\npsCarrello.executeUpdate();\ncon.commit();\npsCarrelloId = con.prepareStatement(getCarrelloId);\nResultSet rs = psCarrelloId.executeQuery();\nrs.next();\nint codiceCarrello = rs.getInt(""max(codice)"");\npsTaglia = con.prepareStatement(sqlTaglia);\npsHa = con.prepareStatement(sqlHa);\npsTaglia.setInt(3, codiceCarrello);\npsHa.setInt(1, codiceCarrello);\nfor (ScarpaOrdine s : bean.getScarpe()) {\npsHa.setInt(2, s.getId());\npsHa.executeUpdate();\npsTaglia.setInt(1, s.getTaglia());\npsTaglia.setInt(2, s.getId());\npsTaglia.executeUpdate();\n}\ncon.commit();\n} catch (SQLException e) {\ne.printStackTrace();\nreturn false;\n} finally {\ntry {\nif (psHa != null)\npsHa.close();\nif (psCarrello != null)\npsCarrello.close();\nif (psEffettua != null)\npsEffettua.close();\nif (psCarrelloId != null)\npsCarrelloId.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn true;\n}\n""}","{""function"": ""public boolean doSave(Carrello bean) throws SQLException\n{\nConnection con = null;\nPreparedStatement psEffettua = null;\nPreparedStatement psCarrello = null;\nPreparedStatement psHa = null;\nPreparedStatement psCarrelloId = null;\nPreparedStatement psTaglia = null;\nString sqlEffettua = ""INSERT INTO effettua(username) VALUES(?)"";\nString sqlCarrello = ""INSERT INTO ordine(username, riepilogo) VALUES(?,?)"";\nString sqlHa = ""INSERT INTO ha(codiceOrdine, codiceScarpa) VALUES(?,?)"";\nString getCarrelloId = ""SELECT MAX(codice) FROM ordine"";\nString sqlTaglia = ""INSERT INTO taglia(taglia, codiceScarpa, codiceOrdine) VALUES(?,?,?)"";\ntry {\ncon = ds.getConnection();\ncon.setAutoCommit(false);\npsEffettua = con.prepareStatement(sqlEffettua);\npsEffettua.setString(1, bean.getUsername());\npsEffettua.executeUpdate();\npsCarrello = con.prepareStatement(sqlCarrello);\npsCarrello.setString(1, bean.getUsername());\nString riepilogo = bean.getScarpe() + ""<br>Totale: "" + bean.getScarpe().parallelStream().mapToDouble(c -> c.getPrezzo()).sum();\npsCarrello.setString(2, riepilogo);\npsCarrello.executeUpdate();\ncon.commit();\npsCarrelloId = con.prepareStatement(getCarrelloId);\nResultSet rs = psCarrelloId.executeQuery();\nrs.next();\nint codiceCarrello = rs.getInt(""max(codice)"");\npsTaglia = con.prepareStatement(sqlTaglia);\npsHa = con.prepareStatement(sqlHa);\npsTaglia.setInt(3, codiceCarrello);\npsHa.setInt(1, codiceCarrello);\nfor (ScarpaOrdine s : bean.getScarpe()) {\npsHa.setInt(2, s.getId());\npsHa.executeUpdate();\npsTaglia.setInt(1, s.getTaglia());\npsTaglia.setInt(2, s.getId());\npsTaglia.executeUpdate();\n}\ncon.commit();\n} catch (SQLException e) {\ne.printStackTrace();\nreturn false;\n} finally {\ntry {\nif (psHa != null)\npsHa.close();\nif (psCarrello != null)\npsCarrello.close();\nif (psEffettua != null)\npsEffettua.close();\nif (psCarrelloId != null)\npsCarrelloId.close();\n} finally {\nif (con != null)\ncon.close();\n}\n}\nreturn true;\n}\n""}","java:S106
"
"{""function"": ""public List<? extends Schema<?>> readClass(OpenAPI oasDocument, Class<?> clazz)\n{\nif (clazz.equals(java.io.File.class)) {\nreturn null;\n} else {\nreturn readClassOpenApi3(clazz);\n}\n}\n""}","{""function"": ""public List<? extends Schema<?>> readClass(OpenAPI oasDocument, Class<?> clazz)\n{\nif (clazz.equals(java.io.File.class)) {\nreturn null;\n} else {\nreturn readClassOpenApi3(clazz);\n}\n}\n""}","java:S1172
"
"{""function"": ""public int poll() throws Exception\n{\nif (feed == null) {\nfeed = createFeed();\npopulateList(feed);\n}\nint polledMessages = 0;\nwhile (hasNextEntry()) {\nE entry = list.get(entryIndex--);\npolledMessages++;\nboolean valid = true;\nif (resumeStrategy != null) {\nResumeAdapter adapter = resumeStrategy.getAdapter();\nif (adapter instanceof EntryFilter) {\nvalid = ((EntryFilter<E>) adapter).isValidEntry(entry);\n}\n}\nif (valid) {\nExchange exchange = endpoint.createExchange(feed, entry);\ngetProcessor().process(exchange);\nif (this.throttleEntries) {\nreturn polledMessages;\n}\n}\n}\nfeed = null;\nresetList();\nreturn polledMessages;\n}\n""}","{""function"": ""public int poll() throws Exception\n{\nif (feed == null) {\nfeed = createFeed();\npopulateList(feed);\n}\nint polledMessages = 0;\nwhile (hasNextEntry()) {\nE entry = list.get(entryIndex--);\npolledMessages++;\nboolean valid = true;\nif (resumeStrategy != null) {\nResumeAdapter adapter = resumeStrategy.getAdapter();\nif (adapter instanceof EntryFilter) {\nvalid = ((EntryFilter<E>) adapter).isValidEntry(entry);\n}\n}\nif (valid) {\nExchange exchange = endpoint.createExchange(feed, entry);\ngetProcessor().process(exchange);\nif (this.throttleEntries) {\nreturn polledMessages;\n}\n}\n}\nfeed = null;\nresetList();\nreturn polledMessages;\n}\n""}","java:S6201
"
"{""function"": ""public Object evaluate(Exchange exchange)\n{\ntry {\nObject result = evaluateJsonPath(exchange, engine);\nif (resultType != null) {\nif (unpackArray) {\nboolean resultIsCollection = Collection.class.isAssignableFrom(resultType);\nboolean singleElement = result instanceof List && ((List<?>) result).size() == 1;\nif (singleElement && !resultIsCollection) {\nresult = ((List<?>) result).get(0);\nLOG.trace(""Unwrapping result: {} from single element List before converting to: {}"", result, resultType);\n}\n}\nreturn exchange.getContext().getTypeConverter().convertTo(resultType, exchange, result);\n} else {\nreturn result;\n}\n} catch (Exception e) {\nthrow new ExpressionEvaluationException(this, exchange, e);\n}\n}\n""}","{""function"": ""public Object evaluate(Exchange exchange)\n{\ntry {\nObject result = evaluateJsonPath(exchange, engine);\nif (resultType != null) {\nif (unpackArray) {\nboolean resultIsCollection = Collection.class.isAssignableFrom(resultType);\nboolean singleElement = result instanceof List && ((List<?>) result).size() == 1;\nif (singleElement && !resultIsCollection) {\nresult = ((List<?>) result).get(0);\nLOG.trace(""Unwrapping result: {} from single element List before converting to: {}"", result, resultType);\n}\n}\nreturn exchange.getContext().getTypeConverter().convertTo(resultType, exchange, result);\n} else {\nreturn result;\n}\n} catch (Exception e) {\nthrow new ExpressionEvaluationException(this, exchange, e);\n}\n}\n""}","java:S6201
"
"{""function"": ""private void processChildren(List<String> children, RefreshMode mode) throws Exception\n{\nList<String> fullPaths = children.stream().map(c -> ZKPaths.makePath(path, c)).toList();\nSet<String> removedNodes = new HashSet<>(currentData.keySet());\nfullPaths.forEach(removedNodes::remove);\nfor (String fullPath : removedNodes) {\nremove(fullPath);\n}\nfor (String name : children) {\nString fullPath = ZKPaths.makePath(path, name);\nif (mode == RefreshMode.FORCE_GET_DATA_AND_STAT || !currentData.containsKey(fullPath)) {\ntry {\ngetDataAndStat(fullPath);\n} catch (KeeperException.NoNodeException ignore) {\n}\n}\n}\n}\n""}","{""function"": ""private void processChildren(List<String> children, RefreshMode mode) throws Exception\n{\nList<String> fullPaths = children.stream().map(c -> ZKPaths.makePath(path, c)).toList();\nSet<String> removedNodes = new HashSet<>(currentData.keySet());\nfullPaths.forEach(removedNodes::remove);\nfor (String fullPath : removedNodes) {\nremove(fullPath);\n}\nfor (String name : children) {\nString fullPath = ZKPaths.makePath(path, name);\nif (mode == RefreshMode.FORCE_GET_DATA_AND_STAT || !currentData.containsKey(fullPath)) {\ntry {\ngetDataAndStat(fullPath);\n} catch (KeeperException.NoNodeException ignore) {\n}\n}\n}\n}\n""}","java:S6204
"
"{""function"": ""public void start()\n{\nif (dynamicMap instanceof LRUCache) {\n((LRUCache<K, V>) dynamicMap).resetStatistics();\n}\n}\n""}","{""function"": ""public void start()\n{\nif (dynamicMap instanceof LRUCache) {\n((LRUCache<K, V>) dynamicMap).resetStatistics();\n}\n}\n""}","java:S6201
"
"{""function"": ""public void cleanUp()\n{\nif (dynamicMap instanceof LRUCache) {\n((LRUCache<K, V>) dynamicMap).cleanUp();\n}\n}\n""}","{""function"": ""public void cleanUp()\n{\nif (dynamicMap instanceof LRUCache) {\n((LRUCache<K, V>) dynamicMap).cleanUp();\n}\n}\n""}","java:S6201
"
"{""function"": ""protected void gatherRootServices(List<Service> services) throws Exception\n{\nEndpoint endpoint = getEndpoint();\nconsumer = endpoint.createConsumer(processor);\nif (consumer != null) {\nservices.add(consumer);\nif (consumer instanceof RouteAware) {\n((RouteAware) consumer).setRoute(this);\n}\nif (consumer instanceof RouteIdAware) {\n((RouteIdAware) consumer).setRouteId(this.getId());\n}\nif (consumer instanceof ResumeAware<?> && resumeStrategy != null) {\nResumeAdapter resumeAdapter = AdapterHelper.eval(getCamelContext(), (ResumeAware<?>) consumer, resumeStrategy);\nresumeStrategy.setAdapter(resumeAdapter);\n((ResumeAware) consumer).setResumeStrategy(resumeStrategy);\n}\nif (consumer instanceof ConsumerListenerAware<?>) {\n((ConsumerListenerAware) consumer).setConsumerListener(consumerListener);\n}\n}\nif (processor instanceof Service) {\nservices.add((Service) processor);\n}\nfor (Processor p : onCompletions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\nfor (Processor p : onExceptions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\n}\n""}","{""function"": ""protected void gatherRootServices(List<Service> services) throws Exception\n{\nEndpoint endpoint = getEndpoint();\nconsumer = endpoint.createConsumer(processor);\nif (consumer != null) {\nservices.add(consumer);\nif (consumer instanceof RouteAware) {\n((RouteAware) consumer).setRoute(this);\n}\nif (consumer instanceof RouteIdAware) {\n((RouteIdAware) consumer).setRouteId(this.getId());\n}\nif (consumer instanceof ResumeAware<?> && resumeStrategy != null) {\nResumeAdapter resumeAdapter = AdapterHelper.eval(getCamelContext(), (ResumeAware<?>) consumer, resumeStrategy);\nresumeStrategy.setAdapter(resumeAdapter);\n((ResumeAware) consumer).setResumeStrategy(resumeStrategy);\n}\nif (consumer instanceof ConsumerListenerAware<?>) {\n((ConsumerListenerAware) consumer).setConsumerListener(consumerListener);\n}\n}\nif (processor instanceof Service) {\nservices.add((Service) processor);\n}\nfor (Processor p : onCompletions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\nfor (Processor p : onExceptions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\n}\n""}","java:S6201
"
"{""function"": ""protected void gatherRootServices(List<Service> services) throws Exception\n{\nEndpoint endpoint = getEndpoint();\nconsumer = endpoint.createConsumer(processor);\nif (consumer != null) {\nservices.add(consumer);\nif (consumer instanceof RouteAware) {\n((RouteAware) consumer).setRoute(this);\n}\nif (consumer instanceof RouteIdAware) {\n((RouteIdAware) consumer).setRouteId(this.getId());\n}\nif (consumer instanceof ResumeAware<?> && resumeStrategy != null) {\nResumeAdapter resumeAdapter = AdapterHelper.eval(getCamelContext(), (ResumeAware<?>) consumer, resumeStrategy);\nresumeStrategy.setAdapter(resumeAdapter);\n((ResumeAware) consumer).setResumeStrategy(resumeStrategy);\n}\nif (consumer instanceof ConsumerListenerAware<?>) {\n((ConsumerListenerAware) consumer).setConsumerListener(consumerListener);\n}\n}\nif (processor instanceof Service) {\nservices.add((Service) processor);\n}\nfor (Processor p : onCompletions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\nfor (Processor p : onExceptions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\n}\n""}","{""function"": ""protected void gatherRootServices(List<Service> services) throws Exception\n{\nEndpoint endpoint = getEndpoint();\nconsumer = endpoint.createConsumer(processor);\nif (consumer != null) {\nservices.add(consumer);\nif (consumer instanceof RouteAware) {\n((RouteAware) consumer).setRoute(this);\n}\nif (consumer instanceof RouteIdAware) {\n((RouteIdAware) consumer).setRouteId(this.getId());\n}\nif (consumer instanceof ResumeAware<?> && resumeStrategy != null) {\nResumeAdapter resumeAdapter = AdapterHelper.eval(getCamelContext(), (ResumeAware<?>) consumer, resumeStrategy);\nresumeStrategy.setAdapter(resumeAdapter);\n((ResumeAware) consumer).setResumeStrategy(resumeStrategy);\n}\nif (consumer instanceof ConsumerListenerAware<?>) {\n((ConsumerListenerAware) consumer).setConsumerListener(consumerListener);\n}\n}\nif (processor instanceof Service) {\nservices.add((Service) processor);\n}\nfor (Processor p : onCompletions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\nfor (Processor p : onExceptions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\n}\n""}","java:S6201
"
"{""function"": ""protected void gatherRootServices(List<Service> services) throws Exception\n{\nEndpoint endpoint = getEndpoint();\nconsumer = endpoint.createConsumer(processor);\nif (consumer != null) {\nservices.add(consumer);\nif (consumer instanceof RouteAware) {\n((RouteAware) consumer).setRoute(this);\n}\nif (consumer instanceof RouteIdAware) {\n((RouteIdAware) consumer).setRouteId(this.getId());\n}\nif (consumer instanceof ResumeAware<?> && resumeStrategy != null) {\nResumeAdapter resumeAdapter = AdapterHelper.eval(getCamelContext(), (ResumeAware<?>) consumer, resumeStrategy);\nresumeStrategy.setAdapter(resumeAdapter);\n((ResumeAware) consumer).setResumeStrategy(resumeStrategy);\n}\nif (consumer instanceof ConsumerListenerAware<?>) {\n((ConsumerListenerAware) consumer).setConsumerListener(consumerListener);\n}\n}\nif (processor instanceof Service) {\nservices.add((Service) processor);\n}\nfor (Processor p : onCompletions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\nfor (Processor p : onExceptions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\n}\n""}","{""function"": ""protected void gatherRootServices(List<Service> services) throws Exception\n{\nEndpoint endpoint = getEndpoint();\nconsumer = endpoint.createConsumer(processor);\nif (consumer != null) {\nservices.add(consumer);\nif (consumer instanceof RouteAware) {\n((RouteAware) consumer).setRoute(this);\n}\nif (consumer instanceof RouteIdAware) {\n((RouteIdAware) consumer).setRouteId(this.getId());\n}\nif (consumer instanceof ResumeAware<?> && resumeStrategy != null) {\nResumeAdapter resumeAdapter = AdapterHelper.eval(getCamelContext(), (ResumeAware<?>) consumer, resumeStrategy);\nresumeStrategy.setAdapter(resumeAdapter);\n((ResumeAware) consumer).setResumeStrategy(resumeStrategy);\n}\nif (consumer instanceof ConsumerListenerAware<?>) {\n((ConsumerListenerAware) consumer).setConsumerListener(consumerListener);\n}\n}\nif (processor instanceof Service) {\nservices.add((Service) processor);\n}\nfor (Processor p : onCompletions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\nfor (Processor p : onExceptions.values()) {\nif (processor instanceof Service) {\nservices.add((Service) p);\n}\n}\n}\n""}","java:S6201
"
"{""function"": ""public Object getManagedObjectForProcessor(CamelContext context, Processor processor, NamedNode node, Route route)\n{\nManagedProcessor answer = null;\nProcessorDefinition<?> definition = (ProcessorDefinition<?>) node;\nif (definition instanceof RecipientListDefinition) {\nPipeline pipeline = (Pipeline) processor;\nIterator<Processor> it = pipeline.next().iterator();\nwhile (it.hasNext()) {\nprocessor = it.next();\n}\n}\nProcessor target = processor;\nwhile (target != null) {\nif (target instanceof ErrorHandler) {\nreturn false;\n}\nif (target instanceof ConvertBodyProcessor) {\nanswer = new ManagedConvertBody(context, (ConvertBodyProcessor) target, definition);\n} else if (target instanceof ChoiceProcessor) {\nanswer = new ManagedChoice(context, (ChoiceProcessor) target, definition);\n} else if (target instanceof ClaimCheckProcessor) {\nanswer = new ManagedClaimCheck(context, (ClaimCheckProcessor) target, definition);\n} else if (target instanceof Delayer) {\nanswer = new ManagedDelayer(context, (Delayer) target, definition);\n} else if (target instanceof DisabledProcessor) {\nanswer = new ManagedDisabled(context, (DisabledProcessor) target, definition);\n} else if (target instanceof TryProcessor) {\nanswer = new ManagedDoTry(context, (TryProcessor) target, (TryDefinition) definition);\n} else if (target instanceof CatchProcessor) {\nanswer = new ManagedDoCatch(context, (CatchProcessor) target, (CatchDefinition) definition);\n} else if (target instanceof FinallyProcessor) {\nanswer = new ManagedDoFinally(context, (FinallyProcessor) target, (FinallyDefinition) definition);\n} else if (target instanceof Throttler) {\nanswer = new ManagedThrottler(context, (Throttler) target, definition);\n} else if (target instanceof DynamicRouter) {\nanswer = new ManagedDynamicRouter(context, (DynamicRouter) target, (DynamicRouterDefinition) definition);\n} else if (target instanceof RoutingSlip) {\nanswer = new ManagedRoutingSlip(context, (RoutingSlip) target, (RoutingSlipDefinition) definition);\n} else if (target instanceof FilterProcessor) {\nanswer = new ManagedFilter(context, (FilterProcessor) target, (ExpressionNode) definition);\n} else if (target instanceof LogProcessor) {\nanswer = new ManagedLog(context, (LogProcessor) target, definition);\n} else if (target instanceof LoopProcessor) {\nanswer = new ManagedLoop(context, (LoopProcessor) target, (LoopDefinition) definition);\n} else if (target instanceof MarshalProcessor) {\nanswer = new ManagedMarshal(context, (MarshalProcessor) target, (MarshalDefinition) definition);\n} else if (target instanceof UnmarshalProcessor) {\nanswer = new ManagedUnmarshal(context, (UnmarshalProcessor) target, (UnmarshalDefinition) definition);\n} else if (target instanceof FailOverLoadBalancer) {\nanswer = new ManagedFailoverLoadBalancer(context, (FailOverLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof RandomLoadBalancer) {\nanswer = new ManagedRandomLoadBalancer(context, (RandomLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof RoundRobinLoadBalancer) {\nanswer = new ManagedRoundRobinLoadBalancer(context, (RoundRobinLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof StickyLoadBalancer) {\nanswer = new ManagedStickyLoadBalancer(context, (StickyLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof TopicLoadBalancer) {\nanswer = new ManagedTopicLoadBalancer(context, (TopicLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof WeightedLoadBalancer) {\nanswer = new ManagedWeightedLoadBalancer(context, (WeightedLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof RecipientList) {\nanswer = new ManagedRecipientList(context, (RecipientList) target, (RecipientListDefinition) definition);\n} else if (target instanceof Splitter) {\nanswer = new ManagedSplitter(context, (Splitter) target, (SplitDefinition) definition);\n} else if (target instanceof MulticastProcessor) {\nanswer = new ManagedMulticast(context, (MulticastProcessor) target, definition);\n} else if (target instanceof SamplingThrottler) {\nanswer = new ManagedSamplingThrottler(context, (SamplingThrottler) target, definition);\n} else if (target instanceof Resequencer) {\nanswer = new ManagedResequencer(context, (Resequencer) target, definition);\n} else if (target instanceof RollbackProcessor) {\nanswer = new ManagedRollback(context, (RollbackProcessor) target, definition);\n} else if (target instanceof StreamResequencer) {\nanswer = new ManagedResequencer(context, (StreamResequencer) target, definition);\n} else if (target instanceof SetBodyProcessor) {\nanswer = new ManagedSetBody(context, (SetBodyProcessor) target, (SetBodyDefinition) definition);\n} else if (target instanceof RemoveHeaderProcessor) {\nanswer = new ManagedRemoveHeader(context, (RemoveHeaderProcessor) target, definition);\n} else if (target instanceof RemoveHeadersProcessor) {\nanswer = new ManagedRemoveHeaders(context, (RemoveHeadersProcessor) target, definition);\n} else if (target instanceof SetHeaderProcessor) {\nanswer = new ManagedSetHeader(context, (SetHeaderProcessor) target, (SetHeaderDefinition) definition);\n} else if (target instanceof RemovePropertyProcessor) {\nanswer = new ManagedRemoveProperty(context, (RemovePropertyProcessor) target, definition);\n} else if (target instanceof RemovePropertiesProcessor) {\nanswer = new ManagedRemoveProperties(context, (RemovePropertiesProcessor) target, definition);\n} else if (target instanceof SetPropertyProcessor) {\nanswer = new ManagedSetProperty(context, (SetPropertyProcessor) target, (SetPropertyDefinition) definition);\n} else if (target instanceof ExchangePatternProcessor) {\nanswer = new ManagedSetExchangePattern(context, (ExchangePatternProcessor) target, definition);\n} else if (target instanceof ScriptProcessor) {\nanswer = new ManagedScript(context, (ScriptProcessor) target, (ScriptDefinition) definition);\n} else if (target instanceof StepProcessor) {\nanswer = new ManagedStep(context, (StepProcessor) target, definition);\n} else if (target instanceof StopProcessor) {\nanswer = new ManagedStop(context, (StopProcessor) target, definition);\n} else if (target instanceof ThreadsProcessor) {\nanswer = new ManagedThreads(context, (ThreadsProcessor) target, definition);\n} else if (target instanceof ThrowExceptionProcessor) {\nanswer = new ManagedThrowException(context, (ThrowExceptionProcessor) target, definition);\n} else if (target instanceof TransformProcessor) {\nanswer = new ManagedTransformer(context, target, (TransformDefinition) definition);\n} else if (target instanceof DataTypeProcessor) {\nanswer = new ManagedTransformer(context, target, (TransformDefinition) definition);\n} else if (target instanceof PredicateValidatingProcessor) {\nanswer = new ManagedValidate(context, (PredicateValidatingProcessor) target, (ValidateDefinition) definition);\n} else if (target instanceof WireTapProcessor) {\nanswer = new ManagedWireTapProcessor(context, (WireTapProcessor) target, definition);\n} else if (target instanceof SendDynamicProcessor) {\nanswer = new ManagedSendDynamicProcessor(context, (SendDynamicProcessor) target, definition);\n} else if (target instanceof SendProcessor) {\nSendProcessor sp = (SendProcessor) target;\nif (sp.getDestination() instanceof LogEndpoint) {\nLogEndpoint le = (LogEndpoint) sp.getDestination();\nif (le.getLogger() instanceof ThroughputLogger) {\nThroughputLogger tl = (ThroughputLogger) le.getLogger();\nanswer = new ManagedThroughputLogger(context, tl, definition);\n}\n}\nif (answer == null) {\nanswer = new ManagedSendProcessor(context, (SendProcessor) target, definition);\n}\n} else if (target instanceof BeanProcessor) {\nanswer = new ManagedBeanProcessor(context, (BeanProcessor) target, definition);\n} else if (target instanceof IdempotentConsumer) {\nanswer = new ManagedIdempotentConsumer(context, (IdempotentConsumer) target, (IdempotentConsumerDefinition) definition);\n} else if (target instanceof AggregateProcessor) {\nanswer = new ManagedAggregateProcessor(context, (AggregateProcessor) target, (AggregateDefinition) definition);\n} else if (target instanceof Enricher) {\nanswer = new ManagedEnricher(context, (Enricher) target, (EnrichDefinition) definition);\n} else if (target instanceof PollEnricher) {\nanswer = new ManagedPollEnricher(context, (PollEnricher) target, (PollEnrichDefinition) definition);\n}\nif (definition instanceof LoadBalanceDefinition) {\nLoadBalanceDefinition lb = (LoadBalanceDefinition) definition;\nif (lb.getLoadBalancerType() instanceof CustomLoadBalancerDefinition) {\nanswer = new ManagedCustomLoadBalancer(context, (LoadBalancer) target, (LoadBalanceDefinition) definition);\n}\n}\nif (answer != null) {\nbreak;\n}\nif (target instanceof DelegateProcessor) {\ntarget = ((DelegateProcessor) target).getProcessor();\n} else {\nbreak;\n}\n}\nif (answer == null && definition instanceof ProcessDefinition) {\nanswer = new ManagedProcess(context, target, (ProcessDefinition) definition);\n} else if (answer == null) {\nanswer = new ManagedProcessor(context, target, definition);\n}\nanswer.setRoute(route);\nanswer.init(context.getManagementStrategy());\nreturn answer;\n}\n""}","{""function"": ""public Object getManagedObjectForProcessor(CamelContext context, Processor processor, NamedNode node, Route route)\n{\nManagedProcessor answer = null;\nProcessorDefinition<?> definition = (ProcessorDefinition<?>) node;\nif (definition instanceof RecipientListDefinition) {\nPipeline pipeline = (Pipeline) processor;\nIterator<Processor> it = pipeline.next().iterator();\nwhile (it.hasNext()) {\nprocessor = it.next();\n}\n}\nProcessor target = processor;\nwhile (target != null) {\nif (target instanceof ErrorHandler) {\nreturn false;\n}\nif (target instanceof ConvertBodyProcessor) {\nanswer = new ManagedConvertBody(context, (ConvertBodyProcessor) target, definition);\n} else if (target instanceof ChoiceProcessor) {\nanswer = new ManagedChoice(context, (ChoiceProcessor) target, definition);\n} else if (target instanceof ClaimCheckProcessor) {\nanswer = new ManagedClaimCheck(context, (ClaimCheckProcessor) target, definition);\n} else if (target instanceof Delayer) {\nanswer = new ManagedDelayer(context, (Delayer) target, definition);\n} else if (target instanceof DisabledProcessor) {\nanswer = new ManagedDisabled(context, (DisabledProcessor) target, definition);\n} else if (target instanceof TryProcessor) {\nanswer = new ManagedDoTry(context, (TryProcessor) target, (TryDefinition) definition);\n} else if (target instanceof CatchProcessor) {\nanswer = new ManagedDoCatch(context, (CatchProcessor) target, (CatchDefinition) definition);\n} else if (target instanceof FinallyProcessor) {\nanswer = new ManagedDoFinally(context, (FinallyProcessor) target, (FinallyDefinition) definition);\n} else if (target instanceof Throttler) {\nanswer = new ManagedThrottler(context, (Throttler) target, definition);\n} else if (target instanceof DynamicRouter) {\nanswer = new ManagedDynamicRouter(context, (DynamicRouter) target, (DynamicRouterDefinition) definition);\n} else if (target instanceof RoutingSlip) {\nanswer = new ManagedRoutingSlip(context, (RoutingSlip) target, (RoutingSlipDefinition) definition);\n} else if (target instanceof FilterProcessor) {\nanswer = new ManagedFilter(context, (FilterProcessor) target, (ExpressionNode) definition);\n} else if (target instanceof LogProcessor) {\nanswer = new ManagedLog(context, (LogProcessor) target, definition);\n} else if (target instanceof LoopProcessor) {\nanswer = new ManagedLoop(context, (LoopProcessor) target, (LoopDefinition) definition);\n} else if (target instanceof MarshalProcessor) {\nanswer = new ManagedMarshal(context, (MarshalProcessor) target, (MarshalDefinition) definition);\n} else if (target instanceof UnmarshalProcessor) {\nanswer = new ManagedUnmarshal(context, (UnmarshalProcessor) target, (UnmarshalDefinition) definition);\n} else if (target instanceof FailOverLoadBalancer) {\nanswer = new ManagedFailoverLoadBalancer(context, (FailOverLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof RandomLoadBalancer) {\nanswer = new ManagedRandomLoadBalancer(context, (RandomLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof RoundRobinLoadBalancer) {\nanswer = new ManagedRoundRobinLoadBalancer(context, (RoundRobinLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof StickyLoadBalancer) {\nanswer = new ManagedStickyLoadBalancer(context, (StickyLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof TopicLoadBalancer) {\nanswer = new ManagedTopicLoadBalancer(context, (TopicLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof WeightedLoadBalancer) {\nanswer = new ManagedWeightedLoadBalancer(context, (WeightedLoadBalancer) target, (LoadBalanceDefinition) definition);\n} else if (target instanceof RecipientList) {\nanswer = new ManagedRecipientList(context, (RecipientList) target, (RecipientListDefinition) definition);\n} else if (target instanceof Splitter) {\nanswer = new ManagedSplitter(context, (Splitter) target, (SplitDefinition) definition);\n} else if (target instanceof MulticastProcessor) {\nanswer = new ManagedMulticast(context, (MulticastProcessor) target, definition);\n} else if (target instanceof SamplingThrottler) {\nanswer = new ManagedSamplingThrottler(context, (SamplingThrottler) target, definition);\n} else if (target instanceof Resequencer) {\nanswer = new ManagedResequencer(context, (Resequencer) target, definition);\n} else if (target instanceof RollbackProcessor) {\nanswer = new ManagedRollback(context, (RollbackProcessor) target, definition);\n} else if (target instanceof StreamResequencer) {\nanswer = new ManagedResequencer(context, (StreamResequencer) target, definition);\n} else if (target instanceof SetBodyProcessor) {\nanswer = new ManagedSetBody(context, (SetBodyProcessor) target, (SetBodyDefinition) definition);\n} else if (target instanceof RemoveHeaderProcessor) {\nanswer = new ManagedRemoveHeader(context, (RemoveHeaderProcessor) target, definition);\n} else if (target instanceof RemoveHeadersProcessor) {\nanswer = new ManagedRemoveHeaders(context, (RemoveHeadersProcessor) target, definition);\n} else if (target instanceof SetHeaderProcessor) {\nanswer = new ManagedSetHeader(context, (SetHeaderProcessor) target, (SetHeaderDefinition) definition);\n} else if (target instanceof RemovePropertyProcessor) {\nanswer = new ManagedRemoveProperty(context, (RemovePropertyProcessor) target, definition);\n} else if (target instanceof RemovePropertiesProcessor) {\nanswer = new ManagedRemoveProperties(context, (RemovePropertiesProcessor) target, definition);\n} else if (target instanceof SetPropertyProcessor) {\nanswer = new ManagedSetProperty(context, (SetPropertyProcessor) target, (SetPropertyDefinition) definition);\n} else if (target instanceof ExchangePatternProcessor) {\nanswer = new ManagedSetExchangePattern(context, (ExchangePatternProcessor) target, definition);\n} else if (target instanceof ScriptProcessor) {\nanswer = new ManagedScript(context, (ScriptProcessor) target, (ScriptDefinition) definition);\n} else if (target instanceof StepProcessor) {\nanswer = new ManagedStep(context, (StepProcessor) target, definition);\n} else if (target instanceof StopProcessor) {\nanswer = new ManagedStop(context, (StopProcessor) target, definition);\n} else if (target instanceof ThreadsProcessor) {\nanswer = new ManagedThreads(context, (ThreadsProcessor) target, definition);\n} else if (target instanceof ThrowExceptionProcessor) {\nanswer = new ManagedThrowException(context, (ThrowExceptionProcessor) target, definition);\n} else if (target instanceof TransformProcessor) {\nanswer = new ManagedTransformer(context, target, (TransformDefinition) definition);\n} else if (target instanceof DataTypeProcessor) {\nanswer = new ManagedTransformer(context, target, (TransformDefinition) definition);\n} else if (target instanceof PredicateValidatingProcessor) {\nanswer = new ManagedValidate(context, (PredicateValidatingProcessor) target, (ValidateDefinition) definition);\n} else if (target instanceof WireTapProcessor) {\nanswer = new ManagedWireTapProcessor(context, (WireTapProcessor) target, definition);\n} else if (target instanceof SendDynamicProcessor) {\nanswer = new ManagedSendDynamicProcessor(context, (SendDynamicProcessor) target, definition);\n} else if (target instanceof SendProcessor) {\nSendProcessor sp = (SendProcessor) target;\nif (sp.getDestination() instanceof LogEndpoint) {\nLogEndpoint le = (LogEndpoint) sp.getDestination();\nif (le.getLogger() instanceof ThroughputLogger) {\nThroughputLogger tl = (ThroughputLogger) le.getLogger();\nanswer = new ManagedThroughputLogger(context, tl, definition);\n}\n}\nif (answer == null) {\nanswer = new ManagedSendProcessor(context, (SendProcessor) target, definition);\n}\n} else if (target instanceof BeanProcessor) {\nanswer = new ManagedBeanProcessor(context, (BeanProcessor) target, definition);\n} else if (target instanceof IdempotentConsumer) {\nanswer = new ManagedIdempotentConsumer(context, (IdempotentConsumer) target, (IdempotentConsumerDefinition) definition);\n} else if (target instanceof AggregateProcessor) {\nanswer = new ManagedAggregateProcessor(context, (AggregateProcessor) target, (AggregateDefinition) definition);\n} else if (target instanceof Enricher) {\nanswer = new ManagedEnricher(context, (Enricher) target, (EnrichDefinition) definition);\n} else if (target instanceof PollEnricher) {\nanswer = new ManagedPollEnricher(context, (PollEnricher) target, (PollEnrichDefinition) definition);\n}\nif (definition instanceof LoadBalanceDefinition) {\nLoadBalanceDefinition lb = (LoadBalanceDefinition) definition;\nif (lb.getLoadBalancerType() instanceof CustomLoadBalancerDefinition) {\nanswer = new ManagedCustomLoadBalancer(context, (LoadBalancer) target, (LoadBalanceDefinition) definition);\n}\n}\nif (answer != null) {\nbreak;\n}\nif (target instanceof DelegateProcessor) {\ntarget = ((DelegateProcessor) target).getProcessor();\n} else {\nbreak;\n}\n}\nif (answer == null && definition instanceof ProcessDefinition) {\nanswer = new ManagedProcess(context, target, (ProcessDefinition) definition);\n} else if (answer == null) {\nanswer = new ManagedProcessor(context, target, definition);\n}\nanswer.setRoute(route);\nanswer.init(context.getManagementStrategy());\nreturn answer;\n}\n""}","java:S6201
"
"{""function"": ""private void fetchAndPrepareRecordsForCamel(final Shard shard, AtomicInteger processedExchangeCount)\n{\nString shardIterator = null;\ntry {\nshardIterator = getShardIterator(shard);\n} catch (ExecutionException | InterruptedException e) {\nthrow new RuntimeException(e);\n}\nif (shardIterator == null) {\nprocessedExchangeCount.set(0);\n}\nGetRecordsRequest req = GetRecordsRequest.builder().shardIterator(shardIterator).limit(getEndpoint().getConfiguration().getMaxResultsPerRequest()).build();\nGetRecordsResponse result = null;\nif (getEndpoint().getConfiguration().isAsyncClient()) {\ntry {\nresult = getAsyncClient().getRecords(req).get();\n} catch (ExecutionException | InterruptedException e) {\nthrow new RuntimeException(e);\n}\n} else {\nresult = getClient().getRecords(req);\n}\ntry {\nQueue<Exchange> exchanges = createExchanges(result.records());\nprocessedExchangeCount.getAndSet(processBatch(CastUtils.cast(exchanges)));\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\nvar currentShardIterator = result.nextShardIterator();\nif (isShardClosed) {\nswitch(getEndpoint().getConfiguration().getShardClosed()) {\ncase ignore:\nLOG.warn(""The shard {} is in closed state"", currentShardIterator);\nbreak;\ncase silent:\nbreak;\ncase fail:\nLOG.info(""Shard Iterator reaches CLOSE status:{} {}"", getEndpoint().getConfiguration().getStreamName(), getEndpoint().getConfiguration().getShardId());\nthrow new IllegalStateException(new ReachedClosedStatusException(getEndpoint().getConfiguration().getStreamName(), shard.shardId()));\ndefault:\nthrow new IllegalArgumentException(""Unsupported shard closed strategy"");\n}\n}\n}\n""}","{""function"": ""private void fetchAndPrepareRecordsForCamel(final Shard shard, AtomicInteger processedExchangeCount)\n{\nString shardIterator = null;\ntry {\nshardIterator = getShardIterator(shard);\n} catch (ExecutionException | InterruptedException e) {\nthrow new RuntimeException(e);\n}\nif (shardIterator == null) {\nprocessedExchangeCount.set(0);\n}\nGetRecordsRequest req = GetRecordsRequest.builder().shardIterator(shardIterator).limit(getEndpoint().getConfiguration().getMaxResultsPerRequest()).build();\nGetRecordsResponse result = null;\nif (getEndpoint().getConfiguration().isAsyncClient()) {\ntry {\nresult = getAsyncClient().getRecords(req).get();\n} catch (ExecutionException | InterruptedException e) {\nthrow new RuntimeException(e);\n}\n} else {\nresult = getClient().getRecords(req);\n}\ntry {\nQueue<Exchange> exchanges = createExchanges(result.records());\nprocessedExchangeCount.getAndSet(processBatch(CastUtils.cast(exchanges)));\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\nvar currentShardIterator = result.nextShardIterator();\nif (isShardClosed) {\nswitch(getEndpoint().getConfiguration().getShardClosed()) {\ncase ignore:\nLOG.warn(""The shard {} is in closed state"", currentShardIterator);\nbreak;\ncase silent:\nbreak;\ncase fail:\nLOG.info(""Shard Iterator reaches CLOSE status:{} {}"", getEndpoint().getConfiguration().getStreamName(), getEndpoint().getConfiguration().getShardId());\nthrow new IllegalStateException(new ReachedClosedStatusException(getEndpoint().getConfiguration().getStreamName(), shard.shardId()));\ndefault:\nthrow new IllegalArgumentException(""Unsupported shard closed strategy"");\n}\n}\n}\n""}","java:S1130
"
"{""function"": ""public List<String> getDownloaded()\n{\nreturn Arrays.stream(getURLs()).map(URL::getFile).collect(Collectors.toList());\n}\n""}","{""function"": ""public List<String> getDownloaded()\n{\nreturn Arrays.stream(getURLs()).map(u -> FileUtil.stripPath(u.getFile())).collect(Collectors.toList());\n}\n""}","java:S6204
"
"{""function"": ""public Component resolveComponent(String name, CamelContext context)\n{\nComponentModel model = catalog.componentModel(name);\nif (model != null && !downloader.alreadyOnClasspath(model.getGroupId(), model.getArtifactId(), model.getVersion())) {\ndownloader.downloadDependency(model.getGroupId(), model.getArtifactId(), model.getVersion());\n}\nComponent answer;\nboolean accept = accept(name);\nif (accept) {\nanswer = super.resolveComponent(name, context);\n} else {\nanswer = super.resolveComponent(""stub"", context);\n}\nif (stub && answer instanceof StubComponent) {\nStubComponent sc = (StubComponent) answer;\nsc.setShadow(true);\n}\nif (answer instanceof PlatformHttpComponent) {\nMainHttpServer server = camelContext.hasService(MainHttpServer.class);\nif (server == null) {\nHttpServerConfigurationProperties config = new HttpServerConfigurationProperties(null);\nCamelJBangSettingsHelper.writeSettings(""camel.jbang.platform-http.port"", String.valueOf(config.getPort()));\nif (!stub) {\nMainHttpServerFactory factory = new DefaultMainHttpServerFactory();\nService httpServer = factory.newHttpServer(config);\ntry {\ncamelContext.addService(httpServer, true, true);\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n}\n}\nif (answer == null) {\nList<String> suggestion = SuggestSimilarHelper.didYouMean(catalog.findComponentNames(), name);\nif (suggestion != null && !suggestion.isEmpty()) {\nString s = String.join("", "", suggestion);\nthrow new IllegalArgumentException(""Cannot find component with name: "" + name + "". Did you mean: "" + s);\n}\n}\nreturn answer;\n}\n""}","{""function"": ""public Component resolveComponent(String name, CamelContext context)\n{\nComponentModel model = catalog.componentModel(name);\nif (model != null && !downloader.alreadyOnClasspath(model.getGroupId(), model.getArtifactId(), model.getVersion())) {\ndownloader.downloadDependency(model.getGroupId(), model.getArtifactId(), model.getVersion());\n}\nComponent answer;\nboolean accept = accept(name);\nif (accept) {\nanswer = super.resolveComponent(name, context);\n} else {\nanswer = super.resolveComponent(""stub"", context);\n}\nif (stub && answer instanceof StubComponent) {\nStubComponent sc = (StubComponent) answer;\nsc.setShadow(true);\n}\nif (answer instanceof PlatformHttpComponent) {\nMainHttpServer server = camelContext.hasService(MainHttpServer.class);\nif (server == null) {\nHttpServerConfigurationProperties config = new HttpServerConfigurationProperties(null);\nCamelJBangSettingsHelper.writeSettings(""camel.jbang.platform-http.port"", String.valueOf(config.getPort()));\nif (!stub) {\nMainHttpServerFactory factory = new DefaultMainHttpServerFactory();\nService httpServer = factory.newHttpServer(config);\ntry {\ncamelContext.addService(httpServer, true, true);\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n}\n}\nif (answer == null) {\nList<String> suggestion = SuggestSimilarHelper.didYouMean(catalog.findComponentNames(), name);\nif (suggestion != null && !suggestion.isEmpty()) {\nString s = String.join("", "", suggestion);\nthrow new IllegalArgumentException(""Cannot find component with name: "" + name + "". Did you mean: "" + s);\n}\n}\nreturn answer;\n}\n""}","java:S6201
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S6204
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S6201
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S6204
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S6201
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S6201
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S6201
"
"{""function"": "" CodeEmitter<T> emit(final OpenApiParameter parameter)\n{\nemitter.emit(""param"");\nOpenApiParameter toUse = parameter;\nif (toUse instanceof OpenApi20Parameter) {\nString ref = ((OpenApi20Parameter) toUse).get$ref();\nif (ObjectHelper.isNotEmpty(ref)) {\ntoUse = (OpenApi20Parameter) ReferenceUtil.resolveRef(ref, parameter);\n}\n} else if (toUse instanceof OpenApi30Parameter) {\nString ref = ((OpenApi30Parameter) toUse).get$ref();\nif (ObjectHelper.isNotEmpty(ref)) {\ntoUse = (OpenApi30Parameter) ReferenceUtil.resolveRef(ref, parameter);\n}\n}\nemit(""name"", toUse.getName());\nfinal String parameterType = toUse.getIn();\nif (ObjectHelper.isNotEmpty(parameterType)) {\nemit(""type"", RestParamType.valueOf(parameterType));\n}\nif (!""body"".equals(parameterType)) {\nif (toUse instanceof OpenApi20Parameter) {\nfinal OpenApi20Parameter serializableParameter = (OpenApi20Parameter) toUse;\nfinal String dataType = serializableParameter.getType();\nemit(""dataType"", dataType);\nemit(""allowableValues"", asStringList(serializableParameter.getEnum()));\nfinal String collectionFormat = serializableParameter.getCollectionFormat();\nif (ObjectHelper.isNotEmpty(collectionFormat)) {\nemit(""collectionFormat"", CollectionFormat.valueOf(collectionFormat));\n}\nif (ObjectHelper.isNotEmpty(serializableParameter.getDefault())) {\nfinal String value = StringHelper.removeLeadingAndEndingQuotes(serializableParameter.getDefault().toString());\nemit(""defaultValue"", value);\n}\nfinal OpenApi20Items items = serializableParameter.getItems();\nif (""array"".equals(dataType) && items != null) {\nemit(""arrayType"", items.getType());\n}\n} else if (toUse instanceof OpenApi30Parameter) {\nfinal OpenApi30Parameter serializableParameter = (OpenApi30Parameter) toUse;\nfinal OpenApi30Schema schema = (OpenApi30Schema) serializableParameter.getSchema();\nif (schema != null) {\nfinal String dataType = schema.getType();\nif (ObjectHelper.isNotEmpty(dataType)) {\nemit(""dataType"", dataType);\n}\nemit(""allowableValues"", asStringList(schema.getEnum()));\nfinal String style = serializableParameter.getStyle();\nif (ObjectHelper.isNotEmpty(style)) {\nif (style.equals(""form"")) {\nif (Boolean.FALSE.equals(serializableParameter.isExplode())) {\nemit(""collectionFormat"", CollectionFormat.csv);\n} else {\nemit(""collectionFormat"", CollectionFormat.multi);\n}\n}\n}\nif (ObjectHelper.isNotEmpty(schema.getDefault())) {\nfinal String value = StringHelper.removeLeadingAndEndingQuotes(schema.getDefault().toString());\nemit(""defaultValue"", value);\n}\nif (""array"".equals(dataType) && schema.getItems() != null) {\nemit(""arrayType"", schema.getItems().getType());\n}\n}\n}\n}\nif (toUse.isRequired() != null) {\nemit(""required"", toUse.isRequired());\n} else {\nemit(""required"", Boolean.FALSE);\n}\nemit(""description"", toUse.getDescription());\nemitter.emit(""endParam"");\nreturn emitter;\n}\n""}","{""function"": "" CodeEmitter<T> emit(final String method, final Object value)\n{\nif (ObjectHelper.isEmpty(value)) {\nreturn emitter;\n}\nreturn emitter.emit(method, value);\n}\n""}","java:S6201
"
"{""function"": "" CodeEmitter<T> emit(final OpenApiParameter parameter)\n{\nemitter.emit(""param"");\nOpenApiParameter toUse = parameter;\nif (toUse instanceof OpenApi20Parameter) {\nString ref = ((OpenApi20Parameter) toUse).get$ref();\nif (ObjectHelper.isNotEmpty(ref)) {\ntoUse = (OpenApi20Parameter) ReferenceUtil.resolveRef(ref, parameter);\n}\n} else if (toUse instanceof OpenApi30Parameter) {\nString ref = ((OpenApi30Parameter) toUse).get$ref();\nif (ObjectHelper.isNotEmpty(ref)) {\ntoUse = (OpenApi30Parameter) ReferenceUtil.resolveRef(ref, parameter);\n}\n}\nemit(""name"", toUse.getName());\nfinal String parameterType = toUse.getIn();\nif (ObjectHelper.isNotEmpty(parameterType)) {\nemit(""type"", RestParamType.valueOf(parameterType));\n}\nif (!""body"".equals(parameterType)) {\nif (toUse instanceof OpenApi20Parameter) {\nfinal OpenApi20Parameter serializableParameter = (OpenApi20Parameter) toUse;\nfinal String dataType = serializableParameter.getType();\nemit(""dataType"", dataType);\nemit(""allowableValues"", asStringList(serializableParameter.getEnum()));\nfinal String collectionFormat = serializableParameter.getCollectionFormat();\nif (ObjectHelper.isNotEmpty(collectionFormat)) {\nemit(""collectionFormat"", CollectionFormat.valueOf(collectionFormat));\n}\nif (ObjectHelper.isNotEmpty(serializableParameter.getDefault())) {\nfinal String value = StringHelper.removeLeadingAndEndingQuotes(serializableParameter.getDefault().toString());\nemit(""defaultValue"", value);\n}\nfinal OpenApi20Items items = serializableParameter.getItems();\nif (""array"".equals(dataType) && items != null) {\nemit(""arrayType"", items.getType());\n}\n} else if (toUse instanceof OpenApi30Parameter) {\nfinal OpenApi30Parameter serializableParameter = (OpenApi30Parameter) toUse;\nfinal OpenApi30Schema schema = (OpenApi30Schema) serializableParameter.getSchema();\nif (schema != null) {\nfinal String dataType = schema.getType();\nif (ObjectHelper.isNotEmpty(dataType)) {\nemit(""dataType"", dataType);\n}\nemit(""allowableValues"", asStringList(schema.getEnum()));\nfinal String style = serializableParameter.getStyle();\nif (ObjectHelper.isNotEmpty(style)) {\nif (style.equals(""form"")) {\nif (Boolean.FALSE.equals(serializableParameter.isExplode())) {\nemit(""collectionFormat"", CollectionFormat.csv);\n} else {\nemit(""collectionFormat"", CollectionFormat.multi);\n}\n}\n}\nif (ObjectHelper.isNotEmpty(schema.getDefault())) {\nfinal String value = StringHelper.removeLeadingAndEndingQuotes(schema.getDefault().toString());\nemit(""defaultValue"", value);\n}\nif (""array"".equals(dataType) && schema.getItems() != null) {\nemit(""arrayType"", schema.getItems().getType());\n}\n}\n}\n}\nif (toUse.isRequired() != null) {\nemit(""required"", toUse.isRequired());\n} else {\nemit(""required"", Boolean.FALSE);\n}\nemit(""description"", toUse.getDescription());\nemitter.emit(""endParam"");\nreturn emitter;\n}\n""}","{""function"": "" CodeEmitter<T> emit(final String method, final Object value)\n{\nif (ObjectHelper.isEmpty(value)) {\nreturn emitter;\n}\nreturn emitter.emit(method, value);\n}\n""}","java:S6201
"
"{""function"": "" CodeEmitter<T> emit(final OpenApiParameter parameter)\n{\nemitter.emit(""param"");\nOpenApiParameter toUse = parameter;\nif (toUse instanceof OpenApi20Parameter) {\nString ref = ((OpenApi20Parameter) toUse).get$ref();\nif (ObjectHelper.isNotEmpty(ref)) {\ntoUse = (OpenApi20Parameter) ReferenceUtil.resolveRef(ref, parameter);\n}\n} else if (toUse instanceof OpenApi30Parameter) {\nString ref = ((OpenApi30Parameter) toUse).get$ref();\nif (ObjectHelper.isNotEmpty(ref)) {\ntoUse = (OpenApi30Parameter) ReferenceUtil.resolveRef(ref, parameter);\n}\n}\nemit(""name"", toUse.getName());\nfinal String parameterType = toUse.getIn();\nif (ObjectHelper.isNotEmpty(parameterType)) {\nemit(""type"", RestParamType.valueOf(parameterType));\n}\nif (!""body"".equals(parameterType)) {\nif (toUse instanceof OpenApi20Parameter) {\nfinal OpenApi20Parameter serializableParameter = (OpenApi20Parameter) toUse;\nfinal String dataType = serializableParameter.getType();\nemit(""dataType"", dataType);\nemit(""allowableValues"", asStringList(serializableParameter.getEnum()));\nfinal String collectionFormat = serializableParameter.getCollectionFormat();\nif (ObjectHelper.isNotEmpty(collectionFormat)) {\nemit(""collectionFormat"", CollectionFormat.valueOf(collectionFormat));\n}\nif (ObjectHelper.isNotEmpty(serializableParameter.getDefault())) {\nfinal String value = StringHelper.removeLeadingAndEndingQuotes(serializableParameter.getDefault().toString());\nemit(""defaultValue"", value);\n}\nfinal OpenApi20Items items = serializableParameter.getItems();\nif (""array"".equals(dataType) && items != null) {\nemit(""arrayType"", items.getType());\n}\n} else if (toUse instanceof OpenApi30Parameter) {\nfinal OpenApi30Parameter serializableParameter = (OpenApi30Parameter) toUse;\nfinal OpenApi30Schema schema = (OpenApi30Schema) serializableParameter.getSchema();\nif (schema != null) {\nfinal String dataType = schema.getType();\nif (ObjectHelper.isNotEmpty(dataType)) {\nemit(""dataType"", dataType);\n}\nemit(""allowableValues"", asStringList(schema.getEnum()));\nfinal String style = serializableParameter.getStyle();\nif (ObjectHelper.isNotEmpty(style)) {\nif (style.equals(""form"")) {\nif (Boolean.FALSE.equals(serializableParameter.isExplode())) {\nemit(""collectionFormat"", CollectionFormat.csv);\n} else {\nemit(""collectionFormat"", CollectionFormat.multi);\n}\n}\n}\nif (ObjectHelper.isNotEmpty(schema.getDefault())) {\nfinal String value = StringHelper.removeLeadingAndEndingQuotes(schema.getDefault().toString());\nemit(""defaultValue"", value);\n}\nif (""array"".equals(dataType) && schema.getItems() != null) {\nemit(""arrayType"", schema.getItems().getType());\n}\n}\n}\n}\nif (toUse.isRequired() != null) {\nemit(""required"", toUse.isRequired());\n} else {\nemit(""required"", Boolean.FALSE);\n}\nemit(""description"", toUse.getDescription());\nemitter.emit(""endParam"");\nreturn emitter;\n}\n""}","{""function"": "" CodeEmitter<T> emit(final String method, final Object value)\n{\nif (ObjectHelper.isEmpty(value)) {\nreturn emitter;\n}\nreturn emitter.emit(method, value);\n}\n""}","java:S6201
"
"{""function"": "" CodeEmitter<T> emit(final String method, final Object value)\n{\nif (ObjectHelper.isEmpty(value)) {\nreturn emitter;\n}\nreturn emitter.emit(method, value);\n}\n""}","{""function"": "" CodeEmitter<T> emit(final String method, final Object value)\n{\nif (ObjectHelper.isEmpty(value)) {\nreturn emitter;\n}\nreturn emitter.emit(method, value);\n}\n""}","java:S6201
"
"{""function"": "" void visit(final PathVisitor.HttpMethod method, final OpenApiOperation operation)\n{\nif (filter.accept(operation.getOperationId())) {\nfinal String methodName = method.name().toLowerCase();\nemitter.emit(methodName, path);\nemit(""id"", operation.getOperationId());\nemit(""description"", operation.getDescription());\nSet<String> operationLevelConsumes = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getConsumes() != null) {\noperationLevelConsumes.addAll(oas20Operation.getConsumes());\n}\n} else if (operation instanceof OpenApi30Operation) {\nOpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getRequestBody() != null && oas30Operation.getRequestBody().getContent() != null) {\noperationLevelConsumes.addAll(oas30Operation.getRequestBody().getContent().keySet());\n}\n}\nemit(""consumes"", operationLevelConsumes);\nSet<String> operationLevelProduces = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getProduces() != null) {\noperationLevelProduces.addAll(oas20Operation.getProduces());\n}\n} else if (operation instanceof OpenApi30Operation) {\nfinal OpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getResponses() != null) {\nfor (OpenApiResponse response : oas30Operation.getResponses().getItems()) {\nOpenApi30Response oas30Response = (OpenApi30Response) response;\nif (oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\nOpenApi30Response oas30Response = (OpenApi30Response) oas30Operation.getResponses().getDefault();\nif (oas30Response != null && oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\n}\nemit(""produces"", operationLevelProduces);\nif (ObjectHelper.isNotEmpty(operation.getParameters())) {\noperation.getParameters().forEach(this::emit);\n}\nfinal OpenApiPathItem pathItem = (OpenApiPathItem) operation.parent();\nif (ObjectHelper.isNotEmpty(pathItem.getParameters())) {\npathItem.getParameters().forEach(this::emit);\n}\nif (operation instanceof OpenApi30Operation) {\nemitOas30Operation((OpenApi30Operation) operation);\n}\nemitter.emit(""to"", destinationGenerator.generateDestinationFor(operation));\n}\n}\n""}","{""function"": "" void visit(final PathVisitor.HttpMethod method, final OpenApiOperation operation)\n{\nif (filter.accept(operation.getOperationId())) {\nfinal String methodName = method.name().toLowerCase();\nemitter.emit(methodName, path);\nemit(""id"", operation.getOperationId());\nemit(""description"", operation.getDescription());\nSet<String> operationLevelConsumes = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getConsumes() != null) {\noperationLevelConsumes.addAll(oas20Operation.getConsumes());\n}\n} else if (operation instanceof OpenApi30Operation) {\nOpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getRequestBody() != null && oas30Operation.getRequestBody().getContent() != null) {\noperationLevelConsumes.addAll(oas30Operation.getRequestBody().getContent().keySet());\n}\n}\nemit(""consumes"", operationLevelConsumes);\nSet<String> operationLevelProduces = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getProduces() != null) {\noperationLevelProduces.addAll(oas20Operation.getProduces());\n}\n} else if (operation instanceof OpenApi30Operation) {\nfinal OpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getResponses() != null) {\nfor (OpenApiResponse response : oas30Operation.getResponses().getItems()) {\nOpenApi30Response oas30Response = (OpenApi30Response) response;\nif (oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\nOpenApi30Response oas30Response = (OpenApi30Response) oas30Operation.getResponses().getDefault();\nif (oas30Response != null && oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\n}\nemit(""produces"", operationLevelProduces);\nif (ObjectHelper.isNotEmpty(operation.getParameters())) {\noperation.getParameters().forEach(this::emit);\n}\nfinal OpenApiPathItem pathItem = (OpenApiPathItem) operation.parent();\nif (ObjectHelper.isNotEmpty(pathItem.getParameters())) {\npathItem.getParameters().forEach(this::emit);\n}\nif (operation instanceof OpenApi30Operation) {\nemitOas30Operation((OpenApi30Operation) operation);\n}\nemitter.emit(""to"", destinationGenerator.generateDestinationFor(operation));\n}\n}\n""}","java:S6201
"
"{""function"": "" void visit(final PathVisitor.HttpMethod method, final OpenApiOperation operation)\n{\nif (filter.accept(operation.getOperationId())) {\nfinal String methodName = method.name().toLowerCase();\nemitter.emit(methodName, path);\nemit(""id"", operation.getOperationId());\nemit(""description"", operation.getDescription());\nSet<String> operationLevelConsumes = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getConsumes() != null) {\noperationLevelConsumes.addAll(oas20Operation.getConsumes());\n}\n} else if (operation instanceof OpenApi30Operation) {\nOpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getRequestBody() != null && oas30Operation.getRequestBody().getContent() != null) {\noperationLevelConsumes.addAll(oas30Operation.getRequestBody().getContent().keySet());\n}\n}\nemit(""consumes"", operationLevelConsumes);\nSet<String> operationLevelProduces = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getProduces() != null) {\noperationLevelProduces.addAll(oas20Operation.getProduces());\n}\n} else if (operation instanceof OpenApi30Operation) {\nfinal OpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getResponses() != null) {\nfor (OpenApiResponse response : oas30Operation.getResponses().getItems()) {\nOpenApi30Response oas30Response = (OpenApi30Response) response;\nif (oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\nOpenApi30Response oas30Response = (OpenApi30Response) oas30Operation.getResponses().getDefault();\nif (oas30Response != null && oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\n}\nemit(""produces"", operationLevelProduces);\nif (ObjectHelper.isNotEmpty(operation.getParameters())) {\noperation.getParameters().forEach(this::emit);\n}\nfinal OpenApiPathItem pathItem = (OpenApiPathItem) operation.parent();\nif (ObjectHelper.isNotEmpty(pathItem.getParameters())) {\npathItem.getParameters().forEach(this::emit);\n}\nif (operation instanceof OpenApi30Operation) {\nemitOas30Operation((OpenApi30Operation) operation);\n}\nemitter.emit(""to"", destinationGenerator.generateDestinationFor(operation));\n}\n}\n""}","{""function"": "" void visit(final PathVisitor.HttpMethod method, final OpenApiOperation operation)\n{\nif (filter.accept(operation.getOperationId())) {\nfinal String methodName = method.name().toLowerCase();\nemitter.emit(methodName, path);\nemit(""id"", operation.getOperationId());\nemit(""description"", operation.getDescription());\nSet<String> operationLevelConsumes = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getConsumes() != null) {\noperationLevelConsumes.addAll(oas20Operation.getConsumes());\n}\n} else if (operation instanceof OpenApi30Operation) {\nOpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getRequestBody() != null && oas30Operation.getRequestBody().getContent() != null) {\noperationLevelConsumes.addAll(oas30Operation.getRequestBody().getContent().keySet());\n}\n}\nemit(""consumes"", operationLevelConsumes);\nSet<String> operationLevelProduces = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getProduces() != null) {\noperationLevelProduces.addAll(oas20Operation.getProduces());\n}\n} else if (operation instanceof OpenApi30Operation) {\nfinal OpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getResponses() != null) {\nfor (OpenApiResponse response : oas30Operation.getResponses().getItems()) {\nOpenApi30Response oas30Response = (OpenApi30Response) response;\nif (oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\nOpenApi30Response oas30Response = (OpenApi30Response) oas30Operation.getResponses().getDefault();\nif (oas30Response != null && oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\n}\nemit(""produces"", operationLevelProduces);\nif (ObjectHelper.isNotEmpty(operation.getParameters())) {\noperation.getParameters().forEach(this::emit);\n}\nfinal OpenApiPathItem pathItem = (OpenApiPathItem) operation.parent();\nif (ObjectHelper.isNotEmpty(pathItem.getParameters())) {\npathItem.getParameters().forEach(this::emit);\n}\nif (operation instanceof OpenApi30Operation) {\nemitOas30Operation((OpenApi30Operation) operation);\n}\nemitter.emit(""to"", destinationGenerator.generateDestinationFor(operation));\n}\n}\n""}","java:S6201
"
"{""function"": "" void visit(final PathVisitor.HttpMethod method, final OpenApiOperation operation)\n{\nif (filter.accept(operation.getOperationId())) {\nfinal String methodName = method.name().toLowerCase();\nemitter.emit(methodName, path);\nemit(""id"", operation.getOperationId());\nemit(""description"", operation.getDescription());\nSet<String> operationLevelConsumes = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getConsumes() != null) {\noperationLevelConsumes.addAll(oas20Operation.getConsumes());\n}\n} else if (operation instanceof OpenApi30Operation) {\nOpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getRequestBody() != null && oas30Operation.getRequestBody().getContent() != null) {\noperationLevelConsumes.addAll(oas30Operation.getRequestBody().getContent().keySet());\n}\n}\nemit(""consumes"", operationLevelConsumes);\nSet<String> operationLevelProduces = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getProduces() != null) {\noperationLevelProduces.addAll(oas20Operation.getProduces());\n}\n} else if (operation instanceof OpenApi30Operation) {\nfinal OpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getResponses() != null) {\nfor (OpenApiResponse response : oas30Operation.getResponses().getItems()) {\nOpenApi30Response oas30Response = (OpenApi30Response) response;\nif (oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\nOpenApi30Response oas30Response = (OpenApi30Response) oas30Operation.getResponses().getDefault();\nif (oas30Response != null && oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\n}\nemit(""produces"", operationLevelProduces);\nif (ObjectHelper.isNotEmpty(operation.getParameters())) {\noperation.getParameters().forEach(this::emit);\n}\nfinal OpenApiPathItem pathItem = (OpenApiPathItem) operation.parent();\nif (ObjectHelper.isNotEmpty(pathItem.getParameters())) {\npathItem.getParameters().forEach(this::emit);\n}\nif (operation instanceof OpenApi30Operation) {\nemitOas30Operation((OpenApi30Operation) operation);\n}\nemitter.emit(""to"", destinationGenerator.generateDestinationFor(operation));\n}\n}\n""}","{""function"": "" void visit(final PathVisitor.HttpMethod method, final OpenApiOperation operation)\n{\nif (filter.accept(operation.getOperationId())) {\nfinal String methodName = method.name().toLowerCase();\nemitter.emit(methodName, path);\nemit(""id"", operation.getOperationId());\nemit(""description"", operation.getDescription());\nSet<String> operationLevelConsumes = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getConsumes() != null) {\noperationLevelConsumes.addAll(oas20Operation.getConsumes());\n}\n} else if (operation instanceof OpenApi30Operation) {\nOpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getRequestBody() != null && oas30Operation.getRequestBody().getContent() != null) {\noperationLevelConsumes.addAll(oas30Operation.getRequestBody().getContent().keySet());\n}\n}\nemit(""consumes"", operationLevelConsumes);\nSet<String> operationLevelProduces = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getProduces() != null) {\noperationLevelProduces.addAll(oas20Operation.getProduces());\n}\n} else if (operation instanceof OpenApi30Operation) {\nfinal OpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getResponses() != null) {\nfor (OpenApiResponse response : oas30Operation.getResponses().getItems()) {\nOpenApi30Response oas30Response = (OpenApi30Response) response;\nif (oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\nOpenApi30Response oas30Response = (OpenApi30Response) oas30Operation.getResponses().getDefault();\nif (oas30Response != null && oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\n}\nemit(""produces"", operationLevelProduces);\nif (ObjectHelper.isNotEmpty(operation.getParameters())) {\noperation.getParameters().forEach(this::emit);\n}\nfinal OpenApiPathItem pathItem = (OpenApiPathItem) operation.parent();\nif (ObjectHelper.isNotEmpty(pathItem.getParameters())) {\npathItem.getParameters().forEach(this::emit);\n}\nif (operation instanceof OpenApi30Operation) {\nemitOas30Operation((OpenApi30Operation) operation);\n}\nemitter.emit(""to"", destinationGenerator.generateDestinationFor(operation));\n}\n}\n""}","java:S6201
"
"{""function"": "" void visit(final PathVisitor.HttpMethod method, final OpenApiOperation operation)\n{\nif (filter.accept(operation.getOperationId())) {\nfinal String methodName = method.name().toLowerCase();\nemitter.emit(methodName, path);\nemit(""id"", operation.getOperationId());\nemit(""description"", operation.getDescription());\nSet<String> operationLevelConsumes = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getConsumes() != null) {\noperationLevelConsumes.addAll(oas20Operation.getConsumes());\n}\n} else if (operation instanceof OpenApi30Operation) {\nOpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getRequestBody() != null && oas30Operation.getRequestBody().getContent() != null) {\noperationLevelConsumes.addAll(oas30Operation.getRequestBody().getContent().keySet());\n}\n}\nemit(""consumes"", operationLevelConsumes);\nSet<String> operationLevelProduces = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getProduces() != null) {\noperationLevelProduces.addAll(oas20Operation.getProduces());\n}\n} else if (operation instanceof OpenApi30Operation) {\nfinal OpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getResponses() != null) {\nfor (OpenApiResponse response : oas30Operation.getResponses().getItems()) {\nOpenApi30Response oas30Response = (OpenApi30Response) response;\nif (oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\nOpenApi30Response oas30Response = (OpenApi30Response) oas30Operation.getResponses().getDefault();\nif (oas30Response != null && oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\n}\nemit(""produces"", operationLevelProduces);\nif (ObjectHelper.isNotEmpty(operation.getParameters())) {\noperation.getParameters().forEach(this::emit);\n}\nfinal OpenApiPathItem pathItem = (OpenApiPathItem) operation.parent();\nif (ObjectHelper.isNotEmpty(pathItem.getParameters())) {\npathItem.getParameters().forEach(this::emit);\n}\nif (operation instanceof OpenApi30Operation) {\nemitOas30Operation((OpenApi30Operation) operation);\n}\nemitter.emit(""to"", destinationGenerator.generateDestinationFor(operation));\n}\n}\n""}","{""function"": "" void visit(final PathVisitor.HttpMethod method, final OpenApiOperation operation)\n{\nif (filter.accept(operation.getOperationId())) {\nfinal String methodName = method.name().toLowerCase();\nemitter.emit(methodName, path);\nemit(""id"", operation.getOperationId());\nemit(""description"", operation.getDescription());\nSet<String> operationLevelConsumes = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getConsumes() != null) {\noperationLevelConsumes.addAll(oas20Operation.getConsumes());\n}\n} else if (operation instanceof OpenApi30Operation) {\nOpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getRequestBody() != null && oas30Operation.getRequestBody().getContent() != null) {\noperationLevelConsumes.addAll(oas30Operation.getRequestBody().getContent().keySet());\n}\n}\nemit(""consumes"", operationLevelConsumes);\nSet<String> operationLevelProduces = new LinkedHashSet<>();\nif (operation instanceof OpenApi20Operation) {\nOpenApi20Operation oas20Operation = (OpenApi20Operation) operation;\nif (oas20Operation.getProduces() != null) {\noperationLevelProduces.addAll(oas20Operation.getProduces());\n}\n} else if (operation instanceof OpenApi30Operation) {\nfinal OpenApi30Operation oas30Operation = (OpenApi30Operation) operation;\nif (oas30Operation.getResponses() != null) {\nfor (OpenApiResponse response : oas30Operation.getResponses().getItems()) {\nOpenApi30Response oas30Response = (OpenApi30Response) response;\nif (oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\nOpenApi30Response oas30Response = (OpenApi30Response) oas30Operation.getResponses().getDefault();\nif (oas30Response != null && oas30Response.getContent() != null) {\noperationLevelProduces.addAll(oas30Response.getContent().keySet());\n}\n}\n}\nemit(""produces"", operationLevelProduces);\nif (ObjectHelper.isNotEmpty(operation.getParameters())) {\noperation.getParameters().forEach(this::emit);\n}\nfinal OpenApiPathItem pathItem = (OpenApiPathItem) operation.parent();\nif (ObjectHelper.isNotEmpty(pathItem.getParameters())) {\npathItem.getParameters().forEach(this::emit);\n}\nif (operation instanceof OpenApi30Operation) {\nemitOas30Operation((OpenApi30Operation) operation);\n}\nemitter.emit(""to"", destinationGenerator.generateDestinationFor(operation));\n}\n}\n""}","java:S6201
"
"{""function"": ""public static String determineBasePathFrom(final OpenApiDocument document)\n{\nObjects.requireNonNull(document, ""document"");\nif (document instanceof OpenApi20Document) {\nreturn ((OpenApi20Document) document).getBasePath();\n} else if (document instanceof OpenApi30Document) {\nfinal OpenApi30Document oas30Document = (OpenApi30Document) document;\nfinal List<OpenApi30Server> servers = oas30Document.getServers();\nif (servers == null || servers.get(0) == null) {\nreturn """";\n}\nfinal OpenApi30Server firstServer = servers.get(0);\nfinal URI serverUrl = URI.create(resolveVariablesIn(firstServer.getUrl(), firstServer));\nreturn prepareBasePath(serverUrl.getPath());\n}\nthrow new IllegalArgumentException(""Unsupported document type: "" + document.getClass().getName());\n}\n""}","{""function"": ""public static String determineBasePathFrom(final OpenApiDocument document)\n{\nObjects.requireNonNull(document, ""document"");\nif (document instanceof OpenApi20Document) {\nreturn ((OpenApi20Document) document).getBasePath();\n} else if (document instanceof OpenApi30Document) {\nfinal OpenApi30Document oas30Document = (OpenApi30Document) document;\nfinal List<OpenApi30Server> servers = oas30Document.getServers();\nif (servers == null || servers.get(0) == null) {\nreturn """";\n}\nfinal OpenApi30Server firstServer = servers.get(0);\nfinal URI serverUrl = URI.create(resolveVariablesIn(firstServer.getUrl(), firstServer));\nreturn prepareBasePath(serverUrl.getPath());\n}\nthrow new IllegalArgumentException(""Unsupported document type: "" + document.getClass().getName());\n}\n""}","java:S6201
"
"{""function"": ""public static String determineBasePathFrom(final OpenApiDocument document)\n{\nObjects.requireNonNull(document, ""document"");\nif (document instanceof OpenApi20Document) {\nreturn ((OpenApi20Document) document).getBasePath();\n} else if (document instanceof OpenApi30Document) {\nfinal OpenApi30Document oas30Document = (OpenApi30Document) document;\nfinal List<OpenApi30Server> servers = oas30Document.getServers();\nif (servers == null || servers.get(0) == null) {\nreturn """";\n}\nfinal OpenApi30Server firstServer = servers.get(0);\nfinal URI serverUrl = URI.create(resolveVariablesIn(firstServer.getUrl(), firstServer));\nreturn prepareBasePath(serverUrl.getPath());\n}\nthrow new IllegalArgumentException(""Unsupported document type: "" + document.getClass().getName());\n}\n""}","{""function"": ""public static String determineBasePathFrom(final OpenApiDocument document)\n{\nObjects.requireNonNull(document, ""document"");\nif (document instanceof OpenApi20Document) {\nreturn ((OpenApi20Document) document).getBasePath();\n} else if (document instanceof OpenApi30Document) {\nfinal OpenApi30Document oas30Document = (OpenApi30Document) document;\nfinal List<OpenApi30Server> servers = oas30Document.getServers();\nif (servers == null || servers.get(0) == null) {\nreturn """";\n}\nfinal OpenApi30Server firstServer = servers.get(0);\nfinal URI serverUrl = URI.create(resolveVariablesIn(firstServer.getUrl(), firstServer));\nreturn prepareBasePath(serverUrl.getPath());\n}\nthrow new IllegalArgumentException(""Unsupported document type: "" + document.getClass().getName());\n}\n""}","java:S6201
"
"{""function"": ""public static String determineHostFrom(final OpenApiDocument document)\n{\nif (document instanceof OpenApi20Document) {\nreturn ((OpenApi20Document) document).getHost();\n} else if (document instanceof OpenApi30Document) {\nfinal OpenApi30Document oas30Document = (OpenApi30Document) document;\nfinal List<OpenApi30Server> servers = oas30Document.getServers();\nif (servers == null || servers.get(0) == null) {\nreturn """";\n}\nfinal OpenApi30Server firstServer = servers.get(0);\nfinal URI serverUrl = URI.create(resolveVariablesIn(firstServer.getUrl(), firstServer));\nreturn serverUrl.getHost();\n}\nthrow new IllegalArgumentException(""Unsupported document type: "" + document.getClass().getName());\n}\n""}","{""function"": ""public static String determineHostFrom(final OpenApiDocument document)\n{\nif (document instanceof OpenApi20Document) {\nreturn ((OpenApi20Document) document).getHost();\n} else if (document instanceof OpenApi30Document) {\nfinal OpenApi30Document oas30Document = (OpenApi30Document) document;\nfinal List<OpenApi30Server> servers = oas30Document.getServers();\nif (servers == null || servers.get(0) == null) {\nreturn """";\n}\nfinal OpenApi30Server firstServer = servers.get(0);\nfinal URI serverUrl = URI.create(resolveVariablesIn(firstServer.getUrl(), firstServer));\nreturn serverUrl.getHost();\n}\nthrow new IllegalArgumentException(""Unsupported document type: "" + document.getClass().getName());\n}\n""}","java:S6201
"
"{""function"": ""public static String determineHostFrom(final OpenApiDocument document)\n{\nif (document instanceof OpenApi20Document) {\nreturn ((OpenApi20Document) document).getHost();\n} else if (document instanceof OpenApi30Document) {\nfinal OpenApi30Document oas30Document = (OpenApi30Document) document;\nfinal List<OpenApi30Server> servers = oas30Document.getServers();\nif (servers == null || servers.get(0) == null) {\nreturn """";\n}\nfinal OpenApi30Server firstServer = servers.get(0);\nfinal URI serverUrl = URI.create(resolveVariablesIn(firstServer.getUrl(), firstServer));\nreturn serverUrl.getHost();\n}\nthrow new IllegalArgumentException(""Unsupported document type: "" + document.getClass().getName());\n}\n""}","{""function"": ""public static String determineHostFrom(final OpenApiDocument document)\n{\nif (document instanceof OpenApi20Document) {\nreturn ((OpenApi20Document) document).getHost();\n} else if (document instanceof OpenApi30Document) {\nfinal OpenApi30Document oas30Document = (OpenApi30Document) document;\nfinal List<OpenApi30Server> servers = oas30Document.getServers();\nif (servers == null || servers.get(0) == null) {\nreturn """";\n}\nfinal OpenApi30Server firstServer = servers.get(0);\nfinal URI serverUrl = URI.create(resolveVariablesIn(firstServer.getUrl(), firstServer));\nreturn serverUrl.getHost();\n}\nthrow new IllegalArgumentException(""Unsupported document type: "" + document.getClass().getName());\n}\n""}","java:S6201
"
"{""function"": ""public Producer createProducer() throws Exception\n{\nthrow new UnsupportedOperationException(""FeedProducer is not implemented"");\n}\n""}","{""function"": ""public Producer createProducer() throws Exception\n{\nthrow new UnsupportedOperationException(""FeedProducer is not implemented"");\n}\n""}","java:S1133
"
"{""function"": ""public Producer createProducer() throws Exception\n{\nthrow new UnsupportedOperationException(""FeedProducer is not implemented"");\n}\n""}","{""function"": ""public Producer createProducer() throws Exception\n{\nthrow new UnsupportedOperationException(""FeedProducer is not implemented"");\n}\n""}","java:S1123
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S1192
"
"{""function"": ""protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception\n{\nCxfEndpoint result;\nObject value = parameters.remove(""setDefaultBus"");\nif (value != null) {\nLOG.warn(""The option setDefaultBus is @deprecated, use name defaultBus instead"");\nif (!parameters.containsKey(""defaultBus"")) {\nparameters.put(""defaultBus"", value);\n}\n}\nif (allowStreaming != null && !parameters.containsKey(""allowStreaming"")) {\nparameters.put(""allowStreaming"", Boolean.toString(allowStreaming));\n}\nif (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {\nString beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length());\nif (beanId.startsWith(""//"")) {\nbeanId = beanId.substring(2);\n}\nresult = createCxfSpringEndpoint(beanId);\nresult.setBeanId(beanId);\nif (beanCache.containsKey(beanId)) {\nBeanCacheEntry entry = beanCache.get(beanId);\nif (entry.cxfEndpoint == result && !entry.parameters.equals(parameters)) {\nthrow new RuntimeException(""Different URI refer to the same CxfEndpoint Bean instance"" + "" with ID : "" + beanId + "" but with different parameters. Please use the proper Bean scope "");\n}\n} else {\nbeanCache.put(beanId, new BeanCacheEntry(result, new HashMap<>(parameters)));\n}\n} else {\nresult = createCxfEndpoint(remaining);\n}\nresult.setComponent(this);\nresult.setCamelContext(getCamelContext());\nsetEndpointHeaderFilterStrategy(result);\nsetProperties(result, parameters);\nMap<String, Object> properties = PropertiesHelper.extractProperties(parameters, ""properties."");\nresult.setProperties(properties);\nif (result.getSslContextParameters() == null) {\nresult.setSslContextParameters(retrieveGlobalSslContextParameters());\n}\nreturn result;\n}\n""}","{""function"": ""protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception\n{\nCxfEndpoint result;\nObject value = parameters.remove(""setDefaultBus"");\nif (value != null) {\nLOG.warn(""The option setDefaultBus is @deprecated, use name defaultBus instead"");\nif (!parameters.containsKey(""defaultBus"")) {\nparameters.put(""defaultBus"", value);\n}\n}\nif (allowStreaming != null && !parameters.containsKey(""allowStreaming"")) {\nparameters.put(""allowStreaming"", Boolean.toString(allowStreaming));\n}\nif (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {\nString beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length());\nif (beanId.startsWith(""//"")) {\nbeanId = beanId.substring(2);\n}\nresult = createCxfSpringEndpoint(beanId);\nresult.setBeanId(beanId);\nif (beanCache.containsKey(beanId)) {\nBeanCacheEntry entry = beanCache.get(beanId);\nif (entry.cxfEndpoint == result && !entry.parameters.equals(parameters)) {\nthrow new RuntimeException(""Different URI refer to the same CxfEndpoint Bean instance"" + "" with ID : "" + beanId + "" but with different parameters. Please use the proper Bean scope "");\n}\n} else {\nbeanCache.put(beanId, new BeanCacheEntry(result, new HashMap<>(parameters)));\n}\n} else {\nresult = createCxfEndpoint(remaining);\n}\nresult.setComponent(this);\nresult.setCamelContext(getCamelContext());\nsetEndpointHeaderFilterStrategy(result);\nsetProperties(result, parameters);\nMap<String, Object> properties = PropertiesHelper.extractProperties(parameters, ""properties."");\nresult.setProperties(properties);\nif (result.getSslContextParameters() == null) {\nresult.setSslContextParameters(retrieveGlobalSslContextParameters());\n}\nreturn result;\n}\n""}","java:S2293
"
"{""function"": ""public boolean process(Exchange exchange, AsyncCallback callback)\n{\nif (!isRunAllowed()) {\nif (exchange.getException() == null) {\nexchange.setException(new RejectedExecutionException());\n}\ncallback.done(true);\nreturn true;\n}\ntry {\nLOG.trace(""Exchange Pattern {}"", exchange.getPattern());\nif (exchange.getPattern().isOutCapable()) {\nreturn processInOut(exchange, callback);\n} else {\nreturn processInOnly(exchange, callback);\n}\n} catch (Exception e) {\nexchange.setException(e);\ncallback.done(true);\nreturn true;\n}\n}\n""}","{""function"": ""public boolean process(Exchange exchange, AsyncCallback callback)\n{\nif (!isRunAllowed()) {\nif (exchange.getException() == null) {\nexchange.setException(new RejectedExecutionException());\n}\ncallback.done(true);\nreturn true;\n}\ntry {\nLOG.trace(""Exchange Pattern {}"", exchange.getPattern());\nif (exchange.getPattern().isOutCapable()) {\nreturn processInOut(exchange, callback);\n} else {\nreturn processInOnly(exchange, callback);\n}\n} catch (Exception e) {\nexchange.setException(e);\ncallback.done(true);\nreturn true;\n}\n}\n""}","java:S1181
"
"{""function"": ""public static ConsumerPath<T> matchBestPath(String requestMethod, String requestPath, List<ConsumerPath<T>> consumerPaths)\n{\nConsumerPath<T> answer = null;\nList<ConsumerPath<T>> candidates = new ArrayList<>();\nfor (ConsumerPath<T> entry : consumerPaths) {\nif (matchRestMethod(requestMethod, entry.getRestrictMethod())) {\ncandidates.add(entry);\n}\n}\nIterator<ConsumerPath<T>> it = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\nif (answer == null && isOptionsMethod(requestMethod)) {\ncandidates.clear();\ncandidates.addAll(consumerPaths);\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\n}\nboolean noWildcards = candidates.stream().allMatch(p -> countWildcards(p.getConsumerPath()) == 0);\nif (noWildcards) {\nanswer = candidates.stream().filter(c -> matchPath(requestPath, c.getConsumerPath(), c.isMatchOnUriPrefix())).sorted(Comparator.comparingInt(o -> -1 * o.getConsumerPath().length())).findFirst().orElse(null);\n}\nif (answer != null) {\nreturn answer;\n}\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<?> consumer = it.next();\nif (!matchRestPath(requestPath, consumer.getConsumerPath(), true)) {\nit.remove();\n}\n}\nConsumerPath<T> best = null;\nMap<Integer, List<ConsumerPath<T>>> pathMap = new HashMap<>();\nif (candidates.size() > 1) {\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> entry = it.next();\nint wildcards = countWildcards(entry.getConsumerPath());\nif (wildcards > 0) {\nList<ConsumerPath<T>> consumerPathsLst = pathMap.computeIfAbsent(wildcards, key -> new ArrayList<>());\nconsumerPathsLst.add(entry);\n}\n}\nOptionalInt min = pathMap.keySet().stream().mapToInt(Integer::intValue).min();\nif (min.isPresent()) {\nList<ConsumerPath<T>> bestConsumerPaths = pathMap.get(min.getAsInt());\nif (bestConsumerPaths.size() > 1 && !canBeAmbiguous(requestMethod, requestMethod)) {\nString exceptionMsg = ""Ambiguous paths "" + bestConsumerPaths.stream().map(ConsumerPath::getConsumerPath).collect(Collectors.joining("","")) + "" for request path "" + requestPath;\nthrow new IllegalStateException(exceptionMsg);\n}\nbest = bestConsumerPaths.get(0);\n}\nif (best != null) {\nanswer = best;\n}\n}\nif (answer == null && candidates.size() == 1) {\nanswer = candidates.get(0);\n}\nreturn answer;\n}\n""}","{""function"": ""public static ConsumerPath<T> matchBestPath(String requestMethod, String requestPath, List<ConsumerPath<T>> consumerPaths)\n{\nConsumerPath<T> answer = null;\nList<ConsumerPath<T>> candidates = new ArrayList<>();\nfor (ConsumerPath<T> entry : consumerPaths) {\nif (matchRestMethod(requestMethod, entry.getRestrictMethod())) {\ncandidates.add(entry);\n}\n}\nIterator<ConsumerPath<T>> it = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\nif (answer == null && isOptionsMethod(requestMethod)) {\ncandidates.clear();\ncandidates.addAll(consumerPaths);\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\n}\nboolean noWildcards = candidates.stream().allMatch(p -> countWildcards(p.getConsumerPath()) == 0);\nif (noWildcards) {\nanswer = candidates.stream().filter(c -> matchPath(requestPath, c.getConsumerPath(), c.isMatchOnUriPrefix())).sorted(Comparator.comparingInt(o -> -1 * o.getConsumerPath().length())).findFirst().orElse(null);\n}\nif (answer != null) {\nreturn answer;\n}\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<?> consumer = it.next();\nif (!matchRestPath(requestPath, consumer.getConsumerPath(), true)) {\nit.remove();\n}\n}\nConsumerPath<T> best = null;\nMap<Integer, List<ConsumerPath<T>>> pathMap = new HashMap<>();\nif (candidates.size() > 1) {\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> entry = it.next();\nint wildcards = countWildcards(entry.getConsumerPath());\nif (wildcards > 0) {\nList<ConsumerPath<T>> consumerPathsLst = pathMap.computeIfAbsent(wildcards, key -> new ArrayList<>());\nconsumerPathsLst.add(entry);\n}\n}\nOptionalInt min = pathMap.keySet().stream().mapToInt(Integer::intValue).min();\nif (min.isPresent()) {\nList<ConsumerPath<T>> bestConsumerPaths = pathMap.get(min.getAsInt());\nif (bestConsumerPaths.size() > 1 && !canBeAmbiguous(requestMethod, requestMethod)) {\nString exceptionMsg = ""Ambiguous paths "" + bestConsumerPaths.stream().map(ConsumerPath::getConsumerPath).collect(Collectors.joining("","")) + "" for request path "" + requestPath;\nthrow new IllegalStateException(exceptionMsg);\n}\nbest = bestConsumerPaths.get(0);\n}\nif (best != null) {\nanswer = best;\n}\n}\nif (answer == null && candidates.size() == 1) {\nanswer = candidates.get(0);\n}\nreturn answer;\n}\n""}","java:S3740
"
"{""function"": ""private void listener(Listener.Type type, String key, ReplyHandler handler)\n{\nswitch(type) {\ncase Put:\nlog.trace(""Added messageKey: {}"", key);\nbreak;\ncase Remove:\nlog.trace(""Removed messageKey: {}"", key);\nbreak;\ncase Evict:\ntry {\nhandler.onTimeout(key);\n} catch (Exception e) {\nlog.warn(""Error processing onTimeout for messageKey: {} due: {}. "" + ""This exception is ignored."", key, e.getLocalizedMessage(), e);\n}\nlog.trace(""Evicted messageKey: {}"", key);\nbreak;\ndefault:\n}\n}\n""}","{""function"": ""private void listener(Listener.Type type, String key, ReplyHandler handler)\n{\nswitch(type) {\ncase Put:\nlog.trace(""Added messageKey: {}"", key);\nbreak;\ncase Remove:\nlog.trace(""Removed messageKey: {}"", key);\nbreak;\ncase Evict:\ntry {\nhandler.onTimeout(key);\n} catch (Exception e) {\nlog.warn(""Error processing onTimeout for messageKey: {} due: {}. "" + ""This exception is ignored."", key, e.getLocalizedMessage(), e);\n}\nlog.trace(""Evicted messageKey: {}"", key);\nbreak;\ndefault:\n}\n}\n""}","java:S1181
"
"{""function"": ""protected void doExecute(File sourcesOutputDir, File resourcesOutputDir, List<String> classes, boolean testClasspathOnly) throws MojoExecutionException\n{\nif (""pom"".equals(project.getPackaging())) {\nreturn;\n}\nif (sourcesOutputDir == null) {\nsourcesOutputDir = new File(project.getBasedir(), ""src/generated/java"");\n}\nif (resourcesOutputDir == null) {\nresourcesOutputDir = new File(project.getBasedir(), ""src/generated/resources"");\n}\nList<URL> urls = new ArrayList<>();\naddRelevantProjectDependenciesToClasspath(urls, testClasspathOnly);\nprojectClassLoader = DynamicClassLoader.createDynamicClassLoaderFromUrls(urls);\nSet<String> set = new LinkedHashSet<>();\nSet<String> extendedSet = new LinkedHashSet<>();\nSet<String> bootstrapSet = new LinkedHashSet<>();\nSet<String> bootstrapAndExtendedSet = new LinkedHashSet<>();\nif (discoverClasses) {\nIndex index = PackagePluginUtils.readJandexIndexIgnoreMissing(project, getLog());\nif (index != null) {\nList<AnnotationInstance> annotations = index.getAnnotations(CONFIGURER);\nannotations.stream().filter(annotation -> annotation.target().kind() == AnnotationTarget.Kind.CLASS).filter(annotation -> annotation.target().asClass().nestingType() == ClassInfo.NestingType.TOP_LEVEL).filter(annotation -> asBooleanDefaultTrue(annotation, ""generateConfigurer"")).forEach(annotation -> {\nString currentClass = annotation.target().asClass().name().toString();\naddToSets(annotation, bootstrapAndExtendedSet, currentClass, bootstrapSet, extendedSet, set);\n});\n}\n}\nif (classes != null && !classes.isEmpty()) {\nIndex index = readJandexIndex(project);\nfor (String clazz : classes) {\nClassInfo ci = index.getClassByName(DotName.createSimple(clazz));\nAnnotationInstance ai = ci != null ? ci.declaredAnnotation(CONFIGURER) : null;\nif (ai != null) {\naddToSets(ai, bootstrapAndExtendedSet, clazz, bootstrapSet, extendedSet, set);\n} else {\nset.add(clazz);\n}\n}\n}\nfor (String fqn : set) {\nprocessClass(fqn, sourcesOutputDir, false, false, resourcesOutputDir);\n}\nfor (String fqn : bootstrapSet) {\nprocessClass(fqn, sourcesOutputDir, false, true, resourcesOutputDir);\n}\nfor (String fqn : extendedSet) {\nprocessClass(fqn, sourcesOutputDir, true, false, resourcesOutputDir);\n}\nfor (String fqn : bootstrapAndExtendedSet) {\nprocessClass(fqn, sourcesOutputDir, true, true, resourcesOutputDir);\n}\n}\n""}","{""function"": ""protected void doExecute(File sourcesOutputDir, File resourcesOutputDir, List<String> classes, boolean testClasspathOnly) throws MojoExecutionException\n{\nif (""pom"".equals(project.getPackaging())) {\nreturn;\n}\nif (sourcesOutputDir == null) {\nsourcesOutputDir = new File(project.getBasedir(), ""src/generated/java"");\n}\nif (resourcesOutputDir == null) {\nresourcesOutputDir = new File(project.getBasedir(), ""src/generated/resources"");\n}\nList<URL> urls = new ArrayList<>();\naddRelevantProjectDependenciesToClasspath(urls, testClasspathOnly);\nprojectClassLoader = DynamicClassLoader.createDynamicClassLoaderFromUrls(urls);\nSet<String> set = new LinkedHashSet<>();\nSet<String> extendedSet = new LinkedHashSet<>();\nSet<String> bootstrapSet = new LinkedHashSet<>();\nSet<String> bootstrapAndExtendedSet = new LinkedHashSet<>();\nif (discoverClasses) {\nIndex index = PackagePluginUtils.readJandexIndexIgnoreMissing(project, getLog());\nif (index != null) {\nList<AnnotationInstance> annotations = index.getAnnotations(CONFIGURER);\nannotations.stream().filter(annotation -> annotation.target().kind() == AnnotationTarget.Kind.CLASS).filter(annotation -> annotation.target().asClass().nestingType() == ClassInfo.NestingType.TOP_LEVEL).filter(annotation -> asBooleanDefaultTrue(annotation, ""generateConfigurer"")).forEach(annotation -> {\nString currentClass = annotation.target().asClass().name().toString();\naddToSets(annotation, bootstrapAndExtendedSet, currentClass, bootstrapSet, extendedSet, set);\n});\n}\n}\nif (classes != null && !classes.isEmpty()) {\nIndex index = readJandexIndex(project);\nfor (String clazz : classes) {\nClassInfo ci = index.getClassByName(DotName.createSimple(clazz));\nAnnotationInstance ai = ci != null ? ci.declaredAnnotation(CONFIGURER) : null;\nif (ai != null) {\naddToSets(ai, bootstrapAndExtendedSet, clazz, bootstrapSet, extendedSet, set);\n} else {\nset.add(clazz);\n}\n}\n}\nfor (String fqn : set) {\nprocessClass(fqn, sourcesOutputDir, false, false, resourcesOutputDir);\n}\nfor (String fqn : bootstrapSet) {\nprocessClass(fqn, sourcesOutputDir, false, true, resourcesOutputDir);\n}\nfor (String fqn : extendedSet) {\nprocessClass(fqn, sourcesOutputDir, true, false, resourcesOutputDir);\n}\nfor (String fqn : bootstrapAndExtendedSet) {\nprocessClass(fqn, sourcesOutputDir, true, true, resourcesOutputDir);\n}\n}\n""}","java:S1874
"
"{""function"": ""public static ResumeCache<Object> createSimpleCache()\n{\nreturn new ResumeCache<>() {\n\nprivate final Map<Object, Object> cache = new HashMap<>();\n\n@Override\npublic Object computeIfAbsent(Object key, Function<? super Object, ? super Object> mapping) {\nreturn cache.computeIfAbsent(key, mapping);\n}\n\n@Override\npublic Object computeIfPresent(Object key, BiFunction<? super Object, ? super Object, ? super Object> remapping) {\nreturn cache.computeIfPresent(key, remapping);\n}\n\n@Override\npublic boolean contains(Object key, Object entry) {\nreturn Objects.equals(cache.get(key), entry);\n}\n\n@Override\npublic void add(Object key, Object offsetValue) {\ncache.put(key, offsetValue);\n}\n\n@Override\npublic boolean isFull() {\nreturn false;\n}\n\n@Override\npublic long capacity() {\nreturn Integer.MAX_VALUE;\n}\n\n@Override\npublic <T> T get(Object key, Class<T> clazz) {\nfinal Object o = cache.get(key);\nreturn clazz.cast(o);\n}\n\n@Override\npublic Object get(Object key) {\nreturn cache.get(key);\n}\n\n@Override\npublic void forEach(BiFunction<? super Object, ? super Object, Boolean> action) {\nfor (Map.Entry<Object, Object> e : cache.entrySet()) {\nif (!action.apply(e.getKey(), e.getValue())) {\ncache.remove(e.getKey());\n}\n}\n}\n};\n}\n""}","{""function"": ""public static ResumeCache<Object> createSimpleCache()\n{\nreturn new ResumeCache<>() {\n\nprivate final Map<Object, Object> cache = new HashMap<>();\n\n@Override\npublic Object computeIfAbsent(Object key, Function<? super Object, ? super Object> mapping) {\nreturn cache.computeIfAbsent(key, mapping);\n}\n\n@Override\npublic Object computeIfPresent(Object key, BiFunction<? super Object, ? super Object, ? super Object> remapping) {\nreturn cache.computeIfPresent(key, remapping);\n}\n\n@Override\npublic boolean contains(Object key, Object entry) {\nreturn Objects.equals(cache.get(key), entry);\n}\n\n@Override\npublic void add(Object key, Object offsetValue) {\ncache.put(key, offsetValue);\n}\n\n@Override\npublic boolean isFull() {\nreturn false;\n}\n\n@Override\npublic long capacity() {\nreturn Integer.MAX_VALUE;\n}\n\n@Override\npublic <T> T get(Object key, Class<T> clazz) {\nfinal Object o = cache.get(key);\nreturn clazz.cast(o);\n}\n\n@Override\npublic Object get(Object key) {\nreturn cache.get(key);\n}\n\n@Override\npublic void forEach(BiFunction<? super Object, ? super Object, Boolean> action) {\nfor (Map.Entry<Object, Object> e : cache.entrySet()) {\nif (!action.apply(e.getKey(), e.getValue())) {\ncache.remove(e.getKey());\n}\n}\n}\n};\n}\n""}","java:S3740
"
"{""function"": ""public static ResumeStrategyConfigurationBuilder<ResumeStrategyConfigurationBuilder<?, ?>, ResumeStrategyConfiguration> configurationBuilder()\n{\nreturn new ResumeStrategyConfigurationBuilder<>() {\n\n@Override\npublic ResumeStrategyConfigurationBuilder<?, ?> withCacheFillPolicy(Cacheable.FillPolicy cacheFillPolicy) {\nreturn this;\n}\n\n@Override\npublic ResumeStrategyConfigurationBuilder<?, ?> withResumeCache(ResumeCache<?> resumeCache) {\nreturn this;\n}\n\n@Override\npublic ResumeStrategyConfiguration build() {\nreturn new ResumeStrategyConfiguration() {\n\n@Override\npublic ResumeCache<?> getResumeCache() {\nreturn createSimpleCache();\n}\n\n@Override\npublic String resumeStrategyService() {\nreturn ""transient-resume-strategy"";\n}\n};\n}\n};\n}\n""}","{""function"": ""public static ResumeStrategyConfigurationBuilder<ResumeStrategyConfigurationBuilder<?, ?>, ResumeStrategyConfiguration> configurationBuilder()\n{\nreturn new ResumeStrategyConfigurationBuilder<>() {\n\n@Override\npublic ResumeStrategyConfigurationBuilder<?, ?> withCacheFillPolicy(Cacheable.FillPolicy cacheFillPolicy) {\nreturn this;\n}\n\n@Override\npublic ResumeStrategyConfigurationBuilder<?, ?> withResumeCache(ResumeCache<?> resumeCache) {\nreturn this;\n}\n\n@Override\npublic ResumeStrategyConfiguration build() {\nreturn new ResumeStrategyConfiguration() {\n\n@Override\npublic ResumeCache<?> getResumeCache() {\nreturn createSimpleCache();\n}\n\n@Override\npublic String resumeStrategyService() {\nreturn ""transient-resume-strategy"";\n}\n};\n}\n};\n}\n""}","java:S3740
"
"{""function"": ""public String parse(String input)\n{\nboolean nested = nestedPlaceholder;\nif (input.contains(""?nested=true"")) {\nnested = true;\ninput = input.replace(""?nested=true"", """");\n} else if (input.contains(""?nested=false"")) {\nnested = false;\ninput = input.replace(""?nested=false"", """");\n}\nif (nested) {\nreturn doParseNested(input, new HashSet<>());\n} else {\nreturn doParse(input);\n}\n}\n""}","{""function"": ""public String parse(String input)\n{\nboolean nested = nestedPlaceholder;\nif (input.contains(""?nested=true"")) {\nnested = true;\ninput = input.replace(""?nested=true"", """");\n} else if (input.contains(""?nested=false"")) {\nnested = false;\ninput = input.replace(""?nested=false"", """");\n}\nif (nested) {\nreturn doParseNested(input, new HashSet<>());\n} else {\nreturn doParse(input);\n}\n}\n""}","java:S2293
"
"{""function"": ""private void processUpdateAsync(ActionContext ctx, Class<?> documentClass)\n{\nUpdateRequest.Builder<?, ?> updateRequestBuilder = ctx.getMessage().getBody(UpdateRequest.Builder.class);\nonComplete(ctx.getClient().update(updateRequestBuilder.build(), documentClass).thenApply(WriteResponseBase::id), ctx);\n}\n""}","{""function"": ""private void processUpdateAsync(ActionContext ctx, Class<?> documentClass)\n{\nUpdateRequest.Builder<?, ?> updateRequestBuilder = ctx.getMessage().getBody(UpdateRequest.Builder.class);\nonComplete(ctx.getClient().update(updateRequestBuilder.build(), documentClass).thenApply(WriteResponseBase::id), ctx);\n}\n""}","java:S3740
"
"{""function"": ""public static ConsumerPath<T> matchBestPath(String requestMethod, String requestPath, List<ConsumerPath<T>> consumerPaths)\n{\nConsumerPath<T> answer = null;\nList<ConsumerPath<T>> candidates = new ArrayList<>();\nfor (ConsumerPath<T> entry : consumerPaths) {\nif (matchRestMethod(requestMethod, entry.getRestrictMethod())) {\ncandidates.add(entry);\n}\n}\nIterator<ConsumerPath<T>> it = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\nif (answer == null && isOptionsMethod(requestMethod)) {\ncandidates.clear();\ncandidates.addAll(consumerPaths);\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\n}\nboolean noWildcards = candidates.stream().allMatch(p -> countWildcards(p.getConsumerPath()) == 0);\nif (noWildcards) {\nanswer = candidates.stream().filter(c -> matchPath(requestPath, c.getConsumerPath(), c.isMatchOnUriPrefix())).sorted(Comparator.comparingInt(o -> -1 * o.getConsumerPath().length())).findFirst().orElse(null);\n}\nif (answer != null) {\nreturn answer;\n}\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<?> consumer = it.next();\nif (!matchRestPath(requestPath, consumer.getConsumerPath(), true)) {\nit.remove();\n}\n}\nConsumerPath<T> best = null;\nMap<Integer, List<ConsumerPath<T>>> pathMap = new HashMap<>();\nif (candidates.size() > 1) {\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> entry = it.next();\nint wildcards = countWildcards(entry.getConsumerPath());\nif (wildcards > 0) {\nList<ConsumerPath<T>> consumerPathsLst = pathMap.computeIfAbsent(wildcards, key -> new ArrayList<>());\nconsumerPathsLst.add(entry);\n}\n}\nOptionalInt min = pathMap.keySet().stream().mapToInt(Integer::intValue).min();\nif (min.isPresent()) {\nList<ConsumerPath<T>> bestConsumerPaths = pathMap.get(min.getAsInt());\nif (bestConsumerPaths.size() > 1 && !canBeAmbiguous(requestMethod, requestMethod)) {\nString exceptionMsg = ""Ambiguous paths "" + bestConsumerPaths.stream().map(ConsumerPath::getConsumerPath).collect(Collectors.joining("","")) + "" for request path "" + requestPath;\nthrow new IllegalStateException(exceptionMsg);\n}\nbest = bestConsumerPaths.get(0);\n}\nif (best != null) {\nanswer = best;\n}\n}\nif (answer == null && candidates.size() == 1) {\nanswer = candidates.get(0);\n}\nreturn answer;\n}\n""}","{""function"": ""public static ConsumerPath<T> matchBestPath(String requestMethod, String requestPath, List<ConsumerPath<T>> consumerPaths)\n{\nConsumerPath<T> answer = null;\nList<ConsumerPath<T>> candidates = new ArrayList<>();\nfor (ConsumerPath<T> entry : consumerPaths) {\nif (matchRestMethod(requestMethod, entry.getRestrictMethod())) {\ncandidates.add(entry);\n}\n}\nIterator<ConsumerPath<T>> it = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\nif (answer == null && isOptionsMethod(requestMethod)) {\ncandidates.clear();\ncandidates.addAll(consumerPaths);\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\n}\nboolean noWildcards = candidates.stream().allMatch(p -> countWildcards(p.getConsumerPath()) == 0);\nif (noWildcards) {\nanswer = candidates.stream().filter(c -> matchPath(requestPath, c.getConsumerPath(), c.isMatchOnUriPrefix())).sorted(Comparator.comparingInt(o -> -1 * o.getConsumerPath().length())).findFirst().orElse(null);\n}\nif (answer != null) {\nreturn answer;\n}\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<?> consumer = it.next();\nif (!matchRestPath(requestPath, consumer.getConsumerPath(), true)) {\nit.remove();\n}\n}\nConsumerPath<T> best = null;\nMap<Integer, List<ConsumerPath<T>>> pathMap = new HashMap<>();\nif (candidates.size() > 1) {\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> entry = it.next();\nint wildcards = countWildcards(entry.getConsumerPath());\nif (wildcards > 0) {\nList<ConsumerPath<T>> consumerPathsLst = pathMap.computeIfAbsent(wildcards, key -> new ArrayList<>());\nconsumerPathsLst.add(entry);\n}\n}\nOptionalInt min = pathMap.keySet().stream().mapToInt(Integer::intValue).min();\nif (min.isPresent()) {\nList<ConsumerPath<T>> bestConsumerPaths = pathMap.get(min.getAsInt());\nif (bestConsumerPaths.size() > 1 && !canBeAmbiguous(requestMethod, requestMethod)) {\nString exceptionMsg = ""Ambiguous paths "" + bestConsumerPaths.stream().map(ConsumerPath::getConsumerPath).collect(Collectors.joining("","")) + "" for request path "" + requestPath;\nthrow new IllegalStateException(exceptionMsg);\n}\nbest = bestConsumerPaths.get(0);\n}\nif (best != null) {\nanswer = best;\n}\n}\nif (answer == null && candidates.size() == 1) {\nanswer = candidates.get(0);\n}\nreturn answer;\n}\n""}","java:S3740
"
"{""function"": ""private static String getType(Object kamelet) throws Exception\n{\nMethod m = kamelet.getClass().getMethod(""getMetadata"");\nObject meta = ObjectHelper.invokeMethod(m, kamelet);\nm = meta.getClass().getMethod(""getLabels"");\n@SuppressWarnings(""unchecked"")\nMap<String, String> labels = (Map<String, String>) ObjectHelper.invokeMethod(m, meta);\nif (labels != null) {\nreturn labels.get(""camel.apache.org/kamelet.type"");\n}\nreturn null;\n}\n""}","{""function"": ""private static String getType(Object kamelet) throws Exception\n{\nMethod m = kamelet.getClass().getMethod(""getMetadata"");\nObject meta = ObjectHelper.invokeMethod(m, kamelet);\nm = meta.getClass().getMethod(""getLabels"");\n@SuppressWarnings(""unchecked"")\nMap<String, String> labels = (Map<String, String>) ObjectHelper.invokeMethod(m, meta);\nif (labels != null) {\nreturn labels.get(""camel.apache.org/kamelet.type"");\n}\nreturn null;\n}\n""}","java:S3740
"
"{""function"": ""private static String getSupportLevel(Object kamelet) throws Exception\n{\nMethod m = kamelet.getClass().getMethod(""getMetadata"");\nObject meta = ObjectHelper.invokeMethod(m, kamelet);\nm = meta.getClass().getMethod(""getAnnotations"");\n@SuppressWarnings(""unchecked"")\nMap<String, String> anns = (Map<String, String>) ObjectHelper.invokeMethod(m, meta);\nif (anns != null) {\nreturn anns.get(""camel.apache.org/kamelet.support.level"");\n}\nreturn null;\n}\n""}","{""function"": ""private static String getSupportLevel(Object kamelet) throws Exception\n{\nMethod m = kamelet.getClass().getMethod(""getMetadata"");\nObject meta = ObjectHelper.invokeMethod(m, kamelet);\nm = meta.getClass().getMethod(""getAnnotations"");\n@SuppressWarnings(""unchecked"")\nMap<String, String> anns = (Map<String, String>) ObjectHelper.invokeMethod(m, meta);\nif (anns != null) {\nreturn anns.get(""camel.apache.org/kamelet.support.level"");\n}\nreturn null;\n}\n""}","java:S3740
"
"{""function"": ""private JsonNode readNodeFromYaml() throws FileNotFoundException\n{\nfinal ObjectMapper mapper = new ObjectMapper();\nYaml loader = new Yaml(new SafeConstructor(new LoaderOptions()));\nMap<?, ?> map = loader.load(new FileInputStream(Paths.get(input).toFile()));\nreturn mapper.convertValue(map, JsonNode.class);\n}\n""}","{""function"": ""private JsonNode readNodeFromYaml() throws FileNotFoundException\n{\nfinal ObjectMapper mapper = new ObjectMapper();\nYaml loader = new Yaml(new SafeConstructor(new LoaderOptions()));\nMap<?, ?> map = loader.load(new FileInputStream(Paths.get(input).toFile()));\nreturn mapper.convertValue(map, JsonNode.class);\n}\n""}","java:S3740
"
"{""function"": ""public boolean remove(final Exchange exchange, final String messageId)\n{\nfinal EntityManager entityManager = getTargetEntityManager(exchange, entityManagerFactory, true, sharedEntityManager, true);\nBoolean[] rc = new Boolean[1];\ntransactionStrategy.executeInTransaction(() -> {\nif (isJoinTransaction()) {\nentityManager.joinTransaction();\n}\ntry {\nList<?> list = query(entityManager, messageId);\nif (list.isEmpty()) {\nrc[0] = Boolean.FALSE;\n} else {\nMessageProcessed processed = (MessageProcessed) list.get(0);\nentityManager.remove(processed);\nentityManager.flush();\nentityManager.close();\nrc[0] = Boolean.TRUE;\n}\n} catch (Exception ex) {\nString contextInfo = String.format(SOMETHING_WENT_WRONG, ex.getMessage());\nthrow new PersistenceException(contextInfo, ex);\n} finally {\ntry {\nif (entityManager.isOpen()) {\nentityManager.close();\n}\n} catch (Exception e) {\n}\n}\n});\nLOG.debug(""remove {}"", messageId);\nreturn rc[0];\n}\n""}","{""function"": ""public boolean remove(final Exchange exchange, final String messageId)\n{\nfinal EntityManager entityManager = getTargetEntityManager(exchange, entityManagerFactory, true, sharedEntityManager, true);\nBoolean[] rc = new Boolean[1];\ntransactionStrategy.executeInTransaction(() -> {\nif (isJoinTransaction()) {\nentityManager.joinTransaction();\n}\ntry {\nList<?> list = query(entityManager, messageId);\nif (list.isEmpty()) {\nrc[0] = Boolean.FALSE;\n} else {\nMessageProcessed processed = (MessageProcessed) list.get(0);\nentityManager.remove(processed);\nentityManager.flush();\nentityManager.close();\nrc[0] = Boolean.TRUE;\n}\n} catch (Exception ex) {\nString contextInfo = String.format(SOMETHING_WENT_WRONG, ex.getMessage());\nthrow new PersistenceException(contextInfo, ex);\n} finally {\ntry {\nif (entityManager.isOpen()) {\nentityManager.close();\n}\n} catch (Exception e) {\n}\n}\n});\nLOG.debug(""remove {}"", messageId);\nreturn rc[0];\n}\n""}","java:S1197
"
"{""function"": ""public boolean notifyBuilderMatches()\n{\nif (failFastAssertionError != null) {\nreturn false;\n}\nfor (Runnable test : tests) {\nboolean skip = failFast && test instanceof AssertionTask;\nif (!skip) {\ntry {\ntest.run();\n} catch (Exception e) {\nreturn false;\n}\n}\n}\nif (latch != null) {\ntry {\nreturn latch.await(0, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\nthrow RuntimeCamelException.wrapRuntimeException(e);\n}\n} else {\nreturn true;\n}\n}\n""}","{""function"": ""public boolean notifyBuilderMatches()\n{\nif (failFastAssertionError != null) {\nreturn false;\n}\nfor (Runnable test : tests) {\nboolean skip = failFast && test instanceof AssertionTask;\nif (!skip) {\ntry {\ntest.run();\n} catch (Exception e) {\nreturn false;\n}\n}\n}\nif (latch != null) {\ntry {\nreturn latch.await(0, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\nthrow RuntimeCamelException.wrapRuntimeException(e);\n}\n} else {\nreturn true;\n}\n}\n""}","java:S1181
"
"{""function"": ""public int discoverMappings(Class<?> clazz)\n{\nfinal AtomicInteger answer = new AtomicInteger();\ntry {\nfinal Object mapper = Mappers.getMapper(clazz);\nif (mapper != null) {\nReflectionHelper.doWithMethods(clazz, mc -> {\nif (mc.isDefault()) {\nreturn;\n}\nint parameterCount = mc.getParameterCount();\nif (parameterCount != 1) {\nreturn;\n}\nClass<?> from = mc.getParameterTypes()[0];\nClass<?> to = mc.getReturnType();\nif (to.equals(Void.class)) {\nreturn;\n}\ncamelContext.getTypeConverterRegistry().addTypeConverter(to, from, new SimpleTypeConverter(false, (type, exchange, value) -> ObjectHelper.invokeMethod(mc, mapper, value)));\nLOG.debug(""Added MapStruct type converter: {} -> {}"", from, to);\nanswer.incrementAndGet();\n});\n}\n} catch (Exception e) {\nLOG.debug(""Mapper class: {} is not a MapStruct Mapper. Skipping this class."", clazz);\n}\nreturn answer.get();\n}\n""}","{""function"": ""public int discoverMappings(Class<?> clazz)\n{\nfinal AtomicInteger answer = new AtomicInteger();\ntry {\nfinal Object mapper = Mappers.getMapper(clazz);\nif (mapper != null) {\nReflectionHelper.doWithMethods(clazz, mc -> {\nif (mc.isDefault()) {\nreturn;\n}\nint parameterCount = mc.getParameterCount();\nif (parameterCount != 1) {\nreturn;\n}\nClass<?> from = mc.getParameterTypes()[0];\nClass<?> to = mc.getReturnType();\nif (to.equals(Void.class)) {\nreturn;\n}\ncamelContext.getTypeConverterRegistry().addTypeConverter(to, from, new SimpleTypeConverter(false, (type, exchange, value) -> ObjectHelper.invokeMethod(mc, mapper, value)));\nLOG.debug(""Added MapStruct type converter: {} -> {}"", from, to);\nanswer.incrementAndGet();\n});\n}\n} catch (Exception e) {\nLOG.debug(""Mapper class: {} is not a MapStruct Mapper. Skipping this class."", clazz);\n}\nreturn answer.get();\n}\n""}","java:S1181
"
"{""function"": ""public static ConsumerPath<T> matchBestPath(String requestMethod, String requestPath, List<ConsumerPath<T>> consumerPaths)\n{\nConsumerPath<T> answer = null;\nList<ConsumerPath<T>> candidates = new ArrayList<>();\nfor (ConsumerPath<T> entry : consumerPaths) {\nif (matchRestMethod(requestMethod, entry.getRestrictMethod())) {\ncandidates.add(entry);\n}\n}\nIterator<ConsumerPath<T>> it = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\nif (answer == null && isOptionsMethod(requestMethod)) {\ncandidates.clear();\ncandidates.addAll(consumerPaths);\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\n}\nboolean noWildcards = candidates.stream().allMatch(p -> countWildcards(p.getConsumerPath()) == 0);\nif (noWildcards) {\nanswer = candidates.stream().filter(c -> matchPath(requestPath, c.getConsumerPath(), c.isMatchOnUriPrefix())).sorted(Comparator.comparingInt(o -> -1 * o.getConsumerPath().length())).findFirst().orElse(null);\n}\nif (answer != null) {\nreturn answer;\n}\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<?> consumer = it.next();\nif (!matchRestPath(requestPath, consumer.getConsumerPath(), true)) {\nit.remove();\n}\n}\nConsumerPath<T> best = null;\nMap<Integer, List<ConsumerPath<T>>> pathMap = new HashMap<>();\nif (candidates.size() > 1) {\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> entry = it.next();\nint wildcards = countWildcards(entry.getConsumerPath());\nif (wildcards > 0) {\nList<ConsumerPath<T>> consumerPathsLst = pathMap.computeIfAbsent(wildcards, key -> new ArrayList<>());\nconsumerPathsLst.add(entry);\n}\n}\nOptionalInt min = pathMap.keySet().stream().mapToInt(Integer::intValue).min();\nif (min.isPresent()) {\nList<ConsumerPath<T>> bestConsumerPaths = pathMap.get(min.getAsInt());\nif (bestConsumerPaths.size() > 1 && !canBeAmbiguous(requestMethod, requestMethod)) {\nString exceptionMsg = ""Ambiguous paths "" + bestConsumerPaths.stream().map(ConsumerPath::getConsumerPath).collect(Collectors.joining("","")) + "" for request path "" + requestPath;\nthrow new IllegalStateException(exceptionMsg);\n}\nbest = bestConsumerPaths.get(0);\n}\nif (best != null) {\nanswer = best;\n}\n}\nif (answer == null && candidates.size() == 1) {\nanswer = candidates.get(0);\n}\nreturn answer;\n}\n""}","{""function"": ""public static ConsumerPath<T> matchBestPath(String requestMethod, String requestPath, List<ConsumerPath<T>> consumerPaths)\n{\nConsumerPath<T> answer = null;\nList<ConsumerPath<T>> candidates = new ArrayList<>();\nfor (ConsumerPath<T> entry : consumerPaths) {\nif (matchRestMethod(requestMethod, entry.getRestrictMethod())) {\ncandidates.add(entry);\n}\n}\nIterator<ConsumerPath<T>> it = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\nif (answer == null && isOptionsMethod(requestMethod)) {\ncandidates.clear();\ncandidates.addAll(consumerPaths);\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> consumer = it.next();\nif (matchRestPath(requestPath, consumer.getConsumerPath(), false)) {\nanswer = consumer;\nbreak;\n}\n}\n}\nboolean noWildcards = candidates.stream().allMatch(p -> countWildcards(p.getConsumerPath()) == 0);\nif (noWildcards) {\nanswer = candidates.stream().filter(c -> matchPath(requestPath, c.getConsumerPath(), c.isMatchOnUriPrefix())).sorted(Comparator.comparingInt(o -> -1 * o.getConsumerPath().length())).findFirst().orElse(null);\n}\nif (answer != null) {\nreturn answer;\n}\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<?> consumer = it.next();\nif (!matchRestPath(requestPath, consumer.getConsumerPath(), true)) {\nit.remove();\n}\n}\nConsumerPath<T> best = null;\nMap<Integer, List<ConsumerPath<T>>> pathMap = new HashMap<>();\nif (candidates.size() > 1) {\nit = candidates.iterator();\nwhile (it.hasNext()) {\nConsumerPath<T> entry = it.next();\nint wildcards = countWildcards(entry.getConsumerPath());\nif (wildcards > 0) {\nList<ConsumerPath<T>> consumerPathsLst = pathMap.computeIfAbsent(wildcards, key -> new ArrayList<>());\nconsumerPathsLst.add(entry);\n}\n}\nOptionalInt min = pathMap.keySet().stream().mapToInt(Integer::intValue).min();\nif (min.isPresent()) {\nList<ConsumerPath<T>> bestConsumerPaths = pathMap.get(min.getAsInt());\nif (bestConsumerPaths.size() > 1 && !canBeAmbiguous(requestMethod, requestMethod)) {\nString exceptionMsg = ""Ambiguous paths "" + bestConsumerPaths.stream().map(ConsumerPath::getConsumerPath).collect(Collectors.joining("","")) + "" for request path "" + requestPath;\nthrow new IllegalStateException(exceptionMsg);\n}\nbest = bestConsumerPaths.get(0);\n}\nif (best != null) {\nanswer = best;\n}\n}\nif (answer == null && candidates.size() == 1) {\nanswer = candidates.get(0);\n}\nreturn answer;\n}\n""}","java:S3740
"
"{""function"": ""private void fetchAndPrepareRecordsForCamel(final Shard shard, AtomicInteger processedExchangeCount)\n{\nString shardIterator = null;\ntry {\nshardIterator = getShardIterator(shard);\n} catch (ExecutionException | InterruptedException e) {\nthrow new RuntimeException(e);\n}\nif (shardIterator == null) {\nprocessedExchangeCount.set(0);\n}\nGetRecordsRequest req = GetRecordsRequest.builder().shardIterator(shardIterator).limit(getEndpoint().getConfiguration().getMaxResultsPerRequest()).build();\nGetRecordsResponse result = null;\nif (getEndpoint().getConfiguration().isAsyncClient()) {\ntry {\nresult = getAsyncClient().getRecords(req).get();\n} catch (ExecutionException | InterruptedException e) {\nthrow new RuntimeException(e);\n}\n} else {\nresult = getClient().getRecords(req);\n}\ntry {\nQueue<Exchange> exchanges = createExchanges(result.records());\nprocessedExchangeCount.getAndSet(processBatch(CastUtils.cast(exchanges)));\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\nvar currentShardIterator = result.nextShardIterator();\nif (isShardClosed) {\nswitch(getEndpoint().getConfiguration().getShardClosed()) {\ncase ignore:\nLOG.warn(""The shard {} is in closed state"", currentShardIterator);\nbreak;\ncase silent:\nbreak;\ncase fail:\nLOG.info(""Shard Iterator reaches CLOSE status:{} {}"", getEndpoint().getConfiguration().getStreamName(), getEndpoint().getConfiguration().getShardId());\nthrow new IllegalStateException(new ReachedClosedStatusException(getEndpoint().getConfiguration().getStreamName(), shard.shardId()));\ndefault:\nthrow new IllegalArgumentException(""Unsupported shard closed strategy"");\n}\n}\n}\n""}","{""function"": ""private void fetchAndPrepareRecordsForCamel(final Shard shard, AtomicInteger processedExchangeCount)\n{\nString shardIterator = null;\ntry {\nshardIterator = getShardIterator(shard);\n} catch (ExecutionException | InterruptedException e) {\nthrow new RuntimeException(e);\n}\nif (shardIterator == null) {\nprocessedExchangeCount.set(0);\n}\nGetRecordsRequest req = GetRecordsRequest.builder().shardIterator(shardIterator).limit(getEndpoint().getConfiguration().getMaxResultsPerRequest()).build();\nGetRecordsResponse result = null;\nif (getEndpoint().getConfiguration().isAsyncClient()) {\ntry {\nresult = getAsyncClient().getRecords(req).get();\n} catch (ExecutionException | InterruptedException e) {\nthrow new RuntimeException(e);\n}\n} else {\nresult = getClient().getRecords(req);\n}\ntry {\nQueue<Exchange> exchanges = createExchanges(result.records());\nprocessedExchangeCount.getAndSet(processBatch(CastUtils.cast(exchanges)));\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\nvar currentShardIterator = result.nextShardIterator();\nif (isShardClosed) {\nswitch(getEndpoint().getConfiguration().getShardClosed()) {\ncase ignore:\nLOG.warn(""The shard {} is in closed state"", currentShardIterator);\nbreak;\ncase silent:\nbreak;\ncase fail:\nLOG.info(""Shard Iterator reaches CLOSE status:{} {}"", getEndpoint().getConfiguration().getStreamName(), getEndpoint().getConfiguration().getShardId());\nthrow new IllegalStateException(new ReachedClosedStatusException(getEndpoint().getConfiguration().getStreamName(), shard.shardId()));\ndefault:\nthrow new IllegalArgumentException(""Unsupported shard closed strategy"");\n}\n}\n}\n""}","java:S1130
"
"{""function"": ""public void process(Exchange exchange) throws InvalidPayloadException\n{\nString issueKey = exchange.getIn().getHeader(ISSUE_KEY, String.class);\nif (issueKey == null) {\nthrow new IllegalArgumentException(""Missing exchange input header named 'IssueKey', it should specify the issue key to attach a file."");\n}\nInputStream is = null;\nString name = null;\nFile file = null;\nObject body = exchange.getIn().getBody();\nif (body instanceof File) {\nfile = (File) body;\n} else {\nWrappedFile<?> wf = exchange.getIn().getBody(WrappedFile.class);\nif (wf != null && wf.getFile() instanceof File) {\nfile = (File) wf.getFile();\n}\n}\nif (file == null) {\nis = exchange.getIn().getMandatoryBody(InputStream.class);\nname = exchange.getIn().getHeader(Exchange.FILE_NAME, exchange.getMessage().getMessageId(), String.class);\n}\nJiraRestClient client = ((JiraEndpoint) getEndpoint()).getClient();\nIssueRestClient issueClient = client.getIssueClient();\nIssue issue = issueClient.getIssue(issueKey).claim();\nURI attachmentsUri = issue.getAttachmentsUri();\nif (file != null) {\nissueClient.addAttachments(attachmentsUri, file);\n} else {\nissueClient.addAttachment(attachmentsUri, is, name);\n}\n}\n""}","{""function"": ""public void process(Exchange exchange) throws InvalidPayloadException\n{\nString issueKey = exchange.getIn().getHeader(ISSUE_KEY, String.class);\nif (issueKey == null) {\nthrow new IllegalArgumentException(""Missing exchange input header named 'IssueKey', it should specify the issue key to attach a file."");\n}\nInputStream is = null;\nString name = null;\nFile file = null;\nObject body = exchange.getIn().getBody();\nif (body instanceof File) {\nfile = (File) body;\n} else {\nWrappedFile<?> wf = exchange.getIn().getBody(WrappedFile.class);\nif (wf != null && wf.getFile() instanceof File) {\nfile = (File) wf.getFile();\n}\n}\nif (file == null) {\nis = exchange.getIn().getMandatoryBody(InputStream.class);\nname = exchange.getIn().getHeader(Exchange.FILE_NAME, exchange.getMessage().getMessageId(), String.class);\n}\nJiraRestClient client = ((JiraEndpoint) getEndpoint()).getClient();\nIssueRestClient issueClient = client.getIssueClient();\nIssue issue = issueClient.getIssue(issueKey).claim();\nURI attachmentsUri = issue.getAttachmentsUri();\nif (file != null) {\nissueClient.addAttachments(attachmentsUri, file);\n} else {\nissueClient.addAttachment(attachmentsUri, is, name);\n}\n}\n""}","java:S3740
"
"{""function"": ""protected int poll() throws Exception\n{\nLookupEventsRequest.Builder eventsRequestBuilder = LookupEventsRequest.builder().maxResults(getEndpoint().getConfiguration().getMaxResults());\nList<LookupAttribute> attributes = new ArrayList<>();\nif (ObjectHelper.isNotEmpty(getEndpoint().getConfiguration().getEventSource())) {\nLookupAttribute eventSource = LookupAttribute.builder().attributeKey(LookupAttributeKey.EVENT_SOURCE).attributeValue(getEndpoint().getConfiguration().getEventSource()).build();\nattributes.add(eventSource);\n}\nif (!attributes.isEmpty()) {\neventsRequestBuilder.lookupAttributes(attributes);\n}\nif (lastTime != null) {\neventsRequestBuilder.startTime(lastTime.plusMillis(1000));\n}\nLookupEventsResponse response = getClient().lookupEvents(eventsRequestBuilder.build());\nif (!response.events().isEmpty()) {\nlastTime = response.events().get(0).eventTime();\n}\nQueue<Exchange> exchanges = createExchanges(response.events());\nreturn processBatch(CastUtils.cast(exchanges));\n}\n""}","{""function"": ""protected int poll() throws Exception\n{\nLookupEventsRequest.Builder eventsRequestBuilder = LookupEventsRequest.builder().maxResults(getEndpoint().getConfiguration().getMaxResults());\nList<LookupAttribute> attributes = new ArrayList<>();\nif (ObjectHelper.isNotEmpty(getEndpoint().getConfiguration().getEventSource())) {\nLookupAttribute eventSource = LookupAttribute.builder().attributeKey(LookupAttributeKey.EVENT_SOURCE).attributeValue(getEndpoint().getConfiguration().getEventSource()).build();\nattributes.add(eventSource);\n}\nif (!attributes.isEmpty()) {\neventsRequestBuilder.lookupAttributes(attributes);\n}\nif (lastTime != null) {\neventsRequestBuilder.startTime(lastTime.plusMillis(1000));\n}\nLookupEventsResponse response = getClient().lookupEvents(eventsRequestBuilder.build());\nif (!response.events().isEmpty()) {\nlastTime = response.events().get(0).eventTime();\n}\nQueue<Exchange> exchanges = createExchanges(response.events());\nreturn processBatch(CastUtils.cast(exchanges));\n}\n""}","java:S2293
"
"{""function"": ""protected void updateKnownDependencies() throws Exception\n{\nCollection<Path> allJsonFiles = new TreeSet<>();\nFile path = new File(catalogDir, ""src/generated/resources/org/apache/camel/catalog/components"");\nfor (File p : path.listFiles()) {\nString f = p.getName();\nif (f.endsWith(PackageHelper.JSON_SUFIX)) {\nallJsonFiles.add(p.toPath());\n}\n}\nfor (Path p : allJsonFiles) {\nvar m = JsonMapper.generateModel(p);\nif (m != null) {\nallModels.put(p, m);\n}\n}\nList<String> lines = new ArrayList<>();\nfor (BaseModel<?> model : allModels.values()) {\nString fqn = model.getJavaType();\nif (model instanceof ArtifactModel) {\nString aid = ((ArtifactModel<?>) model).getArtifactId();\nif (aid.startsWith(""camel-"")) {\naid = aid.substring(6);\n}\nString line = fqn + ""=camel:"" + aid;\nlines.add(line);\n}\n}\nlines = lines.stream().distinct().collect(Collectors.toList());\nCollections.sort(lines);\ntry (InputStream is = getClass().getClassLoader().getResourceAsStream(""license-header.txt"")) {\nthis.licenseHeader = loadText(is);\n} catch (Exception e) {\nthrow new MojoFailureException(""Error loading license-header.txt file"", e);\n}\nString source = String.join(""\n"", lines) + ""\n"";\nwriteSourceIfChanged(source, ""resources"", ""camel-component-known-dependencies.properties"", genDir);\n}\n""}","{""function"": ""protected void updateKnownDependencies() throws Exception\n{\nCollection<Path> allJsonFiles = new TreeSet<>();\nFile path = new File(catalogDir, ""src/generated/resources/org/apache/camel/catalog/components"");\nfor (File p : path.listFiles()) {\nString f = p.getName();\nif (f.endsWith(PackageHelper.JSON_SUFIX)) {\nallJsonFiles.add(p.toPath());\n}\n}\nfor (Path p : allJsonFiles) {\nvar m = JsonMapper.generateModel(p);\nif (m != null) {\nallModels.put(p, m);\n}\n}\nList<String> lines = new ArrayList<>();\nfor (BaseModel<?> model : allModels.values()) {\nString fqn = model.getJavaType();\nif (model instanceof ArtifactModel) {\nString aid = ((ArtifactModel<?>) model).getArtifactId();\nif (aid.startsWith(""camel-"")) {\naid = aid.substring(6);\n}\nString line = fqn + ""=camel:"" + aid;\nlines.add(line);\n}\n}\nlines = lines.stream().distinct().collect(Collectors.toList());\nCollections.sort(lines);\ntry (InputStream is = getClass().getClassLoader().getResourceAsStream(""license-header.txt"")) {\nthis.licenseHeader = loadText(is);\n} catch (Exception e) {\nthrow new MojoFailureException(""Error loading license-header.txt file"", e);\n}\nString source = String.join(""\n"", lines) + ""\n"";\nwriteSourceIfChanged(source, ""resources"", ""camel-component-known-dependencies.properties"", genDir);\n}\n""}","java:S3740
"
"{""function"": ""public void process(Exchange exchange) throws InvalidPayloadException\n{\nString issueKey = exchange.getIn().getHeader(ISSUE_KEY, String.class);\nif (issueKey == null) {\nthrow new IllegalArgumentException(""Missing exchange input header named 'IssueKey', it should specify the issue key to attach a file."");\n}\nInputStream is = null;\nString name = null;\nFile file = null;\nObject body = exchange.getIn().getBody();\nif (body instanceof File) {\nfile = (File) body;\n} else {\nWrappedFile<?> wf = exchange.getIn().getBody(WrappedFile.class);\nif (wf != null && wf.getFile() instanceof File) {\nfile = (File) wf.getFile();\n}\n}\nif (file == null) {\nis = exchange.getIn().getMandatoryBody(InputStream.class);\nname = exchange.getIn().getHeader(Exchange.FILE_NAME, exchange.getMessage().getMessageId(), String.class);\n}\nJiraRestClient client = ((JiraEndpoint) getEndpoint()).getClient();\nIssueRestClient issueClient = client.getIssueClient();\nIssue issue = issueClient.getIssue(issueKey).claim();\nURI attachmentsUri = issue.getAttachmentsUri();\nif (file != null) {\nissueClient.addAttachments(attachmentsUri, file);\n} else {\nissueClient.addAttachment(attachmentsUri, is, name);\n}\n}\n""}","{""function"": ""public void process(Exchange exchange) throws InvalidPayloadException\n{\nString issueKey = exchange.getIn().getHeader(ISSUE_KEY, String.class);\nif (issueKey == null) {\nthrow new IllegalArgumentException(""Missing exchange input header named 'IssueKey', it should specify the issue key to attach a file."");\n}\nInputStream is = null;\nString name = null;\nFile file = null;\nObject body = exchange.getIn().getBody();\nif (body instanceof File) {\nfile = (File) body;\n} else {\nWrappedFile<?> wf = exchange.getIn().getBody(WrappedFile.class);\nif (wf != null && wf.getFile() instanceof File) {\nfile = (File) wf.getFile();\n}\n}\nif (file == null) {\nis = exchange.getIn().getMandatoryBody(InputStream.class);\nname = exchange.getIn().getHeader(Exchange.FILE_NAME, exchange.getMessage().getMessageId(), String.class);\n}\nJiraRestClient client = ((JiraEndpoint) getEndpoint()).getClient();\nIssueRestClient issueClient = client.getIssueClient();\nIssue issue = issueClient.getIssue(issueKey).claim();\nURI attachmentsUri = issue.getAttachmentsUri();\nif (file != null) {\nissueClient.addAttachments(attachmentsUri, file);\n} else {\nissueClient.addAttachment(attachmentsUri, is, name);\n}\n}\n""}","java:S6201
"
"{""function"": ""private JsonObject asJSonNode(EipModel model)\n{\nJsonObject answer = new JsonObject();\nJsonObject jo = new JsonObject();\nanswer.put(model.getName(), jo);\nfor (Map.Entry<String, Object> entry : model.getMetadata().entrySet()) {\nString key = entry.getKey();\nboolean skip = key.equals(""customId"");\nif (skip) {\ncontinue;\n}\nObject value = entry.getValue();\nif (value != null) {\nif (value instanceof Collection<?>) {\nCollection<?> col = (Collection<?>) value;\nList<Object> list = new ArrayList<>();\nfor (Object v : col) {\nObject r = v;\nif (r instanceof EipModel) {\nEipNode en = asNode((EipModel) r);\nvalue = en.asJsonObject();\nJsonObject wrap = new JsonObject();\nwrap.put(en.getName(), value);\nr = wrap;\n}\nlist.add(r);\n}\nif (""_output"".equals(key)) {\nkey = ""steps"";\n}\nif (jo.containsKey(""from"")) {\njo = jo.getMap(""from"");\n}\njo.put(key, list);\n} else {\nif (value instanceof EipModel) {\nEipNode r = asNode((EipModel) value);\nvalue = r.asJsonObject();\njo.put(r.getName(), value);\n} else {\njo.put(key, value);\n}\n}\n}\n}\nreturn answer;\n}\n""}","{""function"": ""private JsonObject asJSonNode(EipModel model)\n{\nJsonObject answer = new JsonObject();\nJsonObject jo = new JsonObject();\nanswer.put(model.getName(), jo);\nfor (Map.Entry<String, Object> entry : model.getMetadata().entrySet()) {\nString key = entry.getKey();\nboolean skip = key.equals(""customId"");\nif (skip) {\ncontinue;\n}\nObject value = entry.getValue();\nif (value != null) {\nif (value instanceof Collection<?>) {\nCollection<?> col = (Collection<?>) value;\nList<Object> list = new ArrayList<>();\nfor (Object v : col) {\nObject r = v;\nif (r instanceof EipModel) {\nEipNode en = asNode((EipModel) r);\nvalue = en.asJsonObject();\nJsonObject wrap = new JsonObject();\nwrap.put(en.getName(), value);\nr = wrap;\n}\nlist.add(r);\n}\nif (""_output"".equals(key)) {\nkey = ""steps"";\n}\nif (jo.containsKey(""from"")) {\njo = jo.getMap(""from"");\n}\njo.put(key, list);\n} else {\nif (value instanceof EipModel) {\nEipNode r = asNode((EipModel) value);\nvalue = r.asJsonObject();\njo.put(r.getName(), value);\n} else {\njo.put(key, value);\n}\n}\n}\n}\nreturn answer;\n}\n""}","java:S3740
"
"{""function"": ""protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception\n{\nCxfRsEndpoint answer;\nObject value = parameters.remove(""setDefaultBus"");\nif (value != null) {\nLOG.warn(""The option setDefaultBus is @deprecated, use name defaultBus instead"");\nif (!parameters.containsKey(""defaultBus"")) {\nparameters.put(""defaultBus"", value);\n}\n}\nif (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {\nString beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length());\nif (beanId.startsWith(""//"")) {\nbeanId = beanId.substring(2);\n}\nAbstractJAXRSFactoryBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, AbstractJAXRSFactoryBean.class);\nCxfRsEndpointFactoryBean factory = null;\nif (bean.getClass().getName().contains(""blueprint"")) {\nClass<CxfRsEndpointFactoryBean> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(""org.apache.camel.component.cxf.jaxrs.blueprint.CxfRsBlueprintEndpointFactoryBean"", CxfRsEndpointFactoryBean.class);\nfactory = getCamelContext().getInjector().newInstance(clazz);\n} else {\ntry {\nClass<CxfRsEndpointFactoryBean> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(""org.apache.camel.component.cxf.spring.jaxrs.SpringCxfRsEndpointFactoryBean"", CxfRsEndpointFactoryBean.class);\nfactory = getCamelContext().getInjector().newInstance(clazz);\n} catch (Exception ex) {\nfactory = new DefaultCxfRsEndpointFactoryBean();\n}\n}\nanswer = factory.createEndpoint(this, remaining, bean);\nif (bean.getProperties() != null) {\nMap<String, Object> copy = new HashMap<>(bean.getProperties());\nsetProperties(answer, copy);\n}\nanswer.setBeanId(beanId);\n} else {\nanswer = new CxfRsEndpoint(remaining, this);\n}\nString resourceClass = getAndRemoveParameter(parameters, ""resourceClass"", String.class);\nif (resourceClass != null) {\nClass<?> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(resourceClass);\nanswer.addResourceClass(clazz);\n}\nString resourceClasses = getAndRemoveParameter(parameters, ""resourceClasses"", String.class);\nIterator<?> it = ObjectHelper.createIterator(resourceClasses);\nwhile (it.hasNext()) {\nString name = (String) it.next();\nClass<?> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(name);\nanswer.addResourceClass(clazz);\n}\nsetProperties(answer, parameters);\nMap<String, String> params = CastUtils.cast(parameters);\nanswer.setParameters(params);\nsetEndpointHeaderFilterStrategy(answer);\nif (answer.getSslContextParameters() == null) {\nanswer.setSslContextParameters(retrieveGlobalSslContextParameters());\n}\nreturn answer;\n}\n""}","{""function"": ""protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception\n{\nCxfRsEndpoint answer;\nObject value = parameters.remove(""setDefaultBus"");\nif (value != null) {\nLOG.warn(""The option setDefaultBus is @deprecated, use name defaultBus instead"");\nif (!parameters.containsKey(""defaultBus"")) {\nparameters.put(""defaultBus"", value);\n}\n}\nif (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {\nString beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length());\nif (beanId.startsWith(""//"")) {\nbeanId = beanId.substring(2);\n}\nAbstractJAXRSFactoryBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, AbstractJAXRSFactoryBean.class);\nCxfRsEndpointFactoryBean factory = null;\nif (bean.getClass().getName().contains(""blueprint"")) {\nClass<CxfRsEndpointFactoryBean> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(""org.apache.camel.component.cxf.jaxrs.blueprint.CxfRsBlueprintEndpointFactoryBean"", CxfRsEndpointFactoryBean.class);\nfactory = getCamelContext().getInjector().newInstance(clazz);\n} else {\ntry {\nClass<CxfRsEndpointFactoryBean> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(""org.apache.camel.component.cxf.spring.jaxrs.SpringCxfRsEndpointFactoryBean"", CxfRsEndpointFactoryBean.class);\nfactory = getCamelContext().getInjector().newInstance(clazz);\n} catch (Exception ex) {\nfactory = new DefaultCxfRsEndpointFactoryBean();\n}\n}\nanswer = factory.createEndpoint(this, remaining, bean);\nif (bean.getProperties() != null) {\nMap<String, Object> copy = new HashMap<>(bean.getProperties());\nsetProperties(answer, copy);\n}\nanswer.setBeanId(beanId);\n} else {\nanswer = new CxfRsEndpoint(remaining, this);\n}\nString resourceClass = getAndRemoveParameter(parameters, ""resourceClass"", String.class);\nif (resourceClass != null) {\nClass<?> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(resourceClass);\nanswer.addResourceClass(clazz);\n}\nString resourceClasses = getAndRemoveParameter(parameters, ""resourceClasses"", String.class);\nIterator<?> it = ObjectHelper.createIterator(resourceClasses);\nwhile (it.hasNext()) {\nString name = (String) it.next();\nClass<?> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(name);\nanswer.addResourceClass(clazz);\n}\nsetProperties(answer, parameters);\nMap<String, String> params = CastUtils.cast(parameters);\nanswer.setParameters(params);\nsetEndpointHeaderFilterStrategy(answer);\nif (answer.getSslContextParameters() == null) {\nanswer.setSslContextParameters(retrieveGlobalSslContextParameters());\n}\nreturn answer;\n}\n""}","java:S1181
"
"{""function"": ""private static void setMetadata(EipModel model, String name, Object value)\n{\nboolean array = isArray(model, name);\nif (array) {\nList<Object> list = (List<Object>) model.getMetadata().get(name);\nif (list == null) {\nlist = new ArrayList<>();\nmodel.getMetadata().put(name, list);\n}\nlist.add(value);\n} else {\nmodel.getMetadata().put(name, value);\n}\n}\n""}","{""function"": ""private static void setMetadata(EipModel model, String name, Object value)\n{\nboolean array = isArray(model, name);\nif (array) {\nList<Object> list = (List<Object>) model.getMetadata().get(name);\nif (list == null) {\nlist = new ArrayList<>();\nmodel.getMetadata().put(name, list);\n}\nlist.add(value);\n} else {\nmodel.getMetadata().put(name, value);\n}\n}\n""}","java:S3740
"
"{""function"": ""public int processBatch(Queue<Object> exchanges) throws Exception\n{\nint processedExchanges = 0;\nwhile (!exchanges.isEmpty()) {\nfinal Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());\nAsyncCallback cb = defaultConsumerCallback(exchange, true);\ngetAsyncProcessor().process(exchange, cb);\nprocessedExchanges++;\n}\nreturn processedExchanges;\n}\n""}","{""function"": ""public int processBatch(Queue<Object> exchanges) throws Exception\n{\nint processedExchanges = 0;\nwhile (!exchanges.isEmpty()) {\nfinal Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll());\nAsyncCallback cb = defaultConsumerCallback(exchange, true);\ngetAsyncProcessor().process(exchange, cb);\nprocessedExchanges++;\n}\nreturn processedExchanges;\n}\n""}","java:S3776
"
"{""function"": ""protected SalesforceException createRestException(Response response, InputStream responseContent)\n{\nfinal int statusCode = response.getStatus();\nString reason = response.getReason();\nif (reason == null || reason.isEmpty()) {\nreason = HttpStatus.getMessage(statusCode);\n}\ntry {\nif (responseContent != null && responseContent.available() > 0) {\nfinal List<String> choices;\nif (statusCode == HttpStatus.MULTIPLE_CHOICES_300) {\nchoices = objectMapper.readValue(responseContent, TypeReferences.STRING_LIST_TYPE);\nreturn new SalesforceMultipleChoicesException(reason, statusCode, choices);\n} else {\nList<RestError> restErrors = null;\nString body = null;\ntry {\nrestErrors = readErrorsFrom(responseContent, objectMapper);\n} catch (IOException ignored) {\n}\ntry {\nresponseContent.reset();\nbody = IOUtils.toString(responseContent, StandardCharsets.UTF_8);\nresponseContent.reset();\n} catch (Exception t) {\nlog.warn(""Unable to reset HTTP response content input stream."");\n}\nif (statusCode == HttpStatus.NOT_FOUND_404) {\nreturn new NoSuchSObjectException(restErrors);\n}\nreturn new SalesforceException(restErrors, statusCode, ""Unexpected error: "" + reason + "". See exception `errors` property for detail. "" + body, responseContent);\n}\n}\n} catch (IOException | RuntimeException e) {\nString msg = ""Unexpected Error parsing error response body + ["" + responseContent + ""] : "" + e.getMessage();\nlog.warn(msg, e);\n}\nreturn new SalesforceException(""Unexpected error: "" + reason + "", with content: "" + responseContent, statusCode);\n}\n""}","{""function"": ""protected SalesforceException createRestException(Response response, InputStream responseContent)\n{\nfinal int statusCode = response.getStatus();\nString reason = response.getReason();\nif (reason == null || reason.isEmpty()) {\nreason = HttpStatus.getMessage(statusCode);\n}\ntry {\nif (responseContent != null && responseContent.available() > 0) {\nfinal List<String> choices;\nif (statusCode == HttpStatus.MULTIPLE_CHOICES_300) {\nchoices = objectMapper.readValue(responseContent, TypeReferences.STRING_LIST_TYPE);\nreturn new SalesforceMultipleChoicesException(reason, statusCode, choices);\n} else {\nList<RestError> restErrors = null;\nString body = null;\ntry {\nrestErrors = readErrorsFrom(responseContent, objectMapper);\n} catch (IOException ignored) {\n}\ntry {\nresponseContent.reset();\nbody = IOUtils.toString(responseContent, StandardCharsets.UTF_8);\nresponseContent.reset();\n} catch (Exception t) {\nlog.warn(""Unable to reset HTTP response content input stream."");\n}\nif (statusCode == HttpStatus.NOT_FOUND_404) {\nreturn new NoSuchSObjectException(restErrors);\n}\nreturn new SalesforceException(restErrors, statusCode, ""Unexpected error: "" + reason + "". See exception `errors` property for detail. "" + body, responseContent);\n}\n}\n} catch (IOException | RuntimeException e) {\nString msg = ""Unexpected Error parsing error response body + ["" + responseContent + ""] : "" + e.getMessage();\nlog.warn(msg, e);\n}\nreturn new SalesforceException(""Unexpected error: "" + reason + "", with content: "" + responseContent, statusCode);\n}\n""}","java:S1181
"
"{""function"": ""public void onDone(Exchange exchange)\n{\ntry {\nif (exchange.getException() != null || exchange.isRollbackOnly()) {\nif (exchange.getException() instanceof KafkaException) {\nLOG.warn(""Catch {} and will close kafka producer with transaction {} "", exchange.getException(), transactionId);\nkafkaProducer.close();\n} else {\nLOG.warn(""Abort kafka transaction {} with exchange {}"", transactionId, exchange.getExchangeId());\nkafkaProducer.abortTransaction();\n}\n} else {\nLOG.debug(""Commit kafka transaction {} with exchange {}"", transactionId, exchange.getExchangeId());\nkafkaProducer.commitTransaction();\n}\n} catch (KafkaException e) {\nexchange.setException(e);\n} catch (Exception e) {\nexchange.setException(e);\nLOG.warn(""Abort kafka transaction {} with exchange {} due to {} "", transactionId, exchange.getExchangeId(), e.getMessage(), e);\nkafkaProducer.abortTransaction();\n} finally {\nexchange.getUnitOfWork().endTransactedBy(transactionId);\n}\n}\n""}","{""function"": ""public void onDone(Exchange exchange)\n{\ntry {\nif (exchange.getException() != null || exchange.isRollbackOnly()) {\nif (exchange.getException() instanceof KafkaException) {\nLOG.warn(""Catch {} and will close kafka producer with transaction {} "", exchange.getException(), transactionId);\nkafkaProducer.close();\n} else {\nLOG.warn(""Abort kafka transaction {} with exchange {}"", transactionId, exchange.getExchangeId());\nkafkaProducer.abortTransaction();\n}\n} else {\nLOG.debug(""Commit kafka transaction {} with exchange {}"", transactionId, exchange.getExchangeId());\nkafkaProducer.commitTransaction();\n}\n} catch (KafkaException e) {\nexchange.setException(e);\n} catch (Exception e) {\nexchange.setException(e);\nLOG.warn(""Abort kafka transaction {} with exchange {} due to {} "", transactionId, exchange.getExchangeId(), e.getMessage(), e);\nkafkaProducer.abortTransaction();\n} finally {\nexchange.getUnitOfWork().endTransactedBy(transactionId);\n}\n}\n""}","java:S1181
"
"{""function"": ""public static String extractJavaDoc(String sourceCode, MethodSource<?> ms) throws IOException\n{\nObject internal = ms.getJavaDoc().getInternal();\nif (internal instanceof ASTNode) {\nint pos = ((ASTNode) internal).getStartPosition();\nint len = ((ASTNode) internal).getLength();\nif (pos > 0 && len > 0) {\nString doc = sourceCode.substring(pos, pos + len);\nLineNumberReader ln = new LineNumberReader(new StringReader(doc));\nString line;\nStringBuilder sb = new StringBuilder();\nwhile ((line = ln.readLine()) != null) {\nline = line.trim();\nif (line.startsWith(""/**"") || line.startsWith(""*/"")) {\ncontinue;\n}\nif (line.startsWith(""*"")) {\nline = line.substring(1).trim();\n}\nsb.append(line);\nsb.append(""\n"");\n}\ndoc = sb.toString();\nreturn doc;\n}\n}\nreturn null;\n}\n""}","{""function"": ""public static String extractJavaDoc(String sourceCode, MethodSource<?> ms) throws IOException\n{\nObject internal = ms.getJavaDoc().getInternal();\nif (internal instanceof ASTNode) {\nint pos = ((ASTNode) internal).getStartPosition();\nint len = ((ASTNode) internal).getLength();\nif (pos > 0 && len > 0) {\nString doc = sourceCode.substring(pos, pos + len);\nLineNumberReader ln = new LineNumberReader(new StringReader(doc));\nString line;\nStringBuilder sb = new StringBuilder();\nwhile ((line = ln.readLine()) != null) {\nline = line.trim();\nif (line.startsWith(""/**"") || line.startsWith(""*/"")) {\ncontinue;\n}\nif (line.startsWith(""*"")) {\nline = line.substring(1).trim();\n}\nsb.append(line);\nsb.append(""\n"");\n}\ndoc = sb.toString();\nreturn doc;\n}\n}\nreturn null;\n}\n""}","java:S3740
"
"{""function"": ""protected void findClassProperties(ComponentModel componentModel, Class<?> classElement, Set<String> excludes, String prefix, String nestedTypeName, String nestedFieldName, boolean componentOption)\n{\nfinal Class<?> orgClassElement = classElement;\nexcludes = new HashSet<>(excludes);\nwhile (true) {\nString apiName = null;\nboolean apiOption = false;\nApiParams apiParams = null;\nif (componentModel.isApi()) {\napiParams = classElement.getAnnotation(ApiParams.class);\nif (apiParams != null) {\napiName = apiParams.apiName();\napiOption = !Strings.isNullOrEmpty(apiName);\n}\n}\ncollectExcludes(classElement, excludes);\nMetadata metadata;\nfor (final Field fieldElement : classElement.getDeclaredFields()) {\nmetadata = fieldElement.getAnnotation(Metadata.class);\nif (metadata != null && metadata.skip()) {\ncontinue;\n}\nboolean deprecated = fieldElement.getAnnotation(Deprecated.class) != null;\nString deprecationNote = null;\nif (metadata != null) {\ndeprecationNote = metadata.deprecationNote();\n}\nBoolean secret = metadata != null ? metadata.secret() : null;\nif (collectUriPathProperties(componentModel, classElement, excludes, prefix, nestedTypeName, nestedFieldName, componentOption, orgClassElement, metadata, fieldElement, deprecated, deprecationNote, secret)) {\ncontinue;\n}\nString fieldName;\nUriParam param = fieldElement.getAnnotation(UriParam.class);\nif (param != null) {\nfieldName = fieldElement.getName();\nString name = prefix + (Strings.isNullOrEmpty(param.name()) ? fieldName : param.name());\nif (excludes.contains(name)) {\ncontinue;\n}\nString paramOptionalPrefix = param.optionalPrefix();\nString paramPrefix = param.prefix();\nboolean multiValue = param.multiValue();\nObject defaultValue = param.defaultValue();\nif (isNullOrEmpty(defaultValue) && metadata != null) {\ndefaultValue = metadata.defaultValue();\n}\nString defaultValueNote = param.defaultValueNote();\nboolean required = metadata != null && metadata.required();\nString label = param.label();\nif (Strings.isNullOrEmpty(label) && metadata != null) {\nlabel = metadata.label();\n}\nString displayName = param.displayName();\nif (Strings.isNullOrEmpty(displayName)) {\ndisplayName = metadata != null ? metadata.displayName() : null;\n}\nif (Strings.isNullOrEmpty(displayName)) {\ndisplayName = Strings.asTitle(name);\n}\nClass<?> fieldTypeElement = fieldElement.getType();\nString fieldTypeName = getTypeName(GenericsUtil.resolveType(orgClassElement, fieldElement));\nUriParams fieldParams = fieldTypeElement.getAnnotation(UriParams.class);\nif (fieldParams != null) {\nString nestedPrefix = prefix;\nString extraPrefix = fieldParams.prefix();\nif (!Strings.isNullOrEmpty(extraPrefix)) {\nnestedPrefix += extraPrefix;\n}\nnestedTypeName = fieldTypeName;\nnestedFieldName = fieldElement.getName();\nfindClassProperties(componentModel, fieldTypeElement, excludes, nestedPrefix, nestedTypeName, nestedFieldName, componentOption);\nnestedTypeName = null;\nnestedFieldName = null;\n} else {\nApiParam apiParam = fieldElement.getAnnotation(ApiParam.class);\ncollectNonNestedField(componentModel, classElement, nestedTypeName, nestedFieldName, componentOption, apiName, apiOption, apiParams, metadata, fieldElement, deprecated, deprecationNote, secret, fieldName, param, apiParam, name, paramOptionalPrefix, paramPrefix, multiValue, defaultValue, defaultValueNote, required, label, displayName, fieldTypeElement, fieldTypeName);\n}\n}\n}\nif (apiOption) {\nbreak;\n}\nClass<?> superclass = classElement.getSuperclass();\nif (superclass != null) {\nclassElement = superclass;\n} else {\nbreak;\n}\n}\n}\n""}","{""function"": ""protected void findClassProperties(ComponentModel componentModel, Class<?> classElement, Set<String> excludes, String prefix, String nestedTypeName, String nestedFieldName, boolean componentOption)\n{\nfinal Class<?> orgClassElement = classElement;\nexcludes = new HashSet<>(excludes);\nwhile (true) {\nString apiName = null;\nboolean apiOption = false;\nApiParams apiParams = null;\nif (componentModel.isApi()) {\napiParams = classElement.getAnnotation(ApiParams.class);\nif (apiParams != null) {\napiName = apiParams.apiName();\napiOption = !Strings.isNullOrEmpty(apiName);\n}\n}\ncollectExcludes(classElement, excludes);\nMetadata metadata;\nfor (final Field fieldElement : classElement.getDeclaredFields()) {\nmetadata = fieldElement.getAnnotation(Metadata.class);\nif (metadata != null && metadata.skip()) {\ncontinue;\n}\nboolean deprecated = fieldElement.getAnnotation(Deprecated.class) != null;\nString deprecationNote = null;\nif (metadata != null) {\ndeprecationNote = metadata.deprecationNote();\n}\nBoolean secret = metadata != null ? metadata.secret() : null;\nif (collectUriPathProperties(componentModel, classElement, excludes, prefix, nestedTypeName, nestedFieldName, componentOption, orgClassElement, metadata, fieldElement, deprecated, deprecationNote, secret)) {\ncontinue;\n}\nString fieldName;\nUriParam param = fieldElement.getAnnotation(UriParam.class);\nif (param != null) {\nfieldName = fieldElement.getName();\nString name = prefix + (Strings.isNullOrEmpty(param.name()) ? fieldName : param.name());\nif (excludes.contains(name)) {\ncontinue;\n}\nString paramOptionalPrefix = param.optionalPrefix();\nString paramPrefix = param.prefix();\nboolean multiValue = param.multiValue();\nObject defaultValue = param.defaultValue();\nif (isNullOrEmpty(defaultValue) && metadata != null) {\ndefaultValue = metadata.defaultValue();\n}\nString defaultValueNote = param.defaultValueNote();\nboolean required = metadata != null && metadata.required();\nString label = param.label();\nif (Strings.isNullOrEmpty(label) && metadata != null) {\nlabel = metadata.label();\n}\nString displayName = param.displayName();\nif (Strings.isNullOrEmpty(displayName)) {\ndisplayName = metadata != null ? metadata.displayName() : null;\n}\nif (Strings.isNullOrEmpty(displayName)) {\ndisplayName = Strings.asTitle(name);\n}\nClass<?> fieldTypeElement = fieldElement.getType();\nString fieldTypeName = getTypeName(GenericsUtil.resolveType(orgClassElement, fieldElement));\nUriParams fieldParams = fieldTypeElement.getAnnotation(UriParams.class);\nif (fieldParams != null) {\nString nestedPrefix = prefix;\nString extraPrefix = fieldParams.prefix();\nif (!Strings.isNullOrEmpty(extraPrefix)) {\nnestedPrefix += extraPrefix;\n}\nnestedTypeName = fieldTypeName;\nnestedFieldName = fieldElement.getName();\nfindClassProperties(componentModel, fieldTypeElement, excludes, nestedPrefix, nestedTypeName, nestedFieldName, componentOption);\nnestedTypeName = null;\nnestedFieldName = null;\n} else {\nApiParam apiParam = fieldElement.getAnnotation(ApiParam.class);\ncollectNonNestedField(componentModel, classElement, nestedTypeName, nestedFieldName, componentOption, apiName, apiOption, apiParams, metadata, fieldElement, deprecated, deprecationNote, secret, fieldName, param, apiParam, name, paramOptionalPrefix, paramPrefix, multiValue, defaultValue, defaultValueNote, required, label, displayName, fieldTypeElement, fieldTypeName);\n}\n}\n}\nif (apiOption) {\nbreak;\n}\nClass<?> superclass = classElement.getSuperclass();\nif (superclass != null) {\nclassElement = superclass;\n} else {\nbreak;\n}\n}\n}\n""}","java:S107
"
"{""function"": ""protected void findClassProperties(ComponentModel componentModel, Class<?> classElement, Set<String> excludes, String prefix, String nestedTypeName, String nestedFieldName, boolean componentOption)\n{\nfinal Class<?> orgClassElement = classElement;\nexcludes = new HashSet<>(excludes);\nwhile (true) {\nString apiName = null;\nboolean apiOption = false;\nApiParams apiParams = null;\nif (componentModel.isApi()) {\napiParams = classElement.getAnnotation(ApiParams.class);\nif (apiParams != null) {\napiName = apiParams.apiName();\napiOption = !Strings.isNullOrEmpty(apiName);\n}\n}\ncollectExcludes(classElement, excludes);\nMetadata metadata;\nfor (final Field fieldElement : classElement.getDeclaredFields()) {\nmetadata = fieldElement.getAnnotation(Metadata.class);\nif (metadata != null && metadata.skip()) {\ncontinue;\n}\nboolean deprecated = fieldElement.getAnnotation(Deprecated.class) != null;\nString deprecationNote = null;\nif (metadata != null) {\ndeprecationNote = metadata.deprecationNote();\n}\nBoolean secret = metadata != null ? metadata.secret() : null;\nif (collectUriPathProperties(componentModel, classElement, excludes, prefix, nestedTypeName, nestedFieldName, componentOption, orgClassElement, metadata, fieldElement, deprecated, deprecationNote, secret)) {\ncontinue;\n}\nString fieldName;\nUriParam param = fieldElement.getAnnotation(UriParam.class);\nif (param != null) {\nfieldName = fieldElement.getName();\nString name = prefix + (Strings.isNullOrEmpty(param.name()) ? fieldName : param.name());\nif (excludes.contains(name)) {\ncontinue;\n}\nString paramOptionalPrefix = param.optionalPrefix();\nString paramPrefix = param.prefix();\nboolean multiValue = param.multiValue();\nObject defaultValue = param.defaultValue();\nif (isNullOrEmpty(defaultValue) && metadata != null) {\ndefaultValue = metadata.defaultValue();\n}\nString defaultValueNote = param.defaultValueNote();\nboolean required = metadata != null && metadata.required();\nString label = param.label();\nif (Strings.isNullOrEmpty(label) && metadata != null) {\nlabel = metadata.label();\n}\nString displayName = param.displayName();\nif (Strings.isNullOrEmpty(displayName)) {\ndisplayName = metadata != null ? metadata.displayName() : null;\n}\nif (Strings.isNullOrEmpty(displayName)) {\ndisplayName = Strings.asTitle(name);\n}\nClass<?> fieldTypeElement = fieldElement.getType();\nString fieldTypeName = getTypeName(GenericsUtil.resolveType(orgClassElement, fieldElement));\nUriParams fieldParams = fieldTypeElement.getAnnotation(UriParams.class);\nif (fieldParams != null) {\nString nestedPrefix = prefix;\nString extraPrefix = fieldParams.prefix();\nif (!Strings.isNullOrEmpty(extraPrefix)) {\nnestedPrefix += extraPrefix;\n}\nnestedTypeName = fieldTypeName;\nnestedFieldName = fieldElement.getName();\nfindClassProperties(componentModel, fieldTypeElement, excludes, nestedPrefix, nestedTypeName, nestedFieldName, componentOption);\nnestedTypeName = null;\nnestedFieldName = null;\n} else {\nApiParam apiParam = fieldElement.getAnnotation(ApiParam.class);\ncollectNonNestedField(componentModel, classElement, nestedTypeName, nestedFieldName, componentOption, apiName, apiOption, apiParams, metadata, fieldElement, deprecated, deprecationNote, secret, fieldName, param, apiParam, name, paramOptionalPrefix, paramPrefix, multiValue, defaultValue, defaultValueNote, required, label, displayName, fieldTypeElement, fieldTypeName);\n}\n}\n}\nif (apiOption) {\nbreak;\n}\nClass<?> superclass = classElement.getSuperclass();\nif (superclass != null) {\nclassElement = superclass;\n} else {\nbreak;\n}\n}\n}\n""}","{""function"": ""protected void findClassProperties(ComponentModel componentModel, Class<?> classElement, Set<String> excludes, String prefix, String nestedTypeName, String nestedFieldName, boolean componentOption)\n{\nfinal Class<?> orgClassElement = classElement;\nexcludes = new HashSet<>(excludes);\nwhile (true) {\nString apiName = null;\nboolean apiOption = false;\nApiParams apiParams = null;\nif (componentModel.isApi()) {\napiParams = classElement.getAnnotation(ApiParams.class);\nif (apiParams != null) {\napiName = apiParams.apiName();\napiOption = !Strings.isNullOrEmpty(apiName);\n}\n}\ncollectExcludes(classElement, excludes);\nMetadata metadata;\nfor (final Field fieldElement : classElement.getDeclaredFields()) {\nmetadata = fieldElement.getAnnotation(Metadata.class);\nif (metadata != null && metadata.skip()) {\ncontinue;\n}\nboolean deprecated = fieldElement.getAnnotation(Deprecated.class) != null;\nString deprecationNote = null;\nif (metadata != null) {\ndeprecationNote = metadata.deprecationNote();\n}\nBoolean secret = metadata != null ? metadata.secret() : null;\nif (collectUriPathProperties(componentModel, classElement, excludes, prefix, nestedTypeName, nestedFieldName, componentOption, orgClassElement, metadata, fieldElement, deprecated, deprecationNote, secret)) {\ncontinue;\n}\nString fieldName;\nUriParam param = fieldElement.getAnnotation(UriParam.class);\nif (param != null) {\nfieldName = fieldElement.getName();\nString name = prefix + (Strings.isNullOrEmpty(param.name()) ? fieldName : param.name());\nif (excludes.contains(name)) {\ncontinue;\n}\nString paramOptionalPrefix = param.optionalPrefix();\nString paramPrefix = param.prefix();\nboolean multiValue = param.multiValue();\nObject defaultValue = param.defaultValue();\nif (isNullOrEmpty(defaultValue) && metadata != null) {\ndefaultValue = metadata.defaultValue();\n}\nString defaultValueNote = param.defaultValueNote();\nboolean required = metadata != null && metadata.required();\nString label = param.label();\nif (Strings.isNullOrEmpty(label) && metadata != null) {\nlabel = metadata.label();\n}\nString displayName = param.displayName();\nif (Strings.isNullOrEmpty(displayName)) {\ndisplayName = metadata != null ? metadata.displayName() : null;\n}\nif (Strings.isNullOrEmpty(displayName)) {\ndisplayName = Strings.asTitle(name);\n}\nClass<?> fieldTypeElement = fieldElement.getType();\nString fieldTypeName = getTypeName(GenericsUtil.resolveType(orgClassElement, fieldElement));\nUriParams fieldParams = fieldTypeElement.getAnnotation(UriParams.class);\nif (fieldParams != null) {\nString nestedPrefix = prefix;\nString extraPrefix = fieldParams.prefix();\nif (!Strings.isNullOrEmpty(extraPrefix)) {\nnestedPrefix += extraPrefix;\n}\nnestedTypeName = fieldTypeName;\nnestedFieldName = fieldElement.getName();\nfindClassProperties(componentModel, fieldTypeElement, excludes, nestedPrefix, nestedTypeName, nestedFieldName, componentOption);\nnestedTypeName = null;\nnestedFieldName = null;\n} else {\nApiParam apiParam = fieldElement.getAnnotation(ApiParam.class);\ncollectNonNestedField(componentModel, classElement, nestedTypeName, nestedFieldName, componentOption, apiName, apiOption, apiParams, metadata, fieldElement, deprecated, deprecationNote, secret, fieldName, param, apiParam, name, paramOptionalPrefix, paramPrefix, multiValue, defaultValue, defaultValueNote, required, label, displayName, fieldTypeElement, fieldTypeName);\n}\n}\n}\nif (apiOption) {\nbreak;\n}\nClass<?> superclass = classElement.getSuperclass();\nif (superclass != null) {\nclassElement = superclass;\n} else {\nbreak;\n}\n}\n}\n""}","java:S3776
"
"{""function"": ""private void collectNonNestedField(ComponentModel componentModel, Class<?> classElement, String nestedTypeName, String nestedFieldName, boolean componentOption, String apiName, boolean apiOption, ApiParams apiParams, Metadata metadata, Field fieldElement, boolean deprecated, String deprecationNote, Boolean secret, String fieldName, UriParam param, ApiParam apiParam, String name, String paramOptionalPrefix, String paramPrefix, boolean multiValue, Object defaultValue, String defaultValueNote, boolean required, String label, String displayName, Class<?> fieldTypeElement, String fieldTypeName)\n{\nString docComment = param.description();\nif (Strings.isNullOrEmpty(docComment)) {\ndocComment = findJavaDoc(fieldElement, fieldName, name, classElement, false);\n}\nif (Strings.isNullOrEmpty(docComment)) {\ndocComment = """";\n}\nList<String> enums = gatherEnums(param, fieldTypeElement);\nboolean isDuration = false;\nif (!Strings.isNullOrEmpty(param.javaType())) {\nString jt = param.javaType();\nif (""java.time.Duration"".equals(jt)) {\nisDuration = true;\n} else {\nfieldTypeName = param.javaType();\n}\n}\ndefaultValue = getDefaultValue(defaultValue, fieldTypeName, isDuration);\nboolean isSecret = secret != null && secret || param.secret();\nboolean isAutowired = metadata != null && metadata.autowired();\nString group = EndpointHelper.labelAsGroupName(label, componentModel.isConsumerOnly(), componentModel.isProducerOnly());\nString nestedType = null;\nString desc = fieldTypeName;\nif (desc.contains(""<"") && desc.contains("">"")) {\ndesc = Strings.between(desc, ""<"", "">"");\nint pos = desc.indexOf('<');\nif (pos != -1) {\ndesc = desc.substring(0, pos);\n}\npos = desc.indexOf(',');\nif (pos != -1) {\ndesc = desc.substring(pos + 1);\n}\ndesc = desc.replace('$', '.');\ndesc = desc.trim();\nif (!desc.isEmpty() && desc.indexOf('?') == -1 && !desc.contains("" extends "")) {\nnestedType = desc;\n}\n}\nBaseOptionModel option;\nif (componentOption) {\noption = new ComponentOptionModel();\n} else if (apiOption) {\noption = new ApiOptionModel();\n} else {\noption = new EndpointOptionModel();\n}\noption.setName(name);\noption.setDisplayName(displayName);\noption.setType(getType(fieldTypeName, false, isDuration));\noption.setJavaType(fieldTypeName);\noption.setRequired(required);\noption.setDefaultValue(defaultValue);\noption.setDefaultValueNote(defaultValueNote);\noption.setDescription(docComment.trim());\noption.setDeprecated(deprecated);\noption.setDeprecationNote(deprecationNote);\noption.setSecret(isSecret);\noption.setAutowired(isAutowired);\noption.setGroup(group);\noption.setLabel(label);\noption.setEnums(enums);\noption.setNestedType(nestedType);\noption.setConfigurationClass(nestedTypeName);\noption.setConfigurationField(nestedFieldName);\noption.setPrefix(paramPrefix);\noption.setOptionalPrefix(paramOptionalPrefix);\noption.setMultiValue(multiValue);\nif (componentOption) {\noption.setKind(""property"");\ncomponentModel.addComponentOption((ComponentOptionModel) option);\n} else if (apiOption && apiParam != null) {\noption.setKind(""parameter"");\nfinal String targetApiName = apiName;\nApiModel api;\nOptional<ApiModel> op = componentModel.getApiOptions().stream().filter(o -> o.getName().equals(targetApiName)).findFirst();\nif (!op.isPresent()) {\napi = new ApiModel();\napi.setName(apiName);\ncomponentModel.getApiOptions().add(api);\nif (apiParams != null) {\nfor (String alias : apiParams.aliases()) {\napi.addAlias(alias);\n}\n}\nif (apiParams != null) {\napi.setDescription(apiParams.description());\napi.setConsumerOnly(componentModel.isConsumerOnly() || apiParams.consumerOnly());\napi.setProducerOnly(componentModel.isProducerOnly() || apiParams.producerOnly());\n}\n} else {\napi = op.get();\n}\nfor (ApiMethod method : apiParam.apiMethods()) {\nApiMethodModel apiMethod = null;\nfor (ApiMethodModel m : api.getMethods()) {\nif (m.getName().equals(method.methodName())) {\napiMethod = m;\nbreak;\n}\n}\nif (apiMethod == null) {\napiMethod = api.newMethod(method.methodName());\n}\nif (apiParams != null) {\nfor (ApiMethod m : apiParams.apiMethods()) {\nif (m.methodName().equals(method.methodName())) {\napiMethod.setDescription(m.description());\nfor (String sig : m.signatures()) {\napiMethod.addSignature(sig);\n}\nbreak;\n}\n}\n}\nApiOptionModel copy = ((ApiOptionModel) option).copy();\napiMethod.addApiOptionModel(copy);\ncopy.setDescription(method.description());\ngroup = EndpointHelper.labelAsGroupName(copy.getLabel(), api.isConsumerOnly(), api.isProducerOnly());\ncopy.setGroup(group);\ncopy.setOptional(apiParam.optional());\n}\n} else {\noption.setKind(""parameter"");\nif (componentModel.getEndpointOptions().stream().noneMatch(opt -> name.equals(opt.getName()))) {\ncomponentModel.addEndpointOption((EndpointOptionModel) option);\n}\n}\n}\n""}","{""function"": ""private void collectNonNestedField(ComponentModel componentModel, Class<?> classElement, String nestedTypeName, String nestedFieldName, boolean componentOption, String apiName, boolean apiOption, ApiParams apiParams, Metadata metadata, Field fieldElement, boolean deprecated, String deprecationNote, Boolean secret, String fieldName, UriParam param, ApiParam apiParam, String name, String paramOptionalPrefix, String paramPrefix, boolean multiValue, Object defaultValue, String defaultValueNote, boolean required, String label, String displayName, Class<?> fieldTypeElement, String fieldTypeName)\n{\nString docComment = param.description();\nif (Strings.isNullOrEmpty(docComment)) {\ndocComment = findJavaDoc(fieldElement, fieldName, name, classElement, false);\n}\nif (Strings.isNullOrEmpty(docComment)) {\ndocComment = """";\n}\nList<String> enums = gatherEnums(param, fieldTypeElement);\nboolean isDuration = false;\nif (!Strings.isNullOrEmpty(param.javaType())) {\nString jt = param.javaType();\nif (""java.time.Duration"".equals(jt)) {\nisDuration = true;\n} else {\nfieldTypeName = param.javaType();\n}\n}\ndefaultValue = getDefaultValue(defaultValue, fieldTypeName, isDuration);\nboolean isSecret = secret != null && secret || param.secret();\nboolean isAutowired = metadata != null && metadata.autowired();\nString group = EndpointHelper.labelAsGroupName(label, componentModel.isConsumerOnly(), componentModel.isProducerOnly());\nString nestedType = null;\nString desc = fieldTypeName;\nif (desc.contains(""<"") && desc.contains("">"")) {\ndesc = Strings.between(desc, ""<"", "">"");\nint pos = desc.indexOf('<');\nif (pos != -1) {\ndesc = desc.substring(0, pos);\n}\npos = desc.indexOf(',');\nif (pos != -1) {\ndesc = desc.substring(pos + 1);\n}\ndesc = desc.replace('$', '.');\ndesc = desc.trim();\nif (!desc.isEmpty() && desc.indexOf('?') == -1 && !desc.contains("" extends "")) {\nnestedType = desc;\n}\n}\nBaseOptionModel option;\nif (componentOption) {\noption = new ComponentOptionModel();\n} else if (apiOption) {\noption = new ApiOptionModel();\n} else {\noption = new EndpointOptionModel();\n}\noption.setName(name);\noption.setDisplayName(displayName);\noption.setType(getType(fieldTypeName, false, isDuration));\noption.setJavaType(fieldTypeName);\noption.setRequired(required);\noption.setDefaultValue(defaultValue);\noption.setDefaultValueNote(defaultValueNote);\noption.setDescription(docComment.trim());\noption.setDeprecated(deprecated);\noption.setDeprecationNote(deprecationNote);\noption.setSecret(isSecret);\noption.setAutowired(isAutowired);\noption.setGroup(group);\noption.setLabel(label);\noption.setEnums(enums);\noption.setNestedType(nestedType);\noption.setConfigurationClass(nestedTypeName);\noption.setConfigurationField(nestedFieldName);\noption.setPrefix(paramPrefix);\noption.setOptionalPrefix(paramOptionalPrefix);\noption.setMultiValue(multiValue);\nif (componentOption) {\noption.setKind(""property"");\ncomponentModel.addComponentOption((ComponentOptionModel) option);\n} else if (apiOption && apiParam != null) {\noption.setKind(""parameter"");\nfinal String targetApiName = apiName;\nApiModel api;\nOptional<ApiModel> op = componentModel.getApiOptions().stream().filter(o -> o.getName().equals(targetApiName)).findFirst();\nif (!op.isPresent()) {\napi = new ApiModel();\napi.setName(apiName);\ncomponentModel.getApiOptions().add(api);\nif (apiParams != null) {\nfor (String alias : apiParams.aliases()) {\napi.addAlias(alias);\n}\n}\nif (apiParams != null) {\napi.setDescription(apiParams.description());\napi.setConsumerOnly(componentModel.isConsumerOnly() || apiParams.consumerOnly());\napi.setProducerOnly(componentModel.isProducerOnly() || apiParams.producerOnly());\n}\n} else {\napi = op.get();\n}\nfor (ApiMethod method : apiParam.apiMethods()) {\nApiMethodModel apiMethod = null;\nfor (ApiMethodModel m : api.getMethods()) {\nif (m.getName().equals(method.methodName())) {\napiMethod = m;\nbreak;\n}\n}\nif (apiMethod == null) {\napiMethod = api.newMethod(method.methodName());\n}\nif (apiParams != null) {\nfor (ApiMethod m : apiParams.apiMethods()) {\nif (m.methodName().equals(method.methodName())) {\napiMethod.setDescription(m.description());\nfor (String sig : m.signatures()) {\napiMethod.addSignature(sig);\n}\nbreak;\n}\n}\n}\nApiOptionModel copy = ((ApiOptionModel) option).copy();\napiMethod.addApiOptionModel(copy);\ncopy.setDescription(method.description());\ngroup = EndpointHelper.labelAsGroupName(copy.getLabel(), api.isConsumerOnly(), api.isProducerOnly());\ncopy.setGroup(group);\ncopy.setOptional(apiParam.optional());\n}\n} else {\noption.setKind(""parameter"");\nif (componentModel.getEndpointOptions().stream().noneMatch(opt -> name.equals(opt.getName()))) {\ncomponentModel.addEndpointOption((EndpointOptionModel) option);\n}\n}\n}\n""}","java:S107
"
"{""function"": ""private void collectNonNestedField(ComponentModel componentModel, Class<?> classElement, String nestedTypeName, String nestedFieldName, boolean componentOption, String apiName, boolean apiOption, ApiParams apiParams, Metadata metadata, Field fieldElement, boolean deprecated, String deprecationNote, Boolean secret, String fieldName, UriParam param, ApiParam apiParam, String name, String paramOptionalPrefix, String paramPrefix, boolean multiValue, Object defaultValue, String defaultValueNote, boolean required, String label, String displayName, Class<?> fieldTypeElement, String fieldTypeName)\n{\nString docComment = param.description();\nif (Strings.isNullOrEmpty(docComment)) {\ndocComment = findJavaDoc(fieldElement, fieldName, name, classElement, false);\n}\nif (Strings.isNullOrEmpty(docComment)) {\ndocComment = """";\n}\nList<String> enums = gatherEnums(param, fieldTypeElement);\nboolean isDuration = false;\nif (!Strings.isNullOrEmpty(param.javaType())) {\nString jt = param.javaType();\nif (""java.time.Duration"".equals(jt)) {\nisDuration = true;\n} else {\nfieldTypeName = param.javaType();\n}\n}\ndefaultValue = getDefaultValue(defaultValue, fieldTypeName, isDuration);\nboolean isSecret = secret != null && secret || param.secret();\nboolean isAutowired = metadata != null && metadata.autowired();\nString group = EndpointHelper.labelAsGroupName(label, componentModel.isConsumerOnly(), componentModel.isProducerOnly());\nString nestedType = null;\nString desc = fieldTypeName;\nif (desc.contains(""<"") && desc.contains("">"")) {\ndesc = Strings.between(desc, ""<"", "">"");\nint pos = desc.indexOf('<');\nif (pos != -1) {\ndesc = desc.substring(0, pos);\n}\npos = desc.indexOf(',');\nif (pos != -1) {\ndesc = desc.substring(pos + 1);\n}\ndesc = desc.replace('$', '.');\ndesc = desc.trim();\nif (!desc.isEmpty() && desc.indexOf('?') == -1 && !desc.contains("" extends "")) {\nnestedType = desc;\n}\n}\nBaseOptionModel option;\nif (componentOption) {\noption = new ComponentOptionModel();\n} else if (apiOption) {\noption = new ApiOptionModel();\n} else {\noption = new EndpointOptionModel();\n}\noption.setName(name);\noption.setDisplayName(displayName);\noption.setType(getType(fieldTypeName, false, isDuration));\noption.setJavaType(fieldTypeName);\noption.setRequired(required);\noption.setDefaultValue(defaultValue);\noption.setDefaultValueNote(defaultValueNote);\noption.setDescription(docComment.trim());\noption.setDeprecated(deprecated);\noption.setDeprecationNote(deprecationNote);\noption.setSecret(isSecret);\noption.setAutowired(isAutowired);\noption.setGroup(group);\noption.setLabel(label);\noption.setEnums(enums);\noption.setNestedType(nestedType);\noption.setConfigurationClass(nestedTypeName);\noption.setConfigurationField(nestedFieldName);\noption.setPrefix(paramPrefix);\noption.setOptionalPrefix(paramOptionalPrefix);\noption.setMultiValue(multiValue);\nif (componentOption) {\noption.setKind(""property"");\ncomponentModel.addComponentOption((ComponentOptionModel) option);\n} else if (apiOption && apiParam != null) {\noption.setKind(""parameter"");\nfinal String targetApiName = apiName;\nApiModel api;\nOptional<ApiModel> op = componentModel.getApiOptions().stream().filter(o -> o.getName().equals(targetApiName)).findFirst();\nif (!op.isPresent()) {\napi = new ApiModel();\napi.setName(apiName);\ncomponentModel.getApiOptions().add(api);\nif (apiParams != null) {\nfor (String alias : apiParams.aliases()) {\napi.addAlias(alias);\n}\n}\nif (apiParams != null) {\napi.setDescription(apiParams.description());\napi.setConsumerOnly(componentModel.isConsumerOnly() || apiParams.consumerOnly());\napi.setProducerOnly(componentModel.isProducerOnly() || apiParams.producerOnly());\n}\n} else {\napi = op.get();\n}\nfor (ApiMethod method : apiParam.apiMethods()) {\nApiMethodModel apiMethod = null;\nfor (ApiMethodModel m : api.getMethods()) {\nif (m.getName().equals(method.methodName())) {\napiMethod = m;\nbreak;\n}\n}\nif (apiMethod == null) {\napiMethod = api.newMethod(method.methodName());\n}\nif (apiParams != null) {\nfor (ApiMethod m : apiParams.apiMethods()) {\nif (m.methodName().equals(method.methodName())) {\napiMethod.setDescription(m.description());\nfor (String sig : m.signatures()) {\napiMethod.addSignature(sig);\n}\nbreak;\n}\n}\n}\nApiOptionModel copy = ((ApiOptionModel) option).copy();\napiMethod.addApiOptionModel(copy);\ncopy.setDescription(method.description());\ngroup = EndpointHelper.labelAsGroupName(copy.getLabel(), api.isConsumerOnly(), api.isProducerOnly());\ncopy.setGroup(group);\ncopy.setOptional(apiParam.optional());\n}\n} else {\noption.setKind(""parameter"");\nif (componentModel.getEndpointOptions().stream().noneMatch(opt -> name.equals(opt.getName()))) {\ncomponentModel.addEndpointOption((EndpointOptionModel) option);\n}\n}\n}\n""}","{""function"": ""private void collectNonNestedField(ComponentModel componentModel, Class<?> classElement, String nestedTypeName, String nestedFieldName, boolean componentOption, String apiName, boolean apiOption, ApiParams apiParams, Metadata metadata, Field fieldElement, boolean deprecated, String deprecationNote, Boolean secret, String fieldName, UriParam param, ApiParam apiParam, String name, String paramOptionalPrefix, String paramPrefix, boolean multiValue, Object defaultValue, String defaultValueNote, boolean required, String label, String displayName, Class<?> fieldTypeElement, String fieldTypeName)\n{\nString docComment = param.description();\nif (Strings.isNullOrEmpty(docComment)) {\ndocComment = findJavaDoc(fieldElement, fieldName, name, classElement, false);\n}\nif (Strings.isNullOrEmpty(docComment)) {\ndocComment = """";\n}\nList<String> enums = gatherEnums(param, fieldTypeElement);\nboolean isDuration = false;\nif (!Strings.isNullOrEmpty(param.javaType())) {\nString jt = param.javaType();\nif (""java.time.Duration"".equals(jt)) {\nisDuration = true;\n} else {\nfieldTypeName = param.javaType();\n}\n}\ndefaultValue = getDefaultValue(defaultValue, fieldTypeName, isDuration);\nboolean isSecret = secret != null && secret || param.secret();\nboolean isAutowired = metadata != null && metadata.autowired();\nString group = EndpointHelper.labelAsGroupName(label, componentModel.isConsumerOnly(), componentModel.isProducerOnly());\nString nestedType = null;\nString desc = fieldTypeName;\nif (desc.contains(""<"") && desc.contains("">"")) {\ndesc = Strings.between(desc, ""<"", "">"");\nint pos = desc.indexOf('<');\nif (pos != -1) {\ndesc = desc.substring(0, pos);\n}\npos = desc.indexOf(',');\nif (pos != -1) {\ndesc = desc.substring(pos + 1);\n}\ndesc = desc.replace('$', '.');\ndesc = desc.trim();\nif (!desc.isEmpty() && desc.indexOf('?') == -1 && !desc.contains("" extends "")) {\nnestedType = desc;\n}\n}\nBaseOptionModel option;\nif (componentOption) {\noption = new ComponentOptionModel();\n} else if (apiOption) {\noption = new ApiOptionModel();\n} else {\noption = new EndpointOptionModel();\n}\noption.setName(name);\noption.setDisplayName(displayName);\noption.setType(getType(fieldTypeName, false, isDuration));\noption.setJavaType(fieldTypeName);\noption.setRequired(required);\noption.setDefaultValue(defaultValue);\noption.setDefaultValueNote(defaultValueNote);\noption.setDescription(docComment.trim());\noption.setDeprecated(deprecated);\noption.setDeprecationNote(deprecationNote);\noption.setSecret(isSecret);\noption.setAutowired(isAutowired);\noption.setGroup(group);\noption.setLabel(label);\noption.setEnums(enums);\noption.setNestedType(nestedType);\noption.setConfigurationClass(nestedTypeName);\noption.setConfigurationField(nestedFieldName);\noption.setPrefix(paramPrefix);\noption.setOptionalPrefix(paramOptionalPrefix);\noption.setMultiValue(multiValue);\nif (componentOption) {\noption.setKind(""property"");\ncomponentModel.addComponentOption((ComponentOptionModel) option);\n} else if (apiOption && apiParam != null) {\noption.setKind(""parameter"");\nfinal String targetApiName = apiName;\nApiModel api;\nOptional<ApiModel> op = componentModel.getApiOptions().stream().filter(o -> o.getName().equals(targetApiName)).findFirst();\nif (!op.isPresent()) {\napi = new ApiModel();\napi.setName(apiName);\ncomponentModel.getApiOptions().add(api);\nif (apiParams != null) {\nfor (String alias : apiParams.aliases()) {\napi.addAlias(alias);\n}\n}\nif (apiParams != null) {\napi.setDescription(apiParams.description());\napi.setConsumerOnly(componentModel.isConsumerOnly() || apiParams.consumerOnly());\napi.setProducerOnly(componentModel.isProducerOnly() || apiParams.producerOnly());\n}\n} else {\napi = op.get();\n}\nfor (ApiMethod method : apiParam.apiMethods()) {\nApiMethodModel apiMethod = null;\nfor (ApiMethodModel m : api.getMethods()) {\nif (m.getName().equals(method.methodName())) {\napiMethod = m;\nbreak;\n}\n}\nif (apiMethod == null) {\napiMethod = api.newMethod(method.methodName());\n}\nif (apiParams != null) {\nfor (ApiMethod m : apiParams.apiMethods()) {\nif (m.methodName().equals(method.methodName())) {\napiMethod.setDescription(m.description());\nfor (String sig : m.signatures()) {\napiMethod.addSignature(sig);\n}\nbreak;\n}\n}\n}\nApiOptionModel copy = ((ApiOptionModel) option).copy();\napiMethod.addApiOptionModel(copy);\ncopy.setDescription(method.description());\ngroup = EndpointHelper.labelAsGroupName(copy.getLabel(), api.isConsumerOnly(), api.isProducerOnly());\ncopy.setGroup(group);\ncopy.setOptional(apiParam.optional());\n}\n} else {\noption.setKind(""parameter"");\nif (componentModel.getEndpointOptions().stream().noneMatch(opt -> name.equals(opt.getName()))) {\ncomponentModel.addEndpointOption((EndpointOptionModel) option);\n}\n}\n}\n""}","java:S3776
"
"{""function"": ""private boolean generateSetValue(String modelName, CodeBlock.Builder cb, FieldInfo field, Collection<AnnotationSpec> annotations)\n{\nif (hasAnnotation(field, XML_TRANSIENT_CLASS) && !hasAnnotation(field, DSL_PROPERTY_ANNOTATION)) {\nreturn false;\n}\nif (hasAnnotation(field, XML_ELEMENTS_ANNOTATION_CLASS)) {\nAnnotationInstance[] elements = field.annotation(XML_ELEMENTS_ANNOTATION_CLASS).value().asNestedArray();\nif (elements.length > 1) {\ncb.beginControlFlow(""case $S:"", StringHelper.camelCaseToDash(field.name()).toLowerCase(Locale.US));\ncb.addStatement(""$T val = asMappingNode(node)"", CN_MAPPING_NODE);\ncb.addStatement(""setProperties(target, val)"");\ncb.addStatement(""break"");\ncb.endControlFlow();\n}\nif (field.type().name().equals(LIST_CLASS)) {\nType parameterized = field.type().asParameterizedType().arguments().get(0);\nfor (AnnotationInstance element : elements) {\nAnnotationValue name = element.value(""name"");\nAnnotationValue type = element.value(""type"");\nif (name != null && type != null) {\nString fieldName = StringHelper.camelCaseToDash(name.asString()).toLowerCase(Locale.US);\nString paramType = parameterized.name().toString();\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""$L val = asType(node, $L.class)"", type.asString(), type.asString());\ncb.addStatement(""java.util.List<$L> existing = target.get$L()"", paramType, StringHelper.capitalize(field.name()));\ncb.beginControlFlow(""if (existing == null)"");\ncb.addStatement(""existing = new java.util.ArrayList<>()"");\ncb.endControlFlow();\ncb.addStatement(""existing.add(val)"");\ncb.addStatement(""target.set$L(existing)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""object"", type.asString(), isRequired(field)));\n}\n}\n} else {\nfor (AnnotationInstance element : elements) {\nAnnotationValue name = element.value(""name"");\nAnnotationValue type = element.value(""type"");\nif (name != null && type != null) {\nString fieldName = StringHelper.camelCaseToDash(name.asString()).toLowerCase(Locale.US);\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""$L val = asType(node, $L.class)"", type.asString(), type.asString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""object"", type.asString(), isRequired(field)));\n}\n}\n}\nreturn true;\n}\nif (hasAnnotation(field, XML_ELEMENT_REF_ANNOTATION_CLASS)) {\nif (field.type().name().equals(LIST_CLASS)) {\nType parameterized = field.type().asParameterizedType().arguments().get(0);\nClassInfo refType = view.getClassByName(parameterized.name());\nif (extendsType(refType, VERB_DEFINITION_CLASS)) {\nimplementsOrExtends(parameterized).forEach(ci -> {\nOptional<String> name = annotationValue(ci, XML_ROOT_ELEMENT_ANNOTATION_CLASS, ""name"").map(AnnotationValue::asString).filter(value -> !""##default"".equals(value));\nif (!name.isPresent()) {\nreturn;\n}\nString fieldName = name.get();\nString fieldType = ci.name().toString();\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""java.util.List<$L> existing = target.get$L()"", refType.name().toString(), StringHelper.capitalize(field.name()));\ncb.beginControlFlow(""if (existing == null)"");\ncb.addStatement(""existing = new java.util.ArrayList<>()"");\ncb.endControlFlow();\ncb.addStatement(""java.util.List val = asFlatList(node, $L.class)"", fieldType);\ncb.addStatement(""existing.addAll(val)"");\ncb.addStatement(""target.set$L(existing)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""array"", fieldType, false));\n});\nreturn true;\n}\n}\n}\nif (!hasAnnotation(field, XML_ATTRIBUTE_ANNOTATION_CLASS) && !hasAnnotation(field, XML_VALUE_ANNOTATION_CLASS) && !hasAnnotation(field, XML_ELEMENT_ANNOTATION_CLASS) && !hasAnnotation(field, XML_ELEMENT_REF_ANNOTATION_CLASS) && !hasAnnotation(field, XML_TRANSIENT_CLASS)) {\nreturn false;\n}\nfinal String fieldName = StringHelper.camelCaseToDash(fieldName(field)).toLowerCase(Locale.US);\nif (field.type().kind() == Type.Kind.PARAMETERIZED_TYPE) {\nParameterizedType parameterized = field.type().asParameterizedType();\nif (!parameterized.name().equals(CLASS_CLASS) && parameterized.arguments().size() == 1) {\nfinal Type parametrizedType = parameterized.arguments().get(0);\nif (parametrizedType.name().equals(PROCESSOR_DEFINITION_CLASS)) {\nreturn false;\n}\nswitch(parameterized.name().toString()) {\ncase ""java.util.List"":\nif (parametrizedType.name().equals(STRING_CLASS)) {\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""java.util.List<String> val = asStringList(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""array"", ""string"", isRequired(field)));\n} else {\nClassInfo ci = view.getClassByName(parametrizedType.name());\nString name = fieldName(ci, field);\ncb.beginControlFlow(""case $S:"", StringHelper.camelCaseToDash(name).toLowerCase(Locale.US));\ncb.addStatement(""java.util.List<$L> val = asFlatList(node, $L.class)"", parametrizedType.name().toString(), parametrizedType.name().toString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(StringHelper.camelCaseToDash(name).toLowerCase(Locale.US), ""array"", parametrizedType.name().toString(), isRequired(field)));\n}\nreturn true;\ncase ""java.util.Set"":\nif (parametrizedType.name().equals(STRING_CLASS)) {\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""java.util.Set<String> val = asStringSet(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""array"", ""string"", isRequired(field)));\n} else {\nClassInfo ci = view.getClassByName(parametrizedType.name());\nString name = fieldName(ci, field);\ncb.beginControlFlow(""case $S:"", StringHelper.camelCaseToDash(name).toLowerCase(Locale.US));\ncb.addStatement(""var val = asFlatSet(node, $L.class)"", parametrizedType.name().toString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(StringHelper.camelCaseToDash(name).toLowerCase(Locale.US), ""array"", parametrizedType.name().toString(), isRequired(field)));\n}\nreturn true;\ndefault:\nthrow new UnsupportedOperationException(""Unable to handle field: "" + field.name() + "" with type: "" + field.type().name());\n}\n}\n}\nif (""expression"".equals(fieldName) && !expressionRequired(modelName)) {\nreturn true;\n}\ncb.beginControlFlow(""case $S:"", fieldName);\nClassInfo c = view.getClassByName(field.type().name());\nif (hasAnnotation(field, XML_JAVA_TYPE_ADAPTER_CLASS)) {\nOptional<AnnotationValue> adapter = annotationValue(field, XML_JAVA_TYPE_ADAPTER_CLASS, ""value"");\nif (adapter.isEmpty()) {\nreturn false;\n}\nString adapterClass = adapter.get().asClass().name().toString();\nClassInfo adapterClassInfo = view.getClassByName(adapter.get().asClass().name());\nif (adapterClassInfo.superClassType().kind() == Type.Kind.PARAMETERIZED_TYPE) {\nList<Type> arguments = adapterClassInfo.superClassType().asParameterizedType().arguments();\nif (arguments.size() == 2) {\nType type = arguments.get(1);\nif (type.name().toString().equals(""java.util.Map"")) {\ncb.addStatement(""$L val = asMap(node)"", field.type().name().toString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""object"", isRequired(field), isDeprecated(field)));\n}\n}\n}\n} else if (c != null && c.isEnum()) {\ncb.addStatement(""target.set$L(asEnum(node, $L.class))"", StringHelper.capitalize(field.name()), field.type().name().toString());\ncb.addStatement(""break"");\nSet<String> values = new TreeSet<>();\nList<FieldInfo> fields = c.fields();\nfor (int i = 1; i < fields.size(); i++) {\nFieldInfo f = fields.get(i);\nif (f.isEnumConstant()) {\nvalues.add(f.name());\n}\n}\nAnnotationSpec.Builder builder = AnnotationSpec.builder(CN_YAML_PROPERTY);\nbuilder.addMember(""name"", ""$S"", fieldName);\nbuilder.addMember(""type"", ""$S"", ""enum:"" + String.join("","", values));\nif (isRequired(field)) {\nbuilder.addMember(""required"", ""$L"", isRequired(field));\n}\nannotations.add(builder.build());\n} else if (isEnum(field)) {\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nAnnotationSpec.Builder builder = AnnotationSpec.builder(CN_YAML_PROPERTY);\nbuilder.addMember(""name"", ""$S"", fieldName);\nbuilder.addMember(""type"", ""$S"", ""enum:"" + getEnums(field));\nif (isRequired(field)) {\nbuilder.addMember(""required"", ""$L"", isRequired(field));\n}\nannotations.add(builder.build());\n} else {\nswitch(field.type().name().toString()) {\ncase ""[B"":\ncb.addStatement(""byte[] val = asByteArray(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlPropertyWithFormat(fieldName, ""string"", ""binary"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""Z"":\ncase ""boolean"":\ncb.addStatement(""boolean val = asBoolean(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""boolean"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""I"":\ncase ""int"":\ncb.addStatement(""int val = asInt(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""J"":\ncase ""long"":\ncb.addStatement(""long val = asLong(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""D"":\ncase ""double"":\ncb.addStatement(""double val = asDouble(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""java.lang.String"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nString javaType = annotationValue(field, METADATA_ANNOTATION_CLASS, ""javaType"").map(AnnotationValue::asString).orElse(""string"");\nswitch(javaType) {\ncase ""java.lang.Boolean"":\nannotations.add(yamlProperty(fieldName, ""boolean"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""java.lang.Integer"":\ncase ""java.lang.Short"":\ncase ""java.lang.Long"":\ncase ""java.lang.Float"":\ncase ""java.lang.Double"":\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ndefault:\nannotations.add(yamlProperty(fieldName, ""string"", isRequired(field), isDeprecated(field)));\n}\nbreak;\ncase ""java.lang.Class"":\ncb.addStatement(""java.lang.Class<?> val = asClass(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""string"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""[Ljava.lang.Class;"":\ncb.addStatement(""java.lang.Class<?>[] val = asClassArray(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nbreak;\ncase ""java.lang.Integer"":\ncase ""java.lang.Short"":\ncase ""java.lang.Long"":\ncase ""java.lang.Float"":\ncase ""java.lang.Double"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.set$L($L.valueOf(val))"", StringHelper.capitalize(field.name()), field.type().name().toString());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""java.lang.Boolean"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.set$L($L.valueOf(val))"", StringHelper.capitalize(field.name()), field.type().name().toString());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""boolean"", isRequired(field), isDeprecated(field)));\nbreak;\ndefault:\nif (field.type().kind() == Type.Kind.CLASS) {\ncb.addStatement(""$L val = asType(node, $L.class)"", field.type().name().toString(), field.type().name().toString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlPropertyWithSubtype(fieldName, ""object"", field.type().name().toString(), isRequired(field)));\n} else {\nthrow new UnsupportedOperationException(""Unable to handle field: "" + field.name() + "" with type: "" + field.type().name());\n}\n}\n}\ncb.endControlFlow();\nreturn true;\n}\n""}","{""function"": ""private boolean generateSetValue(CodeBlock.Builder cb, MethodInfo method, Collection<AnnotationSpec> annotations)\n{\nfinal String name = StringHelper.camelCaseToDash(method.name()).toLowerCase(Locale.US).substring(4);\nfinal Type parameterType = method.parameterTypes().get(0);\ncb.beginControlFlow(""case $S:"", name);\nClassInfo c = view.getClassByName(parameterType.name());\nif (c != null && c.isEnum()) {\ncb.addStatement(""target.$L(asEnum(node, $L.class))"", method.name(), parameterType);\ncb.addStatement(""break"");\nSet<String> values = new TreeSet<>();\nList<FieldInfo> fields = c.fields();\nfor (int i = 1; i < fields.size(); i++) {\nFieldInfo f = fields.get(i);\nif (f.isEnumConstant()) {\nvalues.add(f.name());\n}\n}\nAnnotationSpec.Builder builder = AnnotationSpec.builder(CN_YAML_PROPERTY);\nbuilder.addMember(""name"", ""$S"", name);\nbuilder.addMember(""type"", ""$S"", ""enum:"" + String.join("","", values));\nannotations.add(builder.build());\n} else {\nswitch(parameterType.name().toString()) {\ncase ""[B"":\ncb.addStatement(""byte[] val = asByteArray(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlPropertyWithFormat(name, ""string"", ""binary""));\nbreak;\ncase ""Z"":\ncase ""boolean"":\ncb.addStatement(""boolean val = asBoolean(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""boolean""));\nbreak;\ncase ""I"":\ncase ""int"":\ncb.addStatement(""int val = asInt(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""number""));\nbreak;\ncase ""J"":\ncase ""long"":\ncb.addStatement(""long val = asLong(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""number""));\nbreak;\ncase ""D"":\ncase ""double"":\ncb.addStatement(""double val = asDouble(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""number""));\nbreak;\ncase ""java.lang.String"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""string""));\nbreak;\ncase ""java.lang.Class"":\ncb.addStatement(""java.lang.Class<?> val = asClass(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""string""));\nbreak;\ncase ""[Ljava.lang.Class;"":\ncb.addStatement(""java.lang.Class<?>[] val = asClassArray(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nbreak;\ncase ""java.lang.Integer"":\ncase ""java.lang.Short"":\ncase ""java.lang.Long"":\ncase ""java.lang.Float"":\ncase ""java.lang.Double"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.$L($L.valueOf(val))"", method.name(), parameterType.toString());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""number""));\nbreak;\ncase ""java.lang.Boolean"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.$L($L.valueOf(val))"", method.name(), parameterType.toString());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""boolean""));\nbreak;\ndefault:\nif (parameterType.kind() == Type.Kind.CLASS) {\ncb.addStatement(""$L val = asType(node, $L.class)"", parameterType.toString(), parameterType.toString());\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlPropertyWithSubtype(name, ""object"", parameterType.toString()));\n} else {\nthrow new UnsupportedOperationException(""Unable to handle method: "" + method.name() + "" with type: "" + parameterType);\n}\n}\n}\ncb.endControlFlow();\nreturn true;\n}\n""}","java:S3776
"
"{""function"": ""public ExecCommand readInput(Exchange exchange, ExecEndpoint endpoint)\n{\nObjectHelper.notNull(exchange, ""exchange"");\nObjectHelper.notNull(endpoint, ""endpoint"");\nObject args = exchange.getIn().removeHeader(EXEC_COMMAND_ARGS);\nString cmd = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_EXECUTABLE, endpoint.getExecutable(), String.class);\nString dir = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_WORKING_DIR, endpoint.getWorkingDir(), String.class);\nlong timeout = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_TIMEOUT, endpoint.getTimeout(), Long.class);\nString exitValuesString = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_EXIT_VALUES, endpoint.getExitValues(), String.class);\nString outFilePath = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_OUT_FILE, endpoint.getOutFile(), String.class);\nboolean useStderrOnEmptyStdout = getAndRemoveHeader(exchange.getIn(), EXEC_USE_STDERR_ON_EMPTY_STDOUT, endpoint.isUseStderrOnEmptyStdout(), Boolean.class);\nLoggingLevel commandLogLevel = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_LOG_LEVEL, endpoint.getCommandLogLevel(), LoggingLevel.class);\nInputStream input = exchange.getIn().getBody(InputStream.class);\nList<String> argsList = null;\nif (isListOfStrings(args)) {\nargsList = (List<String>) args;\n}\nif (argsList == null) {\nString s = endpoint.getArgs();\nif (args != null) {\ns = exchange.getContext().getTypeConverter().convertTo(String.class, exchange, args);\n}\nLOG.debug(""Parsing argument String to a List: {}"", s);\nargsList = splitToWhiteSpaceSeparatedTokens(s);\n}\nSet<Integer> exitValues = new HashSet<>();\nif (exitValuesString != null && exitValuesString.length() > 0) {\nexitValues = new HashSet<>(splitCommaSeparatedToListOfInts(exitValuesString));\n}\nFile outFile = outFilePath == null ? null : new File(outFilePath);\nreturn new ExecCommand(cmd, argsList, dir, timeout, exitValues, input, outFile, useStderrOnEmptyStdout, commandLogLevel);\n}\n""}","{""function"": ""public ExecCommand readInput(Exchange exchange, ExecEndpoint endpoint)\n{\nObjectHelper.notNull(exchange, ""exchange"");\nObjectHelper.notNull(endpoint, ""endpoint"");\nObject args = exchange.getIn().removeHeader(EXEC_COMMAND_ARGS);\nString cmd = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_EXECUTABLE, endpoint.getExecutable(), String.class);\nString dir = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_WORKING_DIR, endpoint.getWorkingDir(), String.class);\nlong timeout = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_TIMEOUT, endpoint.getTimeout(), Long.class);\nString exitValuesString = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_EXIT_VALUES, endpoint.getExitValues(), String.class);\nString outFilePath = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_OUT_FILE, endpoint.getOutFile(), String.class);\nboolean useStderrOnEmptyStdout = getAndRemoveHeader(exchange.getIn(), EXEC_USE_STDERR_ON_EMPTY_STDOUT, endpoint.isUseStderrOnEmptyStdout(), Boolean.class);\nLoggingLevel commandLogLevel = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_LOG_LEVEL, endpoint.getCommandLogLevel(), LoggingLevel.class);\nInputStream input = exchange.getIn().getBody(InputStream.class);\nList<String> argsList = null;\nif (isListOfStrings(args)) {\nargsList = (List<String>) args;\n}\nif (argsList == null) {\nString s = endpoint.getArgs();\nif (args != null) {\ns = exchange.getContext().getTypeConverter().convertTo(String.class, exchange, args);\n}\nLOG.debug(""Parsing argument String to a List: {}"", s);\nargsList = splitToWhiteSpaceSeparatedTokens(s);\n}\nSet<Integer> exitValues = new HashSet<>();\nif (exitValuesString != null && exitValuesString.length() > 0) {\nexitValues = new HashSet<>(splitCommaSeparatedToListOfInts(exitValuesString));\n}\nFile outFile = outFilePath == null ? null : new File(outFilePath);\nreturn new ExecCommand(cmd, argsList, dir, timeout, exitValues, input, outFile, useStderrOnEmptyStdout, commandLogLevel);\n}\n""}","java:S2293
"
"{""function"": ""public ExecCommand readInput(Exchange exchange, ExecEndpoint endpoint)\n{\nObjectHelper.notNull(exchange, ""exchange"");\nObjectHelper.notNull(endpoint, ""endpoint"");\nObject args = exchange.getIn().removeHeader(EXEC_COMMAND_ARGS);\nString cmd = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_EXECUTABLE, endpoint.getExecutable(), String.class);\nString dir = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_WORKING_DIR, endpoint.getWorkingDir(), String.class);\nlong timeout = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_TIMEOUT, endpoint.getTimeout(), Long.class);\nString exitValuesString = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_EXIT_VALUES, endpoint.getExitValues(), String.class);\nString outFilePath = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_OUT_FILE, endpoint.getOutFile(), String.class);\nboolean useStderrOnEmptyStdout = getAndRemoveHeader(exchange.getIn(), EXEC_USE_STDERR_ON_EMPTY_STDOUT, endpoint.isUseStderrOnEmptyStdout(), Boolean.class);\nLoggingLevel commandLogLevel = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_LOG_LEVEL, endpoint.getCommandLogLevel(), LoggingLevel.class);\nInputStream input = exchange.getIn().getBody(InputStream.class);\nList<String> argsList = null;\nif (isListOfStrings(args)) {\nargsList = (List<String>) args;\n}\nif (argsList == null) {\nString s = endpoint.getArgs();\nif (args != null) {\ns = exchange.getContext().getTypeConverter().convertTo(String.class, exchange, args);\n}\nLOG.debug(""Parsing argument String to a List: {}"", s);\nargsList = splitToWhiteSpaceSeparatedTokens(s);\n}\nSet<Integer> exitValues = new HashSet<>();\nif (exitValuesString != null && exitValuesString.length() > 0) {\nexitValues = new HashSet<>(splitCommaSeparatedToListOfInts(exitValuesString));\n}\nFile outFile = outFilePath == null ? null : new File(outFilePath);\nreturn new ExecCommand(cmd, argsList, dir, timeout, exitValues, input, outFile, useStderrOnEmptyStdout, commandLogLevel);\n}\n""}","{""function"": ""public ExecCommand readInput(Exchange exchange, ExecEndpoint endpoint)\n{\nObjectHelper.notNull(exchange, ""exchange"");\nObjectHelper.notNull(endpoint, ""endpoint"");\nObject args = exchange.getIn().removeHeader(EXEC_COMMAND_ARGS);\nString cmd = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_EXECUTABLE, endpoint.getExecutable(), String.class);\nString dir = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_WORKING_DIR, endpoint.getWorkingDir(), String.class);\nlong timeout = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_TIMEOUT, endpoint.getTimeout(), Long.class);\nString exitValuesString = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_EXIT_VALUES, endpoint.getExitValues(), String.class);\nString outFilePath = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_OUT_FILE, endpoint.getOutFile(), String.class);\nboolean useStderrOnEmptyStdout = getAndRemoveHeader(exchange.getIn(), EXEC_USE_STDERR_ON_EMPTY_STDOUT, endpoint.isUseStderrOnEmptyStdout(), Boolean.class);\nLoggingLevel commandLogLevel = getAndRemoveHeader(exchange.getIn(), EXEC_COMMAND_LOG_LEVEL, endpoint.getCommandLogLevel(), LoggingLevel.class);\nInputStream input = exchange.getIn().getBody(InputStream.class);\nList<String> argsList = null;\nif (isListOfStrings(args)) {\nargsList = (List<String>) args;\n}\nif (argsList == null) {\nString s = endpoint.getArgs();\nif (args != null) {\ns = exchange.getContext().getTypeConverter().convertTo(String.class, exchange, args);\n}\nLOG.debug(""Parsing argument String to a List: {}"", s);\nargsList = splitToWhiteSpaceSeparatedTokens(s);\n}\nSet<Integer> exitValues = new HashSet<>();\nif (exitValuesString != null && exitValuesString.length() > 0) {\nexitValues = new HashSet<>(splitCommaSeparatedToListOfInts(exitValuesString));\n}\nFile outFile = outFilePath == null ? null : new File(outFilePath);\nreturn new ExecCommand(cmd, argsList, dir, timeout, exitValues, input, outFile, useStderrOnEmptyStdout, commandLogLevel);\n}\n""}","java:S2293
"
"{""function"": ""public Object unmarshal(Exchange exchange, InputStream stream) throws Exception\n{\nList<Object> parquetObjects = new ArrayList<>();\nConfiguration conf = new Configuration();\nParquetInputStream parquetInputStream = new ParquetInputStream(DEFAULT_UUID_GENERATOR.generateUuid(), stream.readAllBytes());\ntry (ParquetReader reader = AvroParquetReader.builder(parquetInputStream).withDataModel(new ReflectData(unmarshalType.getClassLoader())).disableCompatibility().withConf(conf).build()) {\nObject pojo;\nwhile ((pojo = unmarshalType.cast(reader.read())) != null) {\nparquetObjects.add(pojo);\n}\n}\nreturn parquetObjects;\n}\n""}","{""function"": ""public Object unmarshal(Exchange exchange, InputStream stream) throws Exception\n{\nList<Object> parquetObjects = new ArrayList<>();\nConfiguration conf = new Configuration();\nParquetInputStream parquetInputStream = new ParquetInputStream(DEFAULT_UUID_GENERATOR.generateUuid(), stream.readAllBytes());\ntry (ParquetReader reader = AvroParquetReader.builder(parquetInputStream).withDataModel(new ReflectData(unmarshalType.getClassLoader())).disableCompatibility().withConf(conf).build()) {\nObject pojo;\nwhile ((pojo = unmarshalType.cast(reader.read())) != null) {\nparquetObjects.add(pojo);\n}\n}\nreturn parquetObjects;\n}\n""}","java:S3740
"
"{""function"": "" void schedule(Runnable runnable, boolean first, boolean main, boolean sync)\n{\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Schedule [first={}, main={}, sync={}]: {}"", first, main, sync, runnable);\n}\nif (main) {\nif (!queue.isEmpty()) {\nif (back == null) {\nback = new ArrayDeque<>();\n}\nback.push(queue);\nqueue = new ArrayDeque<>();\n}\n}\nif (first) {\nqueue.addFirst(runnable);\nif (stats) {\nexecutor.pendingTasks.increment();\n}\n} else {\nqueue.addLast(runnable);\nif (stats) {\nexecutor.pendingTasks.increment();\n}\n}\nif (!running || sync) {\nrunning = true;\nif (stats) {\nexecutor.runningWorkers.increment();\n}\ntry {\nfor (; ; ) {\nfinal Runnable polled = queue.pollFirst();\nif (polled == null) {\nif (back != null && !back.isEmpty()) {\nqueue = back.pollFirst();\ncontinue;\n} else {\nbreak;\n}\n}\ntry {\nif (stats) {\nexecutor.pendingTasks.decrement();\n}\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Worker #{} running: {}"", number, polled);\n}\npolled.run();\n} catch (Exception e) {\nLOG.warn(""Error executing reactive work due to {}. This exception is ignored."", e.getMessage(), e);\n}\n}\n} finally {\nrunning = false;\nif (stats) {\nexecutor.runningWorkers.decrement();\n}\n}\n} else {\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Queuing reactive work: {}"", runnable);\n}\n}\n}\n""}","{""function"": "" void schedule(Runnable runnable, boolean first, boolean main, boolean sync)\n{\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Schedule [first={}, main={}, sync={}]: {}"", first, main, sync, runnable);\n}\nif (main) {\nif (!queue.isEmpty()) {\nif (back == null) {\nback = new ArrayDeque<>();\n}\nback.push(queue);\nqueue = new ArrayDeque<>();\n}\n}\nif (first) {\nqueue.addFirst(runnable);\nif (stats) {\nexecutor.pendingTasks.increment();\n}\n} else {\nqueue.addLast(runnable);\nif (stats) {\nexecutor.pendingTasks.increment();\n}\n}\nif (!running || sync) {\nrunning = true;\nif (stats) {\nexecutor.runningWorkers.increment();\n}\ntry {\nfor (; ; ) {\nfinal Runnable polled = queue.pollFirst();\nif (polled == null) {\nif (back != null && !back.isEmpty()) {\nqueue = back.pollFirst();\ncontinue;\n} else {\nbreak;\n}\n}\ntry {\nif (stats) {\nexecutor.pendingTasks.decrement();\n}\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Worker #{} running: {}"", number, polled);\n}\npolled.run();\n} catch (Exception e) {\nLOG.warn(""Error executing reactive work due to {}. This exception is ignored."", e.getMessage(), e);\n}\n}\n} finally {\nrunning = false;\nif (stats) {\nexecutor.runningWorkers.decrement();\n}\n}\n} else {\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Queuing reactive work: {}"", runnable);\n}\n}\n}\n""}","java:S1181
"
"{""function"": "" boolean executeFromQueue()\n{\nfinal Runnable polled = queue != null ? queue.pollFirst() : null;\nif (polled == null) {\nreturn false;\n}\ntry {\nif (stats) {\nexecutor.pendingTasks.decrement();\n}\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Running: {}"", polled);\n}\npolled.run();\n} catch (Exception e) {\nLOG.warn(""Error executing reactive work due to {}. This exception is ignored."", e.getMessage(), e);\n}\nreturn true;\n}\n""}","{""function"": "" boolean executeFromQueue()\n{\nfinal Runnable polled = queue != null ? queue.pollFirst() : null;\nif (polled == null) {\nreturn false;\n}\ntry {\nif (stats) {\nexecutor.pendingTasks.decrement();\n}\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Running: {}"", polled);\n}\npolled.run();\n} catch (Exception e) {\nLOG.warn(""Error executing reactive work due to {}. This exception is ignored."", e.getMessage(), e);\n}\nreturn true;\n}\n""}","java:S1181
"
"{""function"": ""protected void processStreamResultResponse(Exchange exchange, InputStream responseEntity, Map<String, String> headers, SalesforceException ex, AsyncCallback callback)\n{\ntry {\nfinal Message out = exchange.getOut();\nfinal Message in = exchange.getIn();\nout.copyFrom(in);\nout.getHeaders().putAll(headers);\nif (ex != null) {\nif (shouldReport(ex)) {\nexchange.setException(ex);\n} else {\nout.setBody(null);\n}\n} else if (responseEntity != null) {\nfinal AbstractQueryRecordsBase<?> response;\nClass<?> responseClass = exchange.getProperty(RESPONSE_CLASS, Class.class);\nresponse = (AbstractQueryRecordsBase<?>) objectMapper.readValue(responseEntity, responseClass);\nout.setHeader(HEADER_SALESFORCE_QUERY_RESULT_TOTAL_SIZE, response.getTotalSize());\nQueryResultIterator<?> iterator = new QueryResultIterator(objectMapper, responseClass, restClient, determineHeaders(exchange), response);\nout.setBody(iterator);\n}\n} catch (Exception e) {\nString msg = ""Error parsing JSON response: "" + e.getMessage();\nexchange.setException(new SalesforceException(msg, e));\n} finally {\nexchange.removeProperty(RESPONSE_CLASS);\nexchange.removeProperty(RESPONSE_CLASS_DEFERRED);\nexchange.removeProperty(RESPONSE_CLASS_PREFIX);\nexchange.removeProperty(RESPONSE_TYPE);\ntry {\nif (responseEntity != null) {\nresponseEntity.close();\n}\n} catch (IOException ignored) {\n}\ncallback.done(false);\n}\n}\n""}","{""function"": ""protected void processStreamResultResponse(Exchange exchange, InputStream responseEntity, Map<String, String> headers, SalesforceException ex, AsyncCallback callback)\n{\ntry {\nfinal Message out = exchange.getOut();\nfinal Message in = exchange.getIn();\nout.copyFrom(in);\nout.getHeaders().putAll(headers);\nif (ex != null) {\nif (shouldReport(ex)) {\nexchange.setException(ex);\n} else {\nout.setBody(null);\n}\n} else if (responseEntity != null) {\nfinal AbstractQueryRecordsBase<?> response;\nClass<?> responseClass = exchange.getProperty(RESPONSE_CLASS, Class.class);\nresponse = (AbstractQueryRecordsBase<?>) objectMapper.readValue(responseEntity, responseClass);\nout.setHeader(HEADER_SALESFORCE_QUERY_RESULT_TOTAL_SIZE, response.getTotalSize());\nQueryResultIterator<?> iterator = new QueryResultIterator(objectMapper, responseClass, restClient, determineHeaders(exchange), response);\nout.setBody(iterator);\n}\n} catch (Exception e) {\nString msg = ""Error parsing JSON response: "" + e.getMessage();\nexchange.setException(new SalesforceException(msg, e));\n} finally {\nexchange.removeProperty(RESPONSE_CLASS);\nexchange.removeProperty(RESPONSE_CLASS_DEFERRED);\nexchange.removeProperty(RESPONSE_CLASS_PREFIX);\nexchange.removeProperty(RESPONSE_TYPE);\ntry {\nif (responseEntity != null) {\nresponseEntity.close();\n}\n} catch (IOException ignored) {\n}\ncallback.done(false);\n}\n}\n""}","java:S3740
"
"{""function"": ""public T next()\n{\nif (iterator.hasNext()) {\nreturn iterator.next();\n} else if (!queryRecords.getDone()) {\nfinal CountDownLatch latch = new CountDownLatch(1);\nList<T> valueHolder = new ArrayList<>();\nrestClient.queryMore(queryRecords.getNextRecordsUrl(), requestHeaders, (response, headers, exception) -> {\nfinal AbstractQueryRecordsBase<T> qrb;\ntry {\nqueryRecords = objectMapper.readValue(response, responseClass);\niterator = queryRecords.getRecords().iterator();\nvalueHolder.add(iterator.next());\nlatch.countDown();\n} catch (IOException e) {\nthrow new RuntimeCamelException(e);\n} finally {\nif (response != null) {\ntry {\nresponse.close();\n} catch (IOException ignored) {\n}\n}\n}\n});\ntry {\nlatch.await();\nreturn valueHolder.get(0);\n} catch (InterruptedException e) {\nthrow new RuntimeCamelException(e);\n}\n} else {\nthrow new NoSuchElementException();\n}\n}\n""}","{""function"": ""public T next()\n{\nif (iterator.hasNext()) {\nreturn iterator.next();\n} else if (!queryRecords.getDone()) {\nfinal CountDownLatch latch = new CountDownLatch(1);\nList<T> valueHolder = new ArrayList<>();\nrestClient.queryMore(queryRecords.getNextRecordsUrl(), requestHeaders, (response, headers, exception) -> {\nfinal AbstractQueryRecordsBase<T> qrb;\ntry {\nqueryRecords = objectMapper.readValue(response, responseClass);\niterator = queryRecords.getRecords().iterator();\nvalueHolder.add(iterator.next());\nlatch.countDown();\n} catch (IOException e) {\nthrow new RuntimeCamelException(e);\n} finally {\nif (response != null) {\ntry {\nresponse.close();\n} catch (IOException ignored) {\n}\n}\n}\n});\ntry {\nlatch.await();\nreturn valueHolder.get(0);\n} catch (InterruptedException e) {\nthrow new RuntimeCamelException(e);\n}\n} else {\nthrow new NoSuchElementException();\n}\n}\n""}","java:S2293
"
"{""function"": ""public Object unmarshal(Exchange exchange, InputStream stream) throws Exception\n{\nList<Object> parquetObjects = new ArrayList<>();\nConfiguration conf = new Configuration();\nParquetInputStream parquetInputStream = new ParquetInputStream(DEFAULT_UUID_GENERATOR.generateUuid(), stream.readAllBytes());\ntry (ParquetReader reader = AvroParquetReader.builder(parquetInputStream).withDataModel(new ReflectData(unmarshalType.getClassLoader())).disableCompatibility().withConf(conf).build()) {\nObject pojo;\nwhile ((pojo = unmarshalType.cast(reader.read())) != null) {\nparquetObjects.add(pojo);\n}\n}\nreturn parquetObjects;\n}\n""}","{""function"": ""public Object unmarshal(Exchange exchange, InputStream stream) throws Exception\n{\nList<Object> parquetObjects = new ArrayList<>();\nConfiguration conf = new Configuration();\nParquetInputStream parquetInputStream = new ParquetInputStream(DEFAULT_UUID_GENERATOR.generateUuid(), stream.readAllBytes());\ntry (ParquetReader reader = AvroParquetReader.builder(parquetInputStream).withDataModel(new ReflectData(unmarshalType.getClassLoader())).disableCompatibility().withConf(conf).build()) {\nObject pojo;\nwhile ((pojo = unmarshalType.cast(reader.read())) != null) {\nparquetObjects.add(pojo);\n}\n}\nreturn parquetObjects;\n}\n""}","java:S1481
"
"{""function"": ""private void processSchemas(Map<Class<?>, ComponentModel> models, Class<?> classElement, UriEndpoint uriEndpoint, String label, String[] schemes, String[] titles, String[] extendsSchemes)\n{\nfor (int i = 0; i < schemes.length; i++) {\nfinal String alias = schemes[i];\nfinal String extendsAlias = i < extendsSchemes.length ? extendsSchemes[i] : extendsSchemes[0];\nString aTitle = i < titles.length ? titles[i] : titles[0];\nif (secureAlias(schemes[0], alias)) {\naTitle += "" (Secure)"";\n}\nfinal String aliasTitle = aTitle;\nComponentModel parentData = collectParentData(models, classElement);\nComponentModel model = writeJSonSchemeAndPropertyConfigurer(classElement, uriEndpoint, aliasTitle, alias, extendsAlias, label, schemes, parentData);\nmodels.put(classElement, model);\n}\n}\n""}","{""function"": ""private void processSchemas(Map<Class<?>, ComponentModel> models, Class<?> classElement, UriEndpoint uriEndpoint, String label, String[] schemes, String[] titles, String[] extendsSchemes)\n{\nfor (int i = 0; i < schemes.length; i++) {\nfinal String alias = schemes[i];\nfinal String extendsAlias = i < extendsSchemes.length ? extendsSchemes[i] : extendsSchemes[0];\nString aTitle = i < titles.length ? titles[i] : titles[0];\nif (secureAlias(schemes[0], alias)) {\naTitle += "" (Secure)"";\n}\nfinal String aliasTitle = aTitle;\nComponentModel parentData = collectParentData(models, classElement);\nComponentModel model = writeJSonSchemeAndPropertyConfigurer(classElement, uriEndpoint, aliasTitle, alias, extendsAlias, label, schemes, parentData);\nmodels.put(classElement, model);\n}\n}\n""}","java:S3740
"
"{""function"": ""private ArtifactModel<?> findOtherModel(String artifactId)\n{\nfor (String name : catalog.findOtherNames()) {\nOtherModel model = catalog.otherModel(name);\nif (model != null && model.getArtifactId().equals(artifactId)) {\nreturn model;\n}\n}\nreturn null;\n}\n""}","{""function"": ""private ArtifactModel<?> findOtherModel(String artifactId)\n{\nfor (String name : catalog.findOtherNames()) {\nOtherModel model = catalog.otherModel(name);\nif (model != null && model.getArtifactId().equals(artifactId)) {\nreturn model;\n}\n}\nreturn null;\n}\n""}","java:S3740
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S1192
"
"{""function"": ""private void closeLockFile()\n{\nif (lockFile != null) {\ntry {\nlockFile.close();\n} catch (Exception ignore) {\n}\nlockFile = null;\n}\n}\n""}","{""function"": ""private void closeLockFile()\n{\nif (lockFile != null) {\ntry {\nlockFile.close();\n} catch (Exception ignore) {\n}\nlockFile = null;\n}\n}\n""}","java:S1181
"
"{""function"": ""private static Map<String, Region> createStaticFields()\n{\nMap<String, Region> map = new HashMap<>();\nmap.put(""af-south-1"", AF_SOUTH_1);\nmap.put(""cn-north-4"", CN_NORTH_4);\nmap.put(""cn-north-1"", CN_NORTH_1);\nmap.put(""cn-east-2"", CN_EAST_2);\nmap.put(""cn-east-3"", CN_EAST_3);\nmap.put(""cn-south-1"", CN_SOUTH_1);\nmap.put(""cn-southwest-2"", CN_SOUTHWEST_2);\nmap.put(""ap-southeast-2"", AP_SOUTHEAST_2);\nmap.put(""ap-southeast-1"", AP_SOUTHEAST_1);\nmap.put(""ap-southeast-3"", AP_SOUTHEAST_3);\nreturn Collections.unmodifiableMap(map);\n}\n""}","{""function"": ""private static Map<String, Region> createStaticFields()\n{\nMap<String, Region> map = new HashMap<>();\nmap.put(""af-south-1"", AF_SOUTH_1);\nmap.put(""cn-north-4"", CN_NORTH_4);\nmap.put(""cn-north-1"", CN_NORTH_1);\nmap.put(""cn-east-2"", CN_EAST_2);\nmap.put(""cn-east-3"", CN_EAST_3);\nmap.put(""cn-south-1"", CN_SOUTH_1);\nmap.put(""cn-southwest-2"", CN_SOUTHWEST_2);\nmap.put(""ap-southeast-2"", AP_SOUTHEAST_2);\nmap.put(""ap-southeast-1"", AP_SOUTHEAST_1);\nmap.put(""ap-southeast-3"", AP_SOUTHEAST_3);\nreturn Collections.unmodifiableMap(map);\n}\n""}","java:S3740
"
"{""function"": ""public static BlobOperationResponse create(final Response<?> response)\n{\nreturn buildResponse(response, false);\n}\n""}","{""function"": ""public static BlobOperationResponse create(final Response<?> response)\n{\nreturn buildResponse(response, false);\n}\n""}","java:S3740
"
"{""function"": ""public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception\n{\nConfiguration conf = new Configuration();\nFileSystem.get(conf).setWriteChecksum(false);\nBufferedOutputStream parquetOutput = new BufferedOutputStream(stream);\nParquetOutputStream parquetOutputStream = new ParquetOutputStream(DEFAULT_UUID_GENERATOR.generateUuid(), parquetOutput);\nList<?> list = (List<?>) graph;\nSchema schema = null;\nGenericData model = null;\nif (unmarshalType != null) {\ntry {\nschema = ReflectData.AllowNull.get().getSchema(unmarshalType);\nmodel = ReflectData.get();\n} catch (AvroRuntimeException e) {\nLOG.warn(""Fall back to use GenericRecord instead of POJO for marshalling"", e);\n}\n}\nif (schema == null) {\nschema = GenericContainer.class.cast(list.get(0)).getSchema();\nmodel = GenericData.get();\n}\ntry (ParquetWriter<Object> writer = AvroParquetWriter.builder(parquetOutputStream).withSchema(schema).withDataModel(model).withConf(conf).withCompressionCodec(compressionCodecName).withWriteMode(OVERWRITE).build()) {\nfor (Object grapElem : list) {\nwriter.write(grapElem);\n}\n}\n}\n""}","{""function"": ""public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception\n{\nConfiguration conf = new Configuration();\nFileSystem.get(conf).setWriteChecksum(false);\nBufferedOutputStream parquetOutput = new BufferedOutputStream(stream);\nParquetOutputStream parquetOutputStream = new ParquetOutputStream(DEFAULT_UUID_GENERATOR.generateUuid(), parquetOutput);\nList<?> list = (List<?>) graph;\nSchema schema = null;\nGenericData model = null;\nif (unmarshalType != null) {\ntry {\nschema = ReflectData.AllowNull.get().getSchema(unmarshalType);\nmodel = ReflectData.get();\n} catch (AvroRuntimeException e) {\nLOG.warn(""Fall back to use GenericRecord instead of POJO for marshalling"", e);\n}\n}\nif (schema == null) {\nschema = GenericContainer.class.cast(list.get(0)).getSchema();\nmodel = GenericData.get();\n}\ntry (ParquetWriter<Object> writer = AvroParquetWriter.builder(parquetOutputStream).withSchema(schema).withDataModel(model).withConf(conf).withCompressionCodec(compressionCodecName).withWriteMode(OVERWRITE).build()) {\nfor (Object grapElem : list) {\nwriter.write(grapElem);\n}\n}\n}\n""}","java:S3740
"
"{""function"": ""public static BlobOperationResponse createWithEmptyBody(final Response<?> response)\n{\nreturn buildResponse(response, true);\n}\n""}","{""function"": ""public static BlobOperationResponse createWithEmptyBody(final Response<?> response)\n{\nreturn buildResponse(response, true);\n}\n""}","java:S3740
"
"{""function"": ""public boolean process(Exchange exchange, AsyncCallback callback)\n{\nString explicitMethodName = exchange.getIn().getHeader(BeanConstants.BEAN_METHOD_NAME, method, String.class);\nObject bean;\nBeanInfo beanInfo;\ntry {\nbean = beanHolder.getBean(exchange);\nbeanInfo = beanHolder.getBeanInfo(bean);\nif (beanInfo == null) {\nbeanInfo = beanHolder.getBeanInfo();\n}\n} catch (Exception e) {\nexchange.setException(e);\ncallback.done(true);\nreturn true;\n}\nif (allowProcessor(explicitMethodName, beanInfo)) {\nProcessor target = getProcessor();\nif (target == null) {\nboolean allowCache = scope == null || scope == BeanScope.Singleton;\nif (allowCache) {\nif (!lookupProcessorDone) {\nsynchronized (lock) {\nlookupProcessorDone = true;\ntarget = exchange.getContext().getTypeConverter().tryConvertTo(Processor.class, exchange, bean);\nprocessor = target;\n}\n}\n} else {\ntarget = exchange.getContext().getTypeConverter().tryConvertTo(Processor.class, exchange, bean);\n}\n}\nif (target != null) {\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Using a custom adapter as bean invocation: {}"", target);\n}\ntry {\ntarget.process(exchange);\n} catch (AssertionError | Exception e) {\nexchange.setException(e);\n}\ncallback.done(true);\nreturn true;\n}\n}\nMessage in = exchange.getIn();\nif (explicitMethodName != null) {\nin.setHeader(BeanConstants.BEAN_METHOD_NAME, explicitMethodName);\n}\nMethodInvocation invocation;\ntry {\ninvocation = beanInfo.createInvocation(bean, exchange);\n} catch (Exception e) {\nexchange.setException(e);\ncallback.done(true);\nreturn true;\n} finally {\nif (explicitMethodName != null) {\nin.removeHeader(Exchange.BEAN_METHOD_NAME);\n}\n}\nif (invocation == null) {\nexchange.setException(new IllegalStateException(""No method invocation could be created, no matching method could be found on: "" + bean));\ncallback.done(true);\nreturn true;\n}\nreturn invocation.proceed(callback);\n}\n""}","{""function"": ""public boolean process(Exchange exchange, AsyncCallback callback)\n{\nString explicitMethodName = exchange.getIn().getHeader(BeanConstants.BEAN_METHOD_NAME, method, String.class);\nObject bean;\nBeanInfo beanInfo;\ntry {\nbean = beanHolder.getBean(exchange);\nbeanInfo = beanHolder.getBeanInfo(bean);\nif (beanInfo == null) {\nbeanInfo = beanHolder.getBeanInfo();\n}\n} catch (Exception e) {\nexchange.setException(e);\ncallback.done(true);\nreturn true;\n}\nif (allowProcessor(explicitMethodName, beanInfo)) {\nProcessor target = getProcessor();\nif (target == null) {\nboolean allowCache = scope == null || scope == BeanScope.Singleton;\nif (allowCache) {\nif (!lookupProcessorDone) {\nsynchronized (lock) {\nlookupProcessorDone = true;\ntarget = exchange.getContext().getTypeConverter().tryConvertTo(Processor.class, exchange, bean);\nprocessor = target;\n}\n}\n} else {\ntarget = exchange.getContext().getTypeConverter().tryConvertTo(Processor.class, exchange, bean);\n}\n}\nif (target != null) {\nif (LOG.isTraceEnabled()) {\nLOG.trace(""Using a custom adapter as bean invocation: {}"", target);\n}\ntry {\ntarget.process(exchange);\n} catch (AssertionError | Exception e) {\nexchange.setException(e);\n}\ncallback.done(true);\nreturn true;\n}\n}\nMessage in = exchange.getIn();\nif (explicitMethodName != null) {\nin.setHeader(BeanConstants.BEAN_METHOD_NAME, explicitMethodName);\n}\nMethodInvocation invocation;\ntry {\ninvocation = beanInfo.createInvocation(bean, exchange);\n} catch (Exception e) {\nexchange.setException(e);\ncallback.done(true);\nreturn true;\n} finally {\nif (explicitMethodName != null) {\nin.removeHeader(Exchange.BEAN_METHOD_NAME);\n}\n}\nif (invocation == null) {\nexchange.setException(new IllegalStateException(""No method invocation could be created, no matching method could be found on: "" + bean));\ncallback.done(true);\nreturn true;\n}\nreturn invocation.proceed(callback);\n}\n""}","java:S1181
"
"{""function"": ""public String asEndpointUri(String scheme, Map<String, String> properties, boolean encode) throws URISyntaxException\n{\nreturn doAsEndpointUri(scheme, properties, ""&"", encode);\n}\n""}","{""function"": ""public String asEndpointUri(String scheme, Map<String, String> properties, boolean encode) throws URISyntaxException\n{\nreturn doAsEndpointUri(scheme, properties, ""&"", encode);\n}\n""}","java:S3776
"
"{""function"": ""private void printComponentDebug(Set<Path> json)\n{\nif (getLog().isDebugEnabled()) {\nfor (Path file : json) {\ngetLog().debug(""\t\t"" + asComponentName(file));\n}\n}\n}\n""}","{""function"": ""private void printComponentDebug(Set<Path> json)\n{\nif (getLog().isDebugEnabled()) {\nfor (Path file : json) {\ngetLog().debug(""\t\t"" + asComponentName(file));\n}\n}\n}\n""}","java:S3776
"
"{""function"": ""private boolean generateSetValue(String modelName, CodeBlock.Builder cb, FieldInfo field, Collection<AnnotationSpec> annotations)\n{\nif (hasAnnotation(field, XML_TRANSIENT_CLASS) && !hasAnnotation(field, DSL_PROPERTY_ANNOTATION)) {\nreturn false;\n}\nif (hasAnnotation(field, XML_ELEMENTS_ANNOTATION_CLASS)) {\nAnnotationInstance[] elements = field.annotation(XML_ELEMENTS_ANNOTATION_CLASS).value().asNestedArray();\nif (elements.length > 1) {\ncb.beginControlFlow(""case $S:"", StringHelper.camelCaseToDash(field.name()).toLowerCase(Locale.US));\ncb.addStatement(""$T val = asMappingNode(node)"", CN_MAPPING_NODE);\ncb.addStatement(""setProperties(target, val)"");\ncb.addStatement(""break"");\ncb.endControlFlow();\n}\nif (field.type().name().equals(LIST_CLASS)) {\nType parameterized = field.type().asParameterizedType().arguments().get(0);\nfor (AnnotationInstance element : elements) {\nAnnotationValue name = element.value(""name"");\nAnnotationValue type = element.value(""type"");\nif (name != null && type != null) {\nString fieldName = StringHelper.camelCaseToDash(name.asString()).toLowerCase(Locale.US);\nString paramType = parameterized.name().toString();\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""$L val = asType(node, $L.class)"", type.asString(), type.asString());\ncb.addStatement(""java.util.List<$L> existing = target.get$L()"", paramType, StringHelper.capitalize(field.name()));\ncb.beginControlFlow(""if (existing == null)"");\ncb.addStatement(""existing = new java.util.ArrayList<>()"");\ncb.endControlFlow();\ncb.addStatement(""existing.add(val)"");\ncb.addStatement(""target.set$L(existing)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""object"", type.asString(), isRequired(field)));\n}\n}\n} else {\nfor (AnnotationInstance element : elements) {\nAnnotationValue name = element.value(""name"");\nAnnotationValue type = element.value(""type"");\nif (name != null && type != null) {\nString fieldName = StringHelper.camelCaseToDash(name.asString()).toLowerCase(Locale.US);\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""$L val = asType(node, $L.class)"", type.asString(), type.asString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""object"", type.asString(), isRequired(field)));\n}\n}\n}\nreturn true;\n}\nif (hasAnnotation(field, XML_ELEMENT_REF_ANNOTATION_CLASS)) {\nif (field.type().name().equals(LIST_CLASS)) {\nType parameterized = field.type().asParameterizedType().arguments().get(0);\nClassInfo refType = view.getClassByName(parameterized.name());\nif (extendsType(refType, VERB_DEFINITION_CLASS)) {\nimplementsOrExtends(parameterized).forEach(ci -> {\nOptional<String> name = annotationValue(ci, XML_ROOT_ELEMENT_ANNOTATION_CLASS, ""name"").map(AnnotationValue::asString).filter(value -> !""##default"".equals(value));\nif (!name.isPresent()) {\nreturn;\n}\nString fieldName = name.get();\nString fieldType = ci.name().toString();\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""java.util.List<$L> existing = target.get$L()"", refType.name().toString(), StringHelper.capitalize(field.name()));\ncb.beginControlFlow(""if (existing == null)"");\ncb.addStatement(""existing = new java.util.ArrayList<>()"");\ncb.endControlFlow();\ncb.addStatement(""java.util.List val = asFlatList(node, $L.class)"", fieldType);\ncb.addStatement(""existing.addAll(val)"");\ncb.addStatement(""target.set$L(existing)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""array"", fieldType, false));\n});\nreturn true;\n}\n}\n}\nif (!hasAnnotation(field, XML_ATTRIBUTE_ANNOTATION_CLASS) && !hasAnnotation(field, XML_VALUE_ANNOTATION_CLASS) && !hasAnnotation(field, XML_ELEMENT_ANNOTATION_CLASS) && !hasAnnotation(field, XML_ELEMENT_REF_ANNOTATION_CLASS) && !hasAnnotation(field, XML_TRANSIENT_CLASS)) {\nreturn false;\n}\nfinal String fieldName = StringHelper.camelCaseToDash(fieldName(field)).toLowerCase(Locale.US);\nif (field.type().kind() == Type.Kind.PARAMETERIZED_TYPE) {\nParameterizedType parameterized = field.type().asParameterizedType();\nif (!parameterized.name().equals(CLASS_CLASS) && parameterized.arguments().size() == 1) {\nfinal Type parametrizedType = parameterized.arguments().get(0);\nif (parametrizedType.name().equals(PROCESSOR_DEFINITION_CLASS)) {\nreturn false;\n}\nswitch(parameterized.name().toString()) {\ncase ""java.util.List"":\nif (parametrizedType.name().equals(STRING_CLASS)) {\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""java.util.List<String> val = asStringList(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""array"", ""string"", isRequired(field)));\n} else {\nClassInfo ci = view.getClassByName(parametrizedType.name());\nString name = fieldName(ci, field);\ncb.beginControlFlow(""case $S:"", StringHelper.camelCaseToDash(name).toLowerCase(Locale.US));\ncb.addStatement(""java.util.List<$L> val = asFlatList(node, $L.class)"", parametrizedType.name().toString(), parametrizedType.name().toString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(StringHelper.camelCaseToDash(name).toLowerCase(Locale.US), ""array"", parametrizedType.name().toString(), isRequired(field)));\n}\nreturn true;\ncase ""java.util.Set"":\nif (parametrizedType.name().equals(STRING_CLASS)) {\ncb.beginControlFlow(""case $S:"", fieldName);\ncb.addStatement(""java.util.Set<String> val = asStringSet(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(fieldName, ""array"", ""string"", isRequired(field)));\n} else {\nClassInfo ci = view.getClassByName(parametrizedType.name());\nString name = fieldName(ci, field);\ncb.beginControlFlow(""case $S:"", StringHelper.camelCaseToDash(name).toLowerCase(Locale.US));\ncb.addStatement(""var val = asFlatSet(node, $L.class)"", parametrizedType.name().toString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\ncb.endControlFlow();\nannotations.add(yamlPropertyWithSubtype(StringHelper.camelCaseToDash(name).toLowerCase(Locale.US), ""array"", parametrizedType.name().toString(), isRequired(field)));\n}\nreturn true;\ndefault:\nthrow new UnsupportedOperationException(""Unable to handle field: "" + field.name() + "" with type: "" + field.type().name());\n}\n}\n}\nif (""expression"".equals(fieldName) && !expressionRequired(modelName)) {\nreturn true;\n}\ncb.beginControlFlow(""case $S:"", fieldName);\nClassInfo c = view.getClassByName(field.type().name());\nif (hasAnnotation(field, XML_JAVA_TYPE_ADAPTER_CLASS)) {\nOptional<AnnotationValue> adapter = annotationValue(field, XML_JAVA_TYPE_ADAPTER_CLASS, ""value"");\nif (adapter.isEmpty()) {\nreturn false;\n}\nString adapterClass = adapter.get().asClass().name().toString();\nClassInfo adapterClassInfo = view.getClassByName(adapter.get().asClass().name());\nif (adapterClassInfo.superClassType().kind() == Type.Kind.PARAMETERIZED_TYPE) {\nList<Type> arguments = adapterClassInfo.superClassType().asParameterizedType().arguments();\nif (arguments.size() == 2) {\nType type = arguments.get(1);\nif (type.name().toString().equals(""java.util.Map"")) {\ncb.addStatement(""$L val = asMap(node)"", field.type().name().toString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""object"", isRequired(field), isDeprecated(field)));\n}\n}\n}\n} else if (c != null && c.isEnum()) {\ncb.addStatement(""target.set$L(asEnum(node, $L.class))"", StringHelper.capitalize(field.name()), field.type().name().toString());\ncb.addStatement(""break"");\nSet<String> values = new TreeSet<>();\nList<FieldInfo> fields = c.fields();\nfor (int i = 1; i < fields.size(); i++) {\nFieldInfo f = fields.get(i);\nif (f.isEnumConstant()) {\nvalues.add(f.name());\n}\n}\nAnnotationSpec.Builder builder = AnnotationSpec.builder(CN_YAML_PROPERTY);\nbuilder.addMember(""name"", ""$S"", fieldName);\nbuilder.addMember(""type"", ""$S"", ""enum:"" + String.join("","", values));\nif (isRequired(field)) {\nbuilder.addMember(""required"", ""$L"", isRequired(field));\n}\nannotations.add(builder.build());\n} else if (isEnum(field)) {\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nAnnotationSpec.Builder builder = AnnotationSpec.builder(CN_YAML_PROPERTY);\nbuilder.addMember(""name"", ""$S"", fieldName);\nbuilder.addMember(""type"", ""$S"", ""enum:"" + getEnums(field));\nif (isRequired(field)) {\nbuilder.addMember(""required"", ""$L"", isRequired(field));\n}\nannotations.add(builder.build());\n} else {\nswitch(field.type().name().toString()) {\ncase ""[B"":\ncb.addStatement(""byte[] val = asByteArray(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlPropertyWithFormat(fieldName, ""string"", ""binary"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""Z"":\ncase ""boolean"":\ncb.addStatement(""boolean val = asBoolean(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""boolean"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""I"":\ncase ""int"":\ncb.addStatement(""int val = asInt(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""J"":\ncase ""long"":\ncb.addStatement(""long val = asLong(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""D"":\ncase ""double"":\ncb.addStatement(""double val = asDouble(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""java.lang.String"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nString javaType = annotationValue(field, METADATA_ANNOTATION_CLASS, ""javaType"").map(AnnotationValue::asString).orElse(""string"");\nswitch(javaType) {\ncase ""java.lang.Boolean"":\nannotations.add(yamlProperty(fieldName, ""boolean"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""java.lang.Integer"":\ncase ""java.lang.Short"":\ncase ""java.lang.Long"":\ncase ""java.lang.Float"":\ncase ""java.lang.Double"":\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ndefault:\nannotations.add(yamlProperty(fieldName, ""string"", isRequired(field), isDeprecated(field)));\n}\nbreak;\ncase ""java.lang.Class"":\ncb.addStatement(""java.lang.Class<?> val = asClass(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""string"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""[Ljava.lang.Class;"":\ncb.addStatement(""java.lang.Class<?>[] val = asClassArray(node)"");\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nbreak;\ncase ""java.lang.Integer"":\ncase ""java.lang.Short"":\ncase ""java.lang.Long"":\ncase ""java.lang.Float"":\ncase ""java.lang.Double"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.set$L($L.valueOf(val))"", StringHelper.capitalize(field.name()), field.type().name().toString());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""number"", isRequired(field), isDeprecated(field)));\nbreak;\ncase ""java.lang.Boolean"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.set$L($L.valueOf(val))"", StringHelper.capitalize(field.name()), field.type().name().toString());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(fieldName, ""boolean"", isRequired(field), isDeprecated(field)));\nbreak;\ndefault:\nif (field.type().kind() == Type.Kind.CLASS) {\ncb.addStatement(""$L val = asType(node, $L.class)"", field.type().name().toString(), field.type().name().toString());\ncb.addStatement(""target.set$L(val)"", StringHelper.capitalize(field.name()));\ncb.addStatement(""break"");\nannotations.add(yamlPropertyWithSubtype(fieldName, ""object"", field.type().name().toString(), isRequired(field)));\n} else {\nthrow new UnsupportedOperationException(""Unable to handle field: "" + field.name() + "" with type: "" + field.type().name());\n}\n}\n}\ncb.endControlFlow();\nreturn true;\n}\n""}","{""function"": ""private boolean generateSetValue(CodeBlock.Builder cb, MethodInfo method, Collection<AnnotationSpec> annotations)\n{\nfinal String name = StringHelper.camelCaseToDash(method.name()).toLowerCase(Locale.US).substring(4);\nfinal Type parameterType = method.parameterTypes().get(0);\ncb.beginControlFlow(""case $S:"", name);\nClassInfo c = view.getClassByName(parameterType.name());\nif (c != null && c.isEnum()) {\ncb.addStatement(""target.$L(asEnum(node, $L.class))"", method.name(), parameterType);\ncb.addStatement(""break"");\nSet<String> values = new TreeSet<>();\nList<FieldInfo> fields = c.fields();\nfor (int i = 1; i < fields.size(); i++) {\nFieldInfo f = fields.get(i);\nif (f.isEnumConstant()) {\nvalues.add(f.name());\n}\n}\nAnnotationSpec.Builder builder = AnnotationSpec.builder(CN_YAML_PROPERTY);\nbuilder.addMember(""name"", ""$S"", name);\nbuilder.addMember(""type"", ""$S"", ""enum:"" + String.join("","", values));\nannotations.add(builder.build());\n} else {\nswitch(parameterType.name().toString()) {\ncase ""[B"":\ncb.addStatement(""byte[] val = asByteArray(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlPropertyWithFormat(name, ""string"", ""binary""));\nbreak;\ncase ""Z"":\ncase ""boolean"":\ncb.addStatement(""boolean val = asBoolean(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""boolean""));\nbreak;\ncase ""I"":\ncase ""int"":\ncb.addStatement(""int val = asInt(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""number""));\nbreak;\ncase ""J"":\ncase ""long"":\ncb.addStatement(""long val = asLong(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""number""));\nbreak;\ncase ""D"":\ncase ""double"":\ncb.addStatement(""double val = asDouble(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""number""));\nbreak;\ncase ""java.lang.String"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""string""));\nbreak;\ncase ""java.lang.Class"":\ncb.addStatement(""java.lang.Class<?> val = asClass(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""string""));\nbreak;\ncase ""[Ljava.lang.Class;"":\ncb.addStatement(""java.lang.Class<?>[] val = asClassArray(node)"");\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nbreak;\ncase ""java.lang.Integer"":\ncase ""java.lang.Short"":\ncase ""java.lang.Long"":\ncase ""java.lang.Float"":\ncase ""java.lang.Double"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.$L($L.valueOf(val))"", method.name(), parameterType.toString());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""number""));\nbreak;\ncase ""java.lang.Boolean"":\ncb.addStatement(""String val = asText(node)"");\ncb.addStatement(""target.$L($L.valueOf(val))"", method.name(), parameterType.toString());\ncb.addStatement(""break"");\nannotations.add(yamlProperty(name, ""boolean""));\nbreak;\ndefault:\nif (parameterType.kind() == Type.Kind.CLASS) {\ncb.addStatement(""$L val = asType(node, $L.class)"", parameterType.toString(), parameterType.toString());\ncb.addStatement(""target.$L(val)"", method.name());\ncb.addStatement(""break"");\nannotations.add(yamlPropertyWithSubtype(name, ""object"", parameterType.toString()));\n} else {\nthrow new UnsupportedOperationException(""Unable to handle method: "" + method.name() + "" with type: "" + parameterType);\n}\n}\n}\ncb.endControlFlow();\nreturn true;\n}\n""}","java:S1192
"
"{""function"": ""public boolean process(Exchange exchange, AsyncCallback callback)\n{\nexchange.setProperty(ExchangePropertyKey.TRY_ROUTE_BLOCK, true);\nCircuitBreakerFallbackTask fallbackTask = null;\nCircuitBreakerTask task = null;\ntry {\ntask = (CircuitBreakerTask) taskFactory.acquire(exchange, callback);\nFaultToleranceStrategy<?> target = circuitBreaker;\nif (config.isBulkheadEnabled()) {\ntarget = new FutureThreadPoolBulkhead(target, ""bulkhead"", config.getBulkheadMaxConcurrentCalls(), config.getBulkheadWaitingTaskQueue());\n}\nif (config.isTimeoutEnabled()) {\nTimeoutWatcher watcher = new ScheduledExecutorTimeoutWatcher(scheduledExecutorService);\ntarget = new Timeout<>(target, ""timeout"", config.getTimeoutDuration(), watcher);\n}\nif (fallbackProcessor != null) {\nfallbackTask = (CircuitBreakerFallbackTask) fallbackTaskFactory.acquire(exchange, callback);\nfinal CircuitBreakerFallbackTask fFallbackTask = fallbackTask;\ntarget = new Fallback(target, ""fallback"", fallbackContext -> {\nexchange.setException(fallbackContext.failure);\nreturn fFallbackTask.call();\n}, ExceptionDecision.ALWAYS_FAILURE);\n}\ntarget.apply(new InvocationContext(task));\n} catch (CircuitBreakerOpenException e) {\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_SUCCESSFUL_EXECUTION, false);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_FROM_FALLBACK, false);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_SHORT_CIRCUITED, true);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_REJECTED, true);\n} catch (Exception e) {\nexchange.setException(e);\n} finally {\nif (task != null) {\ntaskFactory.release(task);\n}\nif (fallbackTask != null) {\nfallbackTaskFactory.release(fallbackTask);\n}\n}\nexchange.removeProperty(ExchangePropertyKey.TRY_ROUTE_BLOCK);\ncallback.done(true);\nreturn true;\n}\n""}","{""function"": ""public boolean process(Exchange exchange, AsyncCallback callback)\n{\nexchange.setProperty(ExchangePropertyKey.TRY_ROUTE_BLOCK, true);\nCircuitBreakerFallbackTask fallbackTask = null;\nCircuitBreakerTask task = null;\ntry {\ntask = (CircuitBreakerTask) taskFactory.acquire(exchange, callback);\nFaultToleranceStrategy<?> target = circuitBreaker;\nif (config.isBulkheadEnabled()) {\ntarget = new FutureThreadPoolBulkhead(target, ""bulkhead"", config.getBulkheadMaxConcurrentCalls(), config.getBulkheadWaitingTaskQueue());\n}\nif (config.isTimeoutEnabled()) {\nTimeoutWatcher watcher = new ScheduledExecutorTimeoutWatcher(scheduledExecutorService);\ntarget = new Timeout<>(target, ""timeout"", config.getTimeoutDuration(), watcher);\n}\nif (fallbackProcessor != null) {\nfallbackTask = (CircuitBreakerFallbackTask) fallbackTaskFactory.acquire(exchange, callback);\nfinal CircuitBreakerFallbackTask fFallbackTask = fallbackTask;\ntarget = new Fallback(target, ""fallback"", fallbackContext -> {\nexchange.setException(fallbackContext.failure);\nreturn fFallbackTask.call();\n}, ExceptionDecision.ALWAYS_FAILURE);\n}\ntarget.apply(new InvocationContext(task));\n} catch (CircuitBreakerOpenException e) {\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_SUCCESSFUL_EXECUTION, false);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_FROM_FALLBACK, false);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_SHORT_CIRCUITED, true);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_REJECTED, true);\n} catch (Exception e) {\nexchange.setException(e);\n} finally {\nif (task != null) {\ntaskFactory.release(task);\n}\nif (fallbackTask != null) {\nfallbackTaskFactory.release(fallbackTask);\n}\n}\nexchange.removeProperty(ExchangePropertyKey.TRY_ROUTE_BLOCK);\ncallback.done(true);\nreturn true;\n}\n""}","java:S3740
"
"{""function"": ""public LanguageValidationResult validateLanguageExpression(ClassLoader classLoader, String language, String text)\n{\nif (""simple"".equals(language)) {\nreturn doValidateSimple(classLoader, text, false);\n} else {\nreturn doValidateLanguage(classLoader, language, text, false);\n}\n}\n""}","{""function"": ""public LanguageValidationResult validateLanguageExpression(ClassLoader classLoader, String language, String text)\n{\nif (""simple"".equals(language)) {\nreturn doValidateSimple(classLoader, text, false);\n} else {\nreturn doValidateLanguage(classLoader, language, text, false);\n}\n}\n""}","java:S3776
"
"{""function"": ""public Object unmarshal(Exchange exchange, InputStream stream) throws Exception\n{\nList<Object> parquetObjects = new ArrayList<>();\nConfiguration conf = new Configuration();\nParquetInputStream parquetInputStream = new ParquetInputStream(DEFAULT_UUID_GENERATOR.generateUuid(), stream.readAllBytes());\nClass<?> type = GenericRecord.class;\nGenericData model = GenericData.get();\nif (unmarshalType != null) {\ntype = unmarshalType;\nmodel = new ReflectData(unmarshalType.getClassLoader());\n}\ntry (ParquetReader<?> reader = AvroParquetReader.builder(parquetInputStream).withDataModel(model).disableCompatibility().withConf(conf).build()) {\nObject pojo;\nwhile ((pojo = type.cast(reader.read())) != null) {\nparquetObjects.add(pojo);\n}\n}\nreturn parquetObjects;\n}\n""}","{""function"": ""public Object unmarshal(Exchange exchange, InputStream stream) throws Exception\n{\nList<Object> parquetObjects = new ArrayList<>();\nConfiguration conf = new Configuration();\nParquetInputStream parquetInputStream = new ParquetInputStream(DEFAULT_UUID_GENERATOR.generateUuid(), stream.readAllBytes());\nClass<?> type = GenericRecord.class;\nGenericData model = GenericData.get();\nif (unmarshalType != null) {\ntype = unmarshalType;\nmodel = new ReflectData(unmarshalType.getClassLoader());\n}\ntry (ParquetReader<?> reader = AvroParquetReader.builder(parquetInputStream).withDataModel(model).disableCompatibility().withConf(conf).build()) {\nObject pojo;\nwhile ((pojo = type.cast(reader.read())) != null) {\nparquetObjects.add(pojo);\n}\n}\nreturn parquetObjects;\n}\n""}","java:S3740
"
"{""function"": ""public AbstractMessageListenerContainer createListenerContainer(SpringRabbitMQEndpoint endpoint)\n{\nAbstractMessageListenerContainer listener;\nif (endpoint.getMessageListenerContainerType().equalsIgnoreCase(SIMPLE_MESSAGE_LISTENER_CONTAINER)) {\nlistener = new CamelSimpleMessageListenerContainer(endpoint);\n} else {\nlistener = new CamelDirectMessageListenerContainer(endpoint);\n}\nif (endpoint.getQueues() != null) {\nlistener.setQueueNames(endpoint.getQueues().split("",""));\n}\nlistener.setAcknowledgeMode(endpoint.getAcknowledgeMode());\nlistener.setExclusive(endpoint.isExclusive());\nlistener.setNoLocal(endpoint.isNoLocal());\nAmqpAdmin admin = endpoint.getComponent().getAmqpAdmin();\nif (endpoint.isAutoDeclare() && admin == null) {\nRabbitAdmin ra = new RabbitAdmin(endpoint.getConnectionFactory());\nra.setIgnoreDeclarationExceptions(endpoint.getComponent().isIgnoreDeclarationExceptions());\nadmin = ra;\n}\nlistener.setAutoDeclare(endpoint.isAutoDeclare());\nlistener.setAmqpAdmin(admin);\nif (endpoint.getComponent().getErrorHandler() != null) {\nlistener.setErrorHandler(endpoint.getComponent().getErrorHandler());\n}\nlistener.setPrefetchCount(endpoint.getPrefetchCount());\nlistener.setShutdownTimeout(endpoint.getComponent().getShutdownTimeout());\nlistener.setConsumerArguments(endpoint.getConsumerArgs());\nif (endpoint.getRetry() != null) {\nlistener.setAdviceChain(endpoint.getRetry());\n} else {\nRetryInterceptorBuilder<?, ?> builder = RetryInterceptorBuilder.stateless();\nif (endpoint.getMaximumRetryAttempts() > 0) {\nbuilder.retryPolicy(new SimpleRetryPolicy(endpoint.getMaximumRetryAttempts()));\n}\nif (endpoint.getRetryDelay() > 0) {\nFixedBackOffPolicy delay = new FixedBackOffPolicy();\ndelay.setBackOffPeriod(endpoint.getRetryDelay());\nbuilder.backOffPolicy(delay);\n}\nif (endpoint.isRejectAndDontRequeue()) {\nbuilder.recoverer(new RejectAndDontRequeueRecoverer());\n}\nlistener.setAdviceChain(builder.build());\n}\nreturn listener;\n}\n""}","{""function"": ""public AbstractMessageListenerContainer createListenerContainer(SpringRabbitMQEndpoint endpoint)\n{\nAbstractMessageListenerContainer listener;\nif (endpoint.getMessageListenerContainerType().equalsIgnoreCase(SIMPLE_MESSAGE_LISTENER_CONTAINER)) {\nlistener = new CamelSimpleMessageListenerContainer(endpoint);\n} else {\nlistener = new CamelDirectMessageListenerContainer(endpoint);\n}\nif (endpoint.getQueues() != null) {\nlistener.setQueueNames(endpoint.getQueues().split("",""));\n}\nlistener.setAcknowledgeMode(endpoint.getAcknowledgeMode());\nlistener.setExclusive(endpoint.isExclusive());\nlistener.setNoLocal(endpoint.isNoLocal());\nAmqpAdmin admin = endpoint.getComponent().getAmqpAdmin();\nif (endpoint.isAutoDeclare() && admin == null) {\nRabbitAdmin ra = new RabbitAdmin(endpoint.getConnectionFactory());\nra.setIgnoreDeclarationExceptions(endpoint.getComponent().isIgnoreDeclarationExceptions());\nadmin = ra;\n}\nlistener.setAutoDeclare(endpoint.isAutoDeclare());\nlistener.setAmqpAdmin(admin);\nif (endpoint.getComponent().getErrorHandler() != null) {\nlistener.setErrorHandler(endpoint.getComponent().getErrorHandler());\n}\nlistener.setPrefetchCount(endpoint.getPrefetchCount());\nlistener.setShutdownTimeout(endpoint.getComponent().getShutdownTimeout());\nlistener.setConsumerArguments(endpoint.getConsumerArgs());\nif (endpoint.getRetry() != null) {\nlistener.setAdviceChain(endpoint.getRetry());\n} else {\nRetryInterceptorBuilder<?, ?> builder = RetryInterceptorBuilder.stateless();\nif (endpoint.getMaximumRetryAttempts() > 0) {\nbuilder.retryPolicy(new SimpleRetryPolicy(endpoint.getMaximumRetryAttempts()));\n}\nif (endpoint.getRetryDelay() > 0) {\nFixedBackOffPolicy delay = new FixedBackOffPolicy();\ndelay.setBackOffPeriod(endpoint.getRetryDelay());\nbuilder.backOffPolicy(delay);\n}\nif (endpoint.isRejectAndDontRequeue()) {\nbuilder.recoverer(new RejectAndDontRequeueRecoverer());\n}\nlistener.setAdviceChain(builder.build());\n}\nreturn listener;\n}\n""}","java:S3740
"
"{""function"": ""private static DefaultHandler getDefaultHandler(String rootNames, String forceNamespace, Document doc, Stack<Element> elementStack, StringBuilder textBuffer)\n{\nreturn new DefaultHandler() {\n\nprivate Locator locator;\n\nprivate boolean found;\n\nprivate final Map<String, String> localNs = new HashMap<>();\n\nprivate final Map<String, String> anonymousNs = new LinkedHashMap<>();\n\n@Override\npublic void setDocumentLocator(final Locator locator) {\nthis.locator = locator;\nthis.found = rootNames == null;\n}\n\nprivate boolean isRootName(String qName) {\nfor (String root : rootNames.split("","")) {\nif (qName.equals(root)) {\nreturn true;\n}\n}\nreturn false;\n}\n\n@Override\npublic void startElement(final String uri, final String localName, final String qName, final Attributes attributes) {\naddTextIfNeeded();\nif (rootNames != null && !found) {\nif (isRootName(qName)) {\nfound = true;\n}\n}\nif (found) {\nElement el;\nif (forceNamespace != null) {\nel = doc.createElementNS(forceNamespace, qName);\n} else {\nString ns = null;\nint pos = qName.indexOf(':');\nif (pos > 0) {\nif (attributes != null) {\nString prefix = qName.substring(0, pos);\nns = attributes.getValue(""xmlns:"" + prefix);\nif (ns != null) {\nlocalNs.put(prefix, ns);\n} else {\nns = localNs.get(prefix);\n}\n}\n} else {\nif (attributes != null) {\nns = attributes.getValue(""xmlns"");\nif (ns != null) {\nanonymousNs.put(qName, ns);\n} else if (!anonymousNs.isEmpty()) {\nList<String> values = new ArrayList<>(anonymousNs.values());\nns = values.get(values.size() - 1);\n}\n}\n}\nif (ns != null) {\nel = doc.createElementNS(ns, qName);\n} else {\nel = doc.createElement(qName);\n}\n}\nif (attributes != null) {\nfor (int i = 0; i < attributes.getLength(); i++) {\nel.setAttribute(attributes.getQName(i), attributes.getValue(i));\n}\n}\nString ln = String.valueOf(this.locator.getLineNumber());\nString cn = String.valueOf(this.locator.getColumnNumber());\nel.setUserData(LINE_NUMBER, ln, null);\nel.setUserData(COLUMN_NUMBER, cn, null);\nelementStack.push(el);\n}\n}\n\n@Override\npublic void endElement(final String uri, final String localName, final String qName) {\nif (!found) {\nreturn;\n}\naddTextIfNeeded();\nfinal Element closedEl = elementStack.isEmpty() ? null : elementStack.pop();\nif (closedEl != null) {\nif (elementStack.isEmpty()) {\ndoc.appendChild(closedEl);\n} else {\nfinal Element parentEl = elementStack.peek();\nparentEl.appendChild(closedEl);\n}\nString ln = String.valueOf(this.locator.getLineNumber());\nString cn = String.valueOf(this.locator.getColumnNumber());\nclosedEl.setUserData(LINE_NUMBER_END, ln, null);\nclosedEl.setUserData(COLUMN_NUMBER_END, cn, null);\n}\nanonymousNs.remove(qName);\n}\n\n@Override\npublic void characters(final char[] ch, final int start, final int length) {\ntextBuffer.append(ch, start, length);\n}\n\n@Override\npublic InputSource resolveEntity(String publicId, String systemId) {\nreturn new InputSource(new StringReader(""""));\n}\n\nprivate void addTextIfNeeded() {\nif (textBuffer.length() > 0) {\nfinal Element el = elementStack.isEmpty() ? null : elementStack.peek();\nif (el != null) {\nfinal Node textNode = doc.createTextNode(textBuffer.toString());\nel.appendChild(textNode);\ntextBuffer.delete(0, textBuffer.length());\n}\n}\n}\n};\n}\n""}","{""function"": ""private static DefaultHandler getDefaultHandler(String rootNames, String forceNamespace, Document doc, Stack<Element> elementStack, StringBuilder textBuffer)\n{\nreturn new DefaultHandler() {\n\nprivate Locator locator;\n\nprivate boolean found;\n\nprivate final Map<String, String> localNs = new HashMap<>();\n\nprivate final Map<String, String> anonymousNs = new LinkedHashMap<>();\n\n@Override\npublic void setDocumentLocator(final Locator locator) {\nthis.locator = locator;\nthis.found = rootNames == null;\n}\n\nprivate boolean isRootName(String qName) {\nfor (String root : rootNames.split("","")) {\nif (qName.equals(root)) {\nreturn true;\n}\n}\nreturn false;\n}\n\n@Override\npublic void startElement(final String uri, final String localName, final String qName, final Attributes attributes) {\naddTextIfNeeded();\nif (rootNames != null && !found) {\nif (isRootName(qName)) {\nfound = true;\n}\n}\nif (found) {\nElement el;\nif (forceNamespace != null) {\nel = doc.createElementNS(forceNamespace, qName);\n} else {\nString ns = null;\nint pos = qName.indexOf(':');\nif (pos > 0) {\nif (attributes != null) {\nString prefix = qName.substring(0, pos);\nns = attributes.getValue(""xmlns:"" + prefix);\nif (ns != null) {\nlocalNs.put(prefix, ns);\n} else {\nns = localNs.get(prefix);\n}\n}\n} else {\nif (attributes != null) {\nns = attributes.getValue(""xmlns"");\nif (ns != null) {\nanonymousNs.put(qName, ns);\n} else if (!anonymousNs.isEmpty()) {\nList<String> values = new ArrayList<>(anonymousNs.values());\nns = values.get(values.size() - 1);\n}\n}\n}\nif (ns != null) {\nel = doc.createElementNS(ns, qName);\n} else {\nel = doc.createElement(qName);\n}\n}\nif (attributes != null) {\nfor (int i = 0; i < attributes.getLength(); i++) {\nel.setAttribute(attributes.getQName(i), attributes.getValue(i));\n}\n}\nString ln = String.valueOf(this.locator.getLineNumber());\nString cn = String.valueOf(this.locator.getColumnNumber());\nel.setUserData(LINE_NUMBER, ln, null);\nel.setUserData(COLUMN_NUMBER, cn, null);\nelementStack.push(el);\n}\n}\n\n@Override\npublic void endElement(final String uri, final String localName, final String qName) {\nif (!found) {\nreturn;\n}\naddTextIfNeeded();\nfinal Element closedEl = elementStack.isEmpty() ? null : elementStack.pop();\nif (closedEl != null) {\nif (elementStack.isEmpty()) {\ndoc.appendChild(closedEl);\n} else {\nfinal Element parentEl = elementStack.peek();\nparentEl.appendChild(closedEl);\n}\nString ln = String.valueOf(this.locator.getLineNumber());\nString cn = String.valueOf(this.locator.getColumnNumber());\nclosedEl.setUserData(LINE_NUMBER_END, ln, null);\nclosedEl.setUserData(COLUMN_NUMBER_END, cn, null);\n}\nanonymousNs.remove(qName);\n}\n\n@Override\npublic void characters(final char[] ch, final int start, final int length) {\ntextBuffer.append(ch, start, length);\n}\n\n@Override\npublic InputSource resolveEntity(String publicId, String systemId) {\nreturn new InputSource(new StringReader(""""));\n}\n\nprivate void addTextIfNeeded() {\nif (textBuffer.length() > 0) {\nfinal Element el = elementStack.isEmpty() ? null : elementStack.peek();\nif (el != null) {\nfinal Node textNode = doc.createTextNode(textBuffer.toString());\nel.appendChild(textNode);\ntextBuffer.delete(0, textBuffer.length());\n}\n}\n}\n};\n}\n""}","java:S1197
"
"{""function"": ""public CircuitBreaker<?> getCircuitBreaker()\n{\nreturn circuitBreaker;\n}\n""}","{""function"": ""public CircuitBreaker<?> getCircuitBreaker()\n{\nreturn circuitBreaker;\n}\n""}","java:S3740
"
"{""function"": "" void refresh(final RefreshMode mode) throws Exception\n{\ntry {\nensurePath.ensure(client.getZookeeperClient());\nList<String> children = client.getChildren().usingWatcher(childrenWatcher).forPath(path);\nchildren.sort((String left, String right) -> left.compareTo(right));\nprocessChildren(children, mode);\n} catch (Exception e) {\nhandleException(e);\n}\n}\n""}","{""function"": "" void refresh(final RefreshMode mode) throws Exception\n{\ntry {\nensurePath.ensure(client.getZookeeperClient());\nList<String> children = client.getChildren().usingWatcher(childrenWatcher).forPath(path);\nchildren.sort((String left, String right) -> left.compareTo(right));\nprocessChildren(children, mode);\n} catch (Exception e) {\nhandleException(e);\n}\n}\n""}","java:S1612
"
"{""function"": ""public void setCircuitBreaker(CircuitBreaker<?> circuitBreaker)\n{\nthis.circuitBreaker = circuitBreaker;\n}\n""}","{""function"": ""public void setCircuitBreaker(CircuitBreaker<?> circuitBreaker)\n{\nthis.circuitBreaker = circuitBreaker;\n}\n""}","java:S3740
"
"{""function"": ""public boolean process(Exchange exchange, AsyncCallback callback)\n{\nexchange.setProperty(ExchangePropertyKey.TRY_ROUTE_BLOCK, true);\nCircuitBreakerFallbackTask fallbackTask = null;\nCircuitBreakerTask task = null;\ntry {\ntask = (CircuitBreakerTask) taskFactory.acquire(exchange, callback);\nFaultToleranceStrategy<?> target = circuitBreaker;\nif (config.isBulkheadEnabled()) {\ntarget = new FutureThreadPoolBulkhead(target, ""bulkhead"", config.getBulkheadMaxConcurrentCalls(), config.getBulkheadWaitingTaskQueue());\n}\nif (config.isTimeoutEnabled()) {\nTimeoutWatcher watcher = new ScheduledExecutorTimeoutWatcher(scheduledExecutorService);\ntarget = new Timeout<>(target, ""timeout"", config.getTimeoutDuration(), watcher);\n}\nif (fallbackProcessor != null) {\nfallbackTask = (CircuitBreakerFallbackTask) fallbackTaskFactory.acquire(exchange, callback);\nfinal CircuitBreakerFallbackTask fFallbackTask = fallbackTask;\ntarget = new Fallback(target, ""fallback"", fallbackContext -> {\nexchange.setException(fallbackContext.failure);\nreturn fFallbackTask.call();\n}, ExceptionDecision.ALWAYS_FAILURE);\n}\ntarget.apply(new InvocationContext(task));\n} catch (CircuitBreakerOpenException e) {\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_SUCCESSFUL_EXECUTION, false);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_FROM_FALLBACK, false);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_SHORT_CIRCUITED, true);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_REJECTED, true);\n} catch (Exception e) {\nexchange.setException(e);\n} finally {\nif (task != null) {\ntaskFactory.release(task);\n}\nif (fallbackTask != null) {\nfallbackTaskFactory.release(fallbackTask);\n}\n}\nexchange.removeProperty(ExchangePropertyKey.TRY_ROUTE_BLOCK);\ncallback.done(true);\nreturn true;\n}\n""}","{""function"": ""public boolean process(Exchange exchange, AsyncCallback callback)\n{\nexchange.setProperty(ExchangePropertyKey.TRY_ROUTE_BLOCK, true);\nCircuitBreakerFallbackTask fallbackTask = null;\nCircuitBreakerTask task = null;\ntry {\ntask = (CircuitBreakerTask) taskFactory.acquire(exchange, callback);\nFaultToleranceStrategy<?> target = circuitBreaker;\nif (config.isBulkheadEnabled()) {\ntarget = new FutureThreadPoolBulkhead(target, ""bulkhead"", config.getBulkheadMaxConcurrentCalls(), config.getBulkheadWaitingTaskQueue());\n}\nif (config.isTimeoutEnabled()) {\nTimeoutWatcher watcher = new ScheduledExecutorTimeoutWatcher(scheduledExecutorService);\ntarget = new Timeout<>(target, ""timeout"", config.getTimeoutDuration(), watcher);\n}\nif (fallbackProcessor != null) {\nfallbackTask = (CircuitBreakerFallbackTask) fallbackTaskFactory.acquire(exchange, callback);\nfinal CircuitBreakerFallbackTask fFallbackTask = fallbackTask;\ntarget = new Fallback(target, ""fallback"", fallbackContext -> {\nexchange.setException(fallbackContext.failure);\nreturn fFallbackTask.call();\n}, ExceptionDecision.ALWAYS_FAILURE);\n}\ntarget.apply(new InvocationContext(task));\n} catch (CircuitBreakerOpenException e) {\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_SUCCESSFUL_EXECUTION, false);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_FROM_FALLBACK, false);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_SHORT_CIRCUITED, true);\nexchange.setProperty(ExchangePropertyKey.CIRCUIT_BREAKER_RESPONSE_REJECTED, true);\n} catch (Exception e) {\nexchange.setException(e);\n} finally {\nif (task != null) {\ntaskFactory.release(task);\n}\nif (fallbackTask != null) {\nfallbackTaskFactory.release(fallbackTask);\n}\n}\nexchange.removeProperty(ExchangePropertyKey.TRY_ROUTE_BLOCK);\ncallback.done(true);\nreturn true;\n}\n""}","java:S3740
"
"{""function"": ""public Processor createProcessor() throws Exception\n{\nProcessor processor = createChildProcessor(true);\nProcessor fallback = null;\nif (definition.getOnFallback() != null) {\nfallback = createProcessor(definition.getOnFallback());\n}\nboolean fallbackViaNetwork = definition.getOnFallback() != null && parseBoolean(definition.getOnFallback().getFallbackViaNetwork(), false);\nif (fallbackViaNetwork) {\nthrow new UnsupportedOperationException(""camel-microprofile-fault-tolerance does not support onFallbackViaNetwork"");\n}\nfinal FaultToleranceConfigurationCommon config = buildFaultToleranceConfiguration();\nFaultToleranceConfiguration configuration = new FaultToleranceConfiguration();\nconfigureCircuitBreaker(config, configuration);\nconfigureTimeLimiter(config, configuration);\nconfigureBulkhead(config, configuration);\nFaultToleranceProcessor answer = new FaultToleranceProcessor(configuration, processor, fallback);\nif (config.getCircuitBreaker() != null) {\nCircuitBreaker<?> cb = mandatoryLookup(parseString(config.getCircuitBreaker()), CircuitBreaker.class);\nanswer.setCircuitBreaker(cb);\n}\nconfigureBulkheadExecutorService(answer, config);\nreturn answer;\n}\n""}","{""function"": ""public Processor createProcessor() throws Exception\n{\nProcessor processor = createChildProcessor(true);\nProcessor fallback = null;\nif (definition.getOnFallback() != null) {\nfallback = createProcessor(definition.getOnFallback());\n}\nboolean fallbackViaNetwork = definition.getOnFallback() != null && parseBoolean(definition.getOnFallback().getFallbackViaNetwork(), false);\nif (fallbackViaNetwork) {\nthrow new UnsupportedOperationException(""camel-microprofile-fault-tolerance does not support onFallbackViaNetwork"");\n}\nfinal FaultToleranceConfigurationCommon config = buildFaultToleranceConfiguration();\nFaultToleranceConfiguration configuration = new FaultToleranceConfiguration();\nconfigureCircuitBreaker(config, configuration);\nconfigureTimeLimiter(config, configuration);\nconfigureBulkhead(config, configuration);\nFaultToleranceProcessor answer = new FaultToleranceProcessor(configuration, processor, fallback);\nif (config.getCircuitBreaker() != null) {\nCircuitBreaker<?> cb = mandatoryLookup(parseString(config.getCircuitBreaker()), CircuitBreaker.class);\nanswer.setCircuitBreaker(cb);\n}\nconfigureBulkheadExecutorService(answer, config);\nreturn answer;\n}\n""}","java:S3740
"
"{""function"": ""public static JsonArray toJsonArray(List<?> list)\n{\nreturn new JsonArray(list);\n}\n""}","{""function"": ""public static JsonArray toJsonArray(InputStream inputStream) throws IOException\n{\ntry {\nByteArrayOutputStream bos = new ByteArrayOutputStream();\nIOHelper.copy(IOHelper.buffered(inputStream), bos);\nreturn Buffer.buffer(bos.toByteArray()).toJsonArray();\n} finally {\nIOHelper.close(inputStream);\n}\n}\n""}","java:S3740
"
"{""function"": ""public static List<?> toList(JsonArray jsonArray)\n{\nreturn jsonArray.getList();\n}\n""}","{""function"": ""public static List<?> toList(JsonArray jsonArray)\n{\nreturn jsonArray.getList();\n}\n""}","java:S3740
"
"{""function"": ""public RedisTemplate<?, ?> getRedisTemplate()\n{\nreturn redisTemplate;\n}\n""}","{""function"": ""public RedisTemplate<?, ?> getRedisTemplate()\n{\nreturn redisTemplate;\n}\n""}","java:S3740
"
"{""function"": ""public void setRedisTemplate(RedisTemplate<?, ?> redisTemplate)\n{\nthis.redisTemplate = redisTemplate;\n}\n""}","{""function"": ""public void setRedisTemplate(RedisTemplate<?, ?> redisTemplate)\n{\nthis.redisTemplate = redisTemplate;\n}\n""}","java:S3740
"
"{""function"": ""private EndpointValidationResult validateProperties(String scheme, Map<String, String> properties, boolean lenient, boolean consumerOnly, boolean producerOnly)\n{\nEndpointValidationResult result = new EndpointValidationResult(scheme);\nComponentModel model = componentModel(scheme);\nMap<String, BaseOptionModel> rows = new HashMap<>();\nmodel.getComponentOptions().forEach(o -> rows.put(o.getName(), o));\nmodel.getEndpointOptions().forEach(o -> rows.put(o.getName(), o));\nmodel.getEndpointPathOptions().forEach(o -> rows.put(o.getName(), o));\nif (model.isApi()) {\nString[] apiSyntax = StringHelper.splitWords(model.getApiSyntax());\nString key = properties.get(apiSyntax[0]);\nString key2 = apiSyntax.length > 1 ? properties.get(apiSyntax[1]) : null;\nMap<String, BaseOptionModel> apiProperties = extractApiProperties(model, key, key2);\nrows.putAll(apiProperties);\n}\nif (""dataformat"".equals(scheme)) {\nString dfName = properties.get(""name"");\nif (dfName != null) {\nDataFormatModel dfModel = dataFormatModel(dfName);\nif (dfModel != null) {\ndfModel.getOptions().forEach(o -> rows.put(o.getName(), o));\n}\n}\n}\nfor (Map.Entry<String, String> property : properties.entrySet()) {\nString value = property.getValue();\nString originalName = property.getKey();\nString name = stripOptionalPrefixFromName(rows, originalName);\nString propertyName = getPropertyNameFromNameWithPrefix(rows, name);\nif (propertyName != null) {\nname = propertyName;\n}\nBaseOptionModel row = rows.get(name);\nif (row == null) {\nboolean namePlaceholder = name.startsWith(""{{"") && name.endsWith(""}}"");\nif (!namePlaceholder && !""stub"".equals(scheme)) {\nif (lenient) {\nresult.addLenient(name);\n} else {\nresult.addUnknown(name);\nif (suggestionStrategy != null) {\nString[] suggestions = suggestionStrategy.suggestEndpointOptions(rows.keySet(), name);\nif (suggestions != null) {\nresult.addUnknownSuggestions(name, suggestions);\n}\n}\n}\n}\n} else {\nif (""parameter"".equals(row.getKind())) {\nString label = row.getLabel();\nif (consumerOnly) {\nif (label != null && label.contains(""producer"")) {\nresult.addNotConsumerOnly(name);\n}\n} else if (producerOnly) {\nif (label != null && label.contains(""consumer"")) {\nresult.addNotProducerOnly(name);\n}\n}\n}\nString prefix = row.getPrefix();\nboolean valuePlaceholder = value.startsWith(""{{"") || value.startsWith(""${"") || value.startsWith(""$simple{"");\nboolean lookup = value.startsWith(""#"") && value.length() > 1;\nboolean multiValue = prefix != null && originalName.startsWith(prefix) && row.isMultiValue();\nObject defaultValue = row.getDefaultValue();\nif (defaultValue != null) {\nresult.addDefaultValue(name, defaultValue.toString());\n}\nif (row.isRequired() && URISupport.isEmpty(value)) {\nresult.addRequired(name);\n}\nboolean deprecated = row.isDeprecated();\nif (deprecated) {\nresult.addDeprecated(name);\n}\nList<String> enums = row.getEnums();\nif (!multiValue && !valuePlaceholder && !lookup && enums != null) {\nboolean found = false;\nfor (String s : enums) {\nString dashEC = StringHelper.camelCaseToDash(value);\nString valueEC = StringHelper.asEnumConstantValue(value);\nif (value.equalsIgnoreCase(s) || dashEC.equalsIgnoreCase(s) || valueEC.equalsIgnoreCase(s)) {\nfound = true;\nbreak;\n}\n}\nif (!found) {\nhandleNotFound(result, value, name, enums);\n}\n}\nif (!multiValue && enums == null && !""path"".equals(row.getKind()) && ""object"".equals(row.getType())) {\nif (!value.startsWith(""#"") || value.length() <= 1) {\nresult.addInvalidReference(name, value);\n}\n}\nif (!multiValue && !valuePlaceholder && !lookup && ""boolean"".equals(row.getType())) {\nboolean bool = ""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value);\nif (!bool) {\nresult.addInvalidBoolean(name, value);\n}\n}\nif (!multiValue && !valuePlaceholder && !lookup && ""duration"".equals(row.getType())) {\nboolean valid = validateDuration(value);\nif (!valid) {\nresult.addInvalidDuration(name, value);\n}\n}\nif (!multiValue && !valuePlaceholder && !lookup && ""integer"".equals(row.getType())) {\nboolean valid = validateInteger(value);\nif (!valid) {\nresult.addInvalidInteger(name, value);\n}\n}\nif (!multiValue && !valuePlaceholder && !lookup && ""number"".equals(row.getType())) {\nboolean valid = false;\ntry {\nvalid = !Double.valueOf(value).isNaN() || !Float.valueOf(value).isNaN();\n} catch (Exception e) {\n}\nif (!valid) {\nresult.addInvalidNumber(name, value);\n}\n}\n}\n}\nif (model.isApi()) {\nString[] apiSyntax = StringHelper.splitWords(model.getApiSyntax());\nString key1 = properties.get(apiSyntax[0]);\nString key2 = apiSyntax.length > 1 ? properties.get(apiSyntax[1]) : null;\nif (key1 != null && key2 != null) {\nApiModel api = model.getApiOptions().stream().filter(o -> o.getName().equalsIgnoreCase(key1)).findFirst().orElse(null);\nif (api == null) {\nresult.addInvalidEnum(apiSyntax[0], key1);\nresult.addInvalidEnumChoices(apiSyntax[0], model.getApiOptions().stream().map(ApiModel::getName).toArray(String[]::new));\n} else {\nboolean found = false;\nfor (ApiMethodModel m : api.getMethods()) {\nString key3 = apiMethodAlias(api, m);\nif (m.getName().equalsIgnoreCase(key2) || key2.equalsIgnoreCase(key3)) {\nfound = true;\nbreak;\n}\n}\nif (!found) {\nresult.addInvalidEnum(apiSyntax[1], key2);\nresult.addInvalidEnumChoices(apiSyntax[1], api.getMethods().stream().map(m -> {\nString answer = apiMethodAlias(api, m);\nif (answer == null) {\nanswer = m.getName();\n}\nreturn answer;\n}).toArray(String[]::new));\n}\n}\n}\n}\nfor (BaseOptionModel row : rows.values()) {\nif (row.isRequired()) {\nString name = row.getName();\nObject value = properties.get(name);\nif (URISupport.isEmpty(value)) {\nvalue = row.getDefaultValue();\n}\nif (URISupport.isEmpty(value)) {\nresult.addRequired(name);\n}\n}\n}\nreturn result;\n}\n""}","{""function"": ""private EndpointValidationResult validateProperties(String scheme, Map<String, String> properties, boolean lenient, boolean consumerOnly, boolean producerOnly)\n{\nEndpointValidationResult result = new EndpointValidationResult(scheme);\nComponentModel model = componentModel(scheme);\nMap<String, BaseOptionModel> rows = new HashMap<>();\nmodel.getComponentOptions().forEach(o -> rows.put(o.getName(), o));\nmodel.getEndpointOptions().forEach(o -> rows.put(o.getName(), o));\nmodel.getEndpointPathOptions().forEach(o -> rows.put(o.getName(), o));\nif (model.isApi()) {\nString[] apiSyntax = StringHelper.splitWords(model.getApiSyntax());\nString key = properties.get(apiSyntax[0]);\nString key2 = apiSyntax.length > 1 ? properties.get(apiSyntax[1]) : null;\nMap<String, BaseOptionModel> apiProperties = extractApiProperties(model, key, key2);\nrows.putAll(apiProperties);\n}\nif (""dataformat"".equals(scheme)) {\nString dfName = properties.get(""name"");\nif (dfName != null) {\nDataFormatModel dfModel = dataFormatModel(dfName);\nif (dfModel != null) {\ndfModel.getOptions().forEach(o -> rows.put(o.getName(), o));\n}\n}\n}\nfor (Map.Entry<String, String> property : properties.entrySet()) {\nString value = property.getValue();\nString originalName = property.getKey();\nString name = stripOptionalPrefixFromName(rows, originalName);\nString propertyName = getPropertyNameFromNameWithPrefix(rows, name);\nif (propertyName != null) {\nname = propertyName;\n}\nBaseOptionModel row = rows.get(name);\nif (row == null) {\nboolean namePlaceholder = name.startsWith(""{{"") && name.endsWith(""}}"");\nif (!namePlaceholder && !""stub"".equals(scheme)) {\nif (lenient) {\nresult.addLenient(name);\n} else {\nresult.addUnknown(name);\nif (suggestionStrategy != null) {\nString[] suggestions = suggestionStrategy.suggestEndpointOptions(rows.keySet(), name);\nif (suggestions != null) {\nresult.addUnknownSuggestions(name, suggestions);\n}\n}\n}\n}\n} else {\nif (""parameter"".equals(row.getKind())) {\nString label = row.getLabel();\nif (consumerOnly) {\nif (label != null && label.contains(""producer"")) {\nresult.addNotConsumerOnly(name);\n}\n} else if (producerOnly) {\nif (label != null && label.contains(""consumer"")) {\nresult.addNotProducerOnly(name);\n}\n}\n}\nString prefix = row.getPrefix();\nboolean valuePlaceholder = value.startsWith(""{{"") || value.startsWith(""${"") || value.startsWith(""$simple{"");\nboolean lookup = value.startsWith(""#"") && value.length() > 1;\nboolean multiValue = prefix != null && originalName.startsWith(prefix) && row.isMultiValue();\nObject defaultValue = row.getDefaultValue();\nif (defaultValue != null) {\nresult.addDefaultValue(name, defaultValue.toString());\n}\nif (row.isRequired() && URISupport.isEmpty(value)) {\nresult.addRequired(name);\n}\nboolean deprecated = row.isDeprecated();\nif (deprecated) {\nresult.addDeprecated(name);\n}\nList<String> enums = row.getEnums();\nif (!multiValue && !valuePlaceholder && !lookup && enums != null) {\nboolean found = false;\nfor (String s : enums) {\nString dashEC = StringHelper.camelCaseToDash(value);\nString valueEC = StringHelper.asEnumConstantValue(value);\nif (value.equalsIgnoreCase(s) || dashEC.equalsIgnoreCase(s) || valueEC.equalsIgnoreCase(s)) {\nfound = true;\nbreak;\n}\n}\nif (!found) {\nhandleNotFound(result, value, name, enums);\n}\n}\nif (!multiValue && enums == null && !""path"".equals(row.getKind()) && ""object"".equals(row.getType())) {\nif (!value.startsWith(""#"") || value.length() <= 1) {\nresult.addInvalidReference(name, value);\n}\n}\nif (!multiValue && !valuePlaceholder && !lookup && ""boolean"".equals(row.getType())) {\nboolean bool = ""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value);\nif (!bool) {\nresult.addInvalidBoolean(name, value);\n}\n}\nif (!multiValue && !valuePlaceholder && !lookup && ""duration"".equals(row.getType())) {\nboolean valid = validateDuration(value);\nif (!valid) {\nresult.addInvalidDuration(name, value);\n}\n}\nif (!multiValue && !valuePlaceholder && !lookup && ""integer"".equals(row.getType())) {\nboolean valid = validateInteger(value);\nif (!valid) {\nresult.addInvalidInteger(name, value);\n}\n}\nif (!multiValue && !valuePlaceholder && !lookup && ""number"".equals(row.getType())) {\nboolean valid = false;\ntry {\nvalid = !Double.valueOf(value).isNaN() || !Float.valueOf(value).isNaN();\n} catch (Exception e) {\n}\nif (!valid) {\nresult.addInvalidNumber(name, value);\n}\n}\n}\n}\nif (model.isApi()) {\nString[] apiSyntax = StringHelper.splitWords(model.getApiSyntax());\nString key1 = properties.get(apiSyntax[0]);\nString key2 = apiSyntax.length > 1 ? properties.get(apiSyntax[1]) : null;\nif (key1 != null && key2 != null) {\nApiModel api = model.getApiOptions().stream().filter(o -> o.getName().equalsIgnoreCase(key1)).findFirst().orElse(null);\nif (api == null) {\nresult.addInvalidEnum(apiSyntax[0], key1);\nresult.addInvalidEnumChoices(apiSyntax[0], model.getApiOptions().stream().map(ApiModel::getName).toArray(String[]::new));\n} else {\nboolean found = false;\nfor (ApiMethodModel m : api.getMethods()) {\nString key3 = apiMethodAlias(api, m);\nif (m.getName().equalsIgnoreCase(key2) || key2.equalsIgnoreCase(key3)) {\nfound = true;\nbreak;\n}\n}\nif (!found) {\nresult.addInvalidEnum(apiSyntax[1], key2);\nresult.addInvalidEnumChoices(apiSyntax[1], api.getMethods().stream().map(m -> {\nString answer = apiMethodAlias(api, m);\nif (answer == null) {\nanswer = m.getName();\n}\nreturn answer;\n}).toArray(String[]::new));\n}\n}\n}\n}\nfor (BaseOptionModel row : rows.values()) {\nif (row.isRequired()) {\nString name = row.getName();\nObject value = properties.get(name);\nif (URISupport.isEmpty(value)) {\nvalue = row.getDefaultValue();\n}\nif (URISupport.isEmpty(value)) {\nresult.addRequired(name);\n}\n}\n}\nreturn result;\n}\n""}","java:S3776
"
"{""function"": ""public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\nJsonNode treeNode = p.getCodec().readTree(p);\nObjectMapper om = (ObjectMapper) p.getCodec();\nif (treeNode.get(""clazz"") != null) {\nClass<?> cl = om.readValue(treeNode.get(""clazz"").toString(), Class.class);\nreturn om.readValue(treeNode.get(""data"").toString(), cl);\n}\nreturn om.readValue(treeNode.toString(), Object.class);\n}\n""}","{""function"": ""public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\nJsonNode treeNode = p.getCodec().readTree(p);\nObjectMapper om = (ObjectMapper) p.getCodec();\nif (treeNode.get(""clazz"") != null) {\nClass<?> cl = om.readValue(treeNode.get(""clazz"").toString(), Class.class);\nreturn om.readValue(treeNode.get(""data"").toString(), cl);\n}\nreturn om.readValue(treeNode.toString(), Object.class);\n}\n""}","java:S3740
"
"{""function"": "" CodeEmitter<T> emit(final String method, final Collection<String> values)\n{\nif (values == null || values.isEmpty()) {\nreturn emitter;\n}\nreturn emitter.emit(method, new Object[] { values.toArray(new String[0]) });\n}\n""}","{""function"": "" CodeEmitter<T> emit(final String method, final Object value)\n{\nif (ObjectHelper.isEmpty(value)) {\nreturn emitter;\n}\nreturn emitter.emit(method, value);\n}\n""}","java:S3776
"
"{""function"": "" String doAsEndpointUri(String scheme, Map<String, String> properties, String ampersand, boolean encode) throws URISyntaxException\n{\nComponentModel model = componentModel(scheme);\nif (model == null) {\nthrow new IllegalArgumentException(""Cannot find endpoint with scheme "" + scheme);\n}\nString originalSyntax = model.getSyntax();\nif (originalSyntax == null) {\nthrow new IllegalArgumentException(""Endpoint with scheme "" + scheme + "" has no syntax defined in the json schema"");\n}\nproperties = filterProperties(scheme, properties);\nMap<String, BaseOptionModel> rows = new HashMap<>();\nmodel.getComponentOptions().forEach(o -> rows.put(o.getName(), o));\nmodel.getEndpointOptions().forEach(o -> rows.put(o.getName(), o));\nmodel.getEndpointPathOptions().forEach(o -> rows.put(o.getName(), o));\nif (originalSyntax.contains("":"")) {\noriginalSyntax = CatalogHelper.after(originalSyntax, "":"");\n}\nMap<String, String> copy = new TreeMap<>(properties);\nMatcher syntaxMatcher = COMPONENT_SYNTAX_PARSER.matcher(originalSyntax);\nStringBuilder sb = new StringBuilder();\nwhile (syntaxMatcher.find()) {\nsb.append(syntaxMatcher.group(1));\nString propertyName = syntaxMatcher.group(2);\nString propertyValue = copy.remove(propertyName);\nsb.append(propertyValue != null ? propertyValue : propertyName);\n}\nString syntax = sb.toString();\nString[] keys = syntaxKeys(originalSyntax);\nboolean hasAllKeys = properties.keySet().containsAll(Arrays.asList(keys));\nsb = new StringBuilder();\nif (hasAllKeys) {\nsb.append(syntax);\nif (!copy.isEmpty()) {\ncopy.replaceAll((key, val) -> {\nif (val == null) {\nreturn val;\n}\nBaseOptionModel option = rows.get(key);\nif (option == null) {\nreturn val;\n}\nif (option.isSecret() && !val.startsWith(""#"") && !val.startsWith(""RAW("")) {\nreturn ""RAW("" + val + "")"";\n}\nreturn val;\n});\nboolean hasQuestionMark = sb.toString().contains(""?"");\nsb.append(hasQuestionMark ? ampersand : '?');\nString query = URISupport.createQueryString(copy, ampersand, encode);\nsb.append(query);\n}\n} else {\nString[] tokens = SYNTAX_DASH_PATTERN.split(syntax);\nMatcher matcher = SYNTAX_PATTERN.matcher(originalSyntax);\nList<String> options = new ArrayList<>();\nwhile (matcher.find()) {\nString s = matcher.group(1);\noptions.add(s);\n}\nsyntax = syntax.replace(""{{"", ""BEGINCAMELPLACEHOLDER"");\nsyntax = syntax.replace(""}}"", ""ENDCAMELPLACEHOLDER"");\nMatcher matcher2 = SYNTAX_DASH_PATTERN.matcher(syntax);\nList<String> options2 = new ArrayList<>();\nwhile (matcher2.find()) {\nString s = matcher2.group(1);\ns = s.replace(""BEGINCAMELPLACEHOLDER"", ""{{"");\ns = s.replace(""ENDCAMELPLACEHOLDER"", ""}}"");\noptions2.add(s);\n}\nint range = 0;\nboolean first = true;\nboolean hasQuestionmark = false;\nfor (int i = 0; i < options.size(); i++) {\nString key = options.get(i);\nString key2 = options2.get(i);\nString token = null;\nif (tokens.length > i) {\ntoken = tokens[i];\n}\nboolean contains = properties.containsKey(key);\nif (!contains) {\nBaseOptionModel row = rows.get(key);\nif (row != null && row.isRequired()) {\nObject value = row.getDefaultValue();\nif (!URISupport.isEmpty(value)) {\nproperties.put(key, key2 = value.toString());\n}\n}\n}\nif (properties.containsKey(key)) {\nif (!first && token != null) {\nsb.append(token);\n}\nhasQuestionmark |= key.contains(""?"") || (token != null && token.contains(""?""));\nsb.append(key2);\nfirst = false;\n}\nrange++;\n}\nwhile (range < options2.size()) {\nString token = null;\nif (tokens.length > range) {\ntoken = tokens[range];\n}\nString key2 = options2.get(range);\nsb.append(token);\nsb.append(key2);\nhasQuestionmark |= key2.contains(""?"") || (token != null && token.contains(""?""));\nrange++;\n}\nif (!copy.isEmpty()) {\ncopy.replaceAll(new BiFunction<String, String, String>() {\n\n@Override\npublic String apply(String key, String val) {\nif (val == null) {\nreturn val;\n}\nBaseOptionModel option = rows.get(key);\nif (option == null) {\nreturn val;\n}\nif (option.isSecret() && !val.startsWith(""#"") && !val.startsWith(""RAW("")) {\nreturn ""RAW("" + val + "")"";\n}\nreturn val;\n}\n});\nsb.append(hasQuestionmark ? ampersand : '?');\nString query = URISupport.createQueryString(copy, ampersand, encode);\nsb.append(query);\n}\n}\nString remainder = sb.toString();\nboolean queryOnly = remainder.startsWith(""?"");\nif (queryOnly) {\nreturn scheme + remainder;\n} else if (!remainder.isEmpty()) {\nreturn scheme + "":"" + remainder;\n} else {\nreturn scheme;\n}\n}\n""}","{""function"": "" String doAsEndpointUri(String scheme, Map<String, String> properties, String ampersand, boolean encode) throws URISyntaxException\n{\nComponentModel model = componentModel(scheme);\nif (model == null) {\nthrow new IllegalArgumentException(""Cannot find endpoint with scheme "" + scheme);\n}\nString originalSyntax = model.getSyntax();\nif (originalSyntax == null) {\nthrow new IllegalArgumentException(""Endpoint with scheme "" + scheme + "" has no syntax defined in the json schema"");\n}\nproperties = filterProperties(scheme, properties);\nMap<String, BaseOptionModel> rows = new HashMap<>();\nmodel.getComponentOptions().forEach(o -> rows.put(o.getName(), o));\nmodel.getEndpointOptions().forEach(o -> rows.put(o.getName(), o));\nmodel.getEndpointPathOptions().forEach(o -> rows.put(o.getName(), o));\nif (originalSyntax.contains("":"")) {\noriginalSyntax = CatalogHelper.after(originalSyntax, "":"");\n}\nMap<String, String> copy = new TreeMap<>(properties);\nMatcher syntaxMatcher = COMPONENT_SYNTAX_PARSER.matcher(originalSyntax);\nStringBuilder sb = new StringBuilder();\nwhile (syntaxMatcher.find()) {\nsb.append(syntaxMatcher.group(1));\nString propertyName = syntaxMatcher.group(2);\nString propertyValue = copy.remove(propertyName);\nsb.append(propertyValue != null ? propertyValue : propertyName);\n}\nString syntax = sb.toString();\nString[] keys = syntaxKeys(originalSyntax);\nboolean hasAllKeys = properties.keySet().containsAll(Arrays.asList(keys));\nsb = new StringBuilder();\nif (hasAllKeys) {\nsb.append(syntax);\nif (!copy.isEmpty()) {\ncopy.replaceAll((key, val) -> wrapRAW(key, val, rows));\nboolean hasQuestionMark = sb.toString().contains(""?"");\nsb.append(hasQuestionMark ? ampersand : '?');\nString query = URISupport.createQueryString(copy, ampersand, encode);\nsb.append(query);\n}\n} else {\nString[] tokens = SYNTAX_DASH_PATTERN.split(syntax);\nMatcher matcher = SYNTAX_PATTERN.matcher(originalSyntax);\nList<String> options = new ArrayList<>();\nwhile (matcher.find()) {\nString s = matcher.group(1);\noptions.add(s);\n}\nsyntax = syntax.replace(""{{"", ""BEGINCAMELPLACEHOLDER"");\nsyntax = syntax.replace(""}}"", ""ENDCAMELPLACEHOLDER"");\nMatcher matcher2 = SYNTAX_DASH_PATTERN.matcher(syntax);\nList<String> options2 = new ArrayList<>();\nwhile (matcher2.find()) {\nString s = matcher2.group(1);\ns = s.replace(""BEGINCAMELPLACEHOLDER"", ""{{"");\ns = s.replace(""ENDCAMELPLACEHOLDER"", ""}}"");\noptions2.add(s);\n}\nint range = 0;\nboolean first = true;\nboolean hasQuestionmark = false;\nfor (int i = 0; i < options.size(); i++) {\nString key = options.get(i);\nString key2 = options2.get(i);\nString token = null;\nif (tokens.length > i) {\ntoken = tokens[i];\n}\nboolean contains = properties.containsKey(key);\nif (!contains) {\nBaseOptionModel row = rows.get(key);\nif (row != null && row.isRequired()) {\nObject value = row.getDefaultValue();\nif (!URISupport.isEmpty(value)) {\nproperties.put(key, key2 = value.toString());\n}\n}\n}\nif (properties.containsKey(key)) {\nif (!first && token != null) {\nsb.append(token);\n}\nhasQuestionmark |= key.contains(""?"") || (token != null && token.contains(""?""));\nsb.append(key2);\nfirst = false;\n}\nrange++;\n}\nwhile (range < options2.size()) {\nString token = null;\nif (tokens.length > range) {\ntoken = tokens[range];\n}\nString key2 = options2.get(range);\nsb.append(token);\nsb.append(key2);\nhasQuestionmark |= key2.contains(""?"") || (token != null && token.contains(""?""));\nrange++;\n}\nif (!copy.isEmpty()) {\ncopy.replaceAll((key, val) -> wrapRAW(key, val, rows));\nsb.append(hasQuestionmark ? ampersand : '?');\nString query = URISupport.createQueryString(copy, ampersand, encode);\nsb.append(query);\n}\n}\nString remainder = sb.toString();\nboolean queryOnly = remainder.startsWith(""?"");\nif (queryOnly) {\nreturn scheme + remainder;\n} else if (!remainder.isEmpty()) {\nreturn scheme + "":"" + remainder;\n} else {\nreturn scheme;\n}\n}\n""}","java:S1604
"
"{""function"": ""public Expression createExpression(String expression)\n{\nBeanExpression answer;\nString beanScope = null;\nif (bean != null) {\nanswer = new BeanExpression(bean, method);\n} else if (beanType != null) {\nanswer = new BeanExpression(beanType, method);\n} else if (ref != null) {\nanswer = new BeanExpression(ref, method);\n} else {\nString beanName = expression;\nString method = null;\nif (expression.contains(""?method="") || expression.contains(""?scope="")) {\nbeanName = StringHelper.before(expression, ""?"");\nString query = StringHelper.after(expression, ""?"");\ntry {\nMap<String, Object> map = URISupport.parseQuery(query);\nmethod = (String) map.get(""method"");\nbeanScope = (String) map.get(""scope"");\n} catch (URISyntaxException e) {\nthrow RuntimeCamelException.wrapRuntimeException(e);\n}\n} else {\nint doubleColonIndex = expression.indexOf(""::"");\nint beginOfParameterDeclaration = expression.indexOf('(');\nif (doubleColonIndex > 0 && (!expression.contains(""("") || doubleColonIndex < beginOfParameterDeclaration)) {\nbeanName = expression.substring(0, doubleColonIndex);\nmethod = expression.substring(doubleColonIndex + 2);\n} else {\nint idx = expression.indexOf('.');\nif (idx > 0) {\nbeanName = expression.substring(0, idx);\nmethod = expression.substring(idx + 1);\n}\n}\n}\nif (beanName.startsWith(""type:"")) {\ntry {\nClass<?> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(beanName.substring(5));\nanswer = new BeanExpression(clazz, method);\n} catch (ClassNotFoundException e) {\nthrow RuntimeCamelException.wrapRuntimeException(e);\n}\n} else {\nanswer = new BeanExpression(beanName, method);\n}\n}\nif (beanScope != null) {\nanswer.setScope(getCamelContext().getTypeConverter().tryConvertTo(BeanScope.class, beanScope));\n} else {\nanswer.setScope(scope);\n}\nanswer.setBeanComponent(beanComponent);\nanswer.setParameterMappingStrategy(parameterMappingStrategy);\nanswer.setSimple(simple);\nanswer.init(getCamelContext());\nreturn answer;\n}\n""}","{""function"": ""public Expression createExpression(String expression)\n{\nBeanExpression answer;\nString beanScope = null;\nif (bean != null) {\nanswer = new BeanExpression(bean, method);\n} else if (beanType != null) {\nanswer = new BeanExpression(beanType, method);\n} else if (ref != null) {\nanswer = new BeanExpression(ref, method);\n} else {\nString beanName = expression;\nString method = null;\nif (expression.contains(""?method="") || expression.contains(""?scope="")) {\nbeanName = StringHelper.before(expression, ""?"");\nString query = StringHelper.after(expression, ""?"");\ntry {\nMap<String, Object> map = URISupport.parseQuery(query);\nmethod = (String) map.get(""method"");\nbeanScope = (String) map.get(""scope"");\n} catch (URISyntaxException e) {\nthrow RuntimeCamelException.wrapRuntimeException(e);\n}\n} else {\nint doubleColonIndex = expression.indexOf(""::"");\nint beginOfParameterDeclaration = expression.indexOf('(');\nif (doubleColonIndex > 0 && (!expression.contains(""("") || doubleColonIndex < beginOfParameterDeclaration)) {\nbeanName = expression.substring(0, doubleColonIndex);\nmethod = expression.substring(doubleColonIndex + 2);\n} else {\nint idx = expression.indexOf('.');\nif (idx > 0) {\nbeanName = expression.substring(0, idx);\nmethod = expression.substring(idx + 1);\n}\n}\n}\nif (beanName.startsWith(""type:"")) {\ntry {\nClass<?> clazz = getCamelContext().getClassResolver().resolveMandatoryClass(beanName.substring(5));\nanswer = new BeanExpression(clazz, method);\n} catch (ClassNotFoundException e) {\nthrow RuntimeCamelException.wrapRuntimeException(e);\n}\n} else {\nanswer = new BeanExpression(beanName, method);\n}\n}\nif (beanScope != null) {\nanswer.setScope(getCamelContext().getTypeConverter().tryConvertTo(BeanScope.class, beanScope));\n} else {\nanswer.setScope(scope);\n}\nanswer.setBeanComponent(beanComponent);\nanswer.setParameterMappingStrategy(parameterMappingStrategy);\nanswer.setSimple(simple);\nanswer.init(getCamelContext());\nreturn answer;\n}\n""}","java:S3740
"
"{""function"": ""public ConfigurationPropertiesValidationResult validateConfigurationProperty(String line)\n{\nString longKey = CatalogHelper.before(line, ""="");\nString key = longKey;\nString value = CatalogHelper.after(line, ""="");\nif (longKey != null) {\nlongKey = longKey.trim();\n}\nif (key != null) {\nkey = key.trim();\n}\nif (value != null) {\nvalue = value.trim();\n}\nConfigurationPropertiesValidationResult result = new ConfigurationPropertiesValidationResult();\nboolean accept = acceptConfigurationPropertyKey(key);\nif (!accept) {\nresult.setAccepted(false);\nreturn result;\n} else {\nresult.setAccepted(true);\n}\nkey = key.substring(""camel."".length());\nFunction<String, ? extends BaseModel<?>> loader = null;\nif (key.startsWith(""component."")) {\nkey = key.substring(""component."".length());\nloader = this::componentModel;\n} else if (key.startsWith(""dataformat."")) {\nkey = key.substring(""dataformat."".length());\nloader = this::dataFormatModel;\n} else if (key.startsWith(""language."")) {\nkey = key.substring(""language."".length());\nloader = this::languageModel;\n}\nif (loader != null) {\nint idx = key.indexOf('.');\nString name = key.substring(0, idx);\nString option = key.substring(idx + 1);\nif (value != null) {\nBaseModel<?> model = loader.apply(name);\nif (model == null) {\nresult.addUnknownComponent(name);\nreturn result;\n}\nMap<String, BaseOptionModel> rows = new HashMap<>();\nmodel.getOptions().forEach(o -> rows.put(o.getName(), o));\nString nOption = option.replace(""-"", """").toLowerCase(Locale.ENGLISH);\nString suffix = null;\nint posDot = nOption.indexOf('.');\nint posBracket = nOption.indexOf('[');\nif (posDot > 0 && posBracket > 0) {\nint first = Math.min(posDot, posBracket);\nsuffix = nOption.substring(first);\nnOption = nOption.substring(0, first);\n} else if (posDot > 0) {\nsuffix = nOption.substring(posDot);\nnOption = nOption.substring(0, posDot);\n} else if (posBracket > 0) {\nsuffix = nOption.substring(posBracket);\nnOption = nOption.substring(0, posBracket);\n}\ndoValidateConfigurationProperty(result, rows, name, value, longKey, nOption, suffix);\n}\n} else if (key.startsWith(""main."") || key.startsWith(""resilience4j."") || key.startsWith(""faulttolerance."") || key.startsWith(""threadpool."") || key.startsWith(""lra."") || key.startsWith(""health."") || key.startsWith(""rest."")) {\nint idx = key.indexOf('.');\nString name = key.substring(0, idx);\nif (value != null) {\nMainModel model = mainModel();\nif (model == null) {\nresult.addIncapable(""camel-main not detected on classpath"");\nreturn result;\n}\nMap<String, BaseOptionModel> rows = new HashMap<>();\nmodel.getOptions().forEach(o -> rows.put(dashToCamelCase(o.getName()), o));\nString nOption = longKey.replace(""-"", """").toLowerCase(Locale.ENGLISH);\nint secondDot = nOption.indexOf('.', nOption.indexOf('.') + 1) + 1;\nString suffix = null;\nint posDot = nOption.indexOf('.', secondDot);\nint posBracket = nOption.indexOf('[', secondDot);\nif (posDot > 0 && posBracket > 0) {\nint first = Math.min(posDot, posBracket);\nsuffix = nOption.substring(first);\nnOption = nOption.substring(0, first);\n} else if (posDot > 0) {\nsuffix = nOption.substring(posDot);\nnOption = nOption.substring(0, posDot);\n} else if (posBracket > 0) {\nsuffix = nOption.substring(posBracket);\nnOption = nOption.substring(0, posBracket);\n}\ndoValidateConfigurationProperty(result, rows, name, value, longKey, nOption, suffix);\n}\n}\nreturn result;\n}\n""}","{""function"": ""public ConfigurationPropertiesValidationResult validateConfigurationProperty(String line)\n{\nString longKey = CatalogHelper.before(line, ""="");\nString key = longKey;\nString value = CatalogHelper.after(line, ""="");\nif (longKey != null) {\nlongKey = longKey.trim();\n}\nif (key != null) {\nkey = key.trim();\n}\nif (value != null) {\nvalue = value.trim();\n}\nConfigurationPropertiesValidationResult result = new ConfigurationPropertiesValidationResult();\nboolean accept = acceptConfigurationPropertyKey(key);\nif (!accept) {\nresult.setAccepted(false);\nreturn result;\n} else {\nresult.setAccepted(true);\n}\nkey = key.substring(""camel."".length());\nFunction<String, ? extends BaseModel<?>> loader = null;\nif (key.startsWith(""component."")) {\nkey = key.substring(""component."".length());\nloader = this::componentModel;\n} else if (key.startsWith(""dataformat."")) {\nkey = key.substring(""dataformat."".length());\nloader = this::dataFormatModel;\n} else if (key.startsWith(""language."")) {\nkey = key.substring(""language."".length());\nloader = this::languageModel;\n}\nif (loader != null) {\nint idx = key.indexOf('.');\nString name = key.substring(0, idx);\nString option = key.substring(idx + 1);\nif (value != null) {\nBaseModel<?> model = loader.apply(name);\nif (model == null) {\nresult.addUnknownComponent(name);\nreturn result;\n}\nMap<String, BaseOptionModel> rows = new HashMap<>();\nmodel.getOptions().forEach(o -> rows.put(o.getName(), o));\nString nOption = option.replace(""-"", """").toLowerCase(Locale.ENGLISH);\nString suffix = null;\nint posDot = nOption.indexOf('.');\nint posBracket = nOption.indexOf('[');\nif (posDot > 0 && posBracket > 0) {\nint first = Math.min(posDot, posBracket);\nsuffix = nOption.substring(first);\nnOption = nOption.substring(0, first);\n} else if (posDot > 0) {\nsuffix = nOption.substring(posDot);\nnOption = nOption.substring(0, posDot);\n} else if (posBracket > 0) {\nsuffix = nOption.substring(posBracket);\nnOption = nOption.substring(0, posBracket);\n}\ndoValidateConfigurationProperty(result, rows, name, value, longKey, nOption, suffix);\n}\n} else if (key.startsWith(""main."") || key.startsWith(""resilience4j."") || key.startsWith(""faulttolerance."") || key.startsWith(""threadpool."") || key.startsWith(""lra."") || key.startsWith(""health."") || key.startsWith(""rest."")) {\nint idx = key.indexOf('.');\nString name = key.substring(0, idx);\nif (value != null) {\nMainModel model = mainModel();\nif (model == null) {\nresult.addIncapable(""camel-main not detected on classpath"");\nreturn result;\n}\nMap<String, BaseOptionModel> rows = new HashMap<>();\nmodel.getOptions().forEach(o -> rows.put(dashToCamelCase(o.getName()), o));\nString nOption = longKey.replace(""-"", """").toLowerCase(Locale.ENGLISH);\nint secondDot = nOption.indexOf('.', nOption.indexOf('.') + 1) + 1;\nString suffix = null;\nint posDot = nOption.indexOf('.', secondDot);\nint posBracket = nOption.indexOf('[', secondDot);\nif (posDot > 0 && posBracket > 0) {\nint first = Math.min(posDot, posBracket);\nsuffix = nOption.substring(first);\nnOption = nOption.substring(0, first);\n} else if (posDot > 0) {\nsuffix = nOption.substring(posDot);\nnOption = nOption.substring(0, posDot);\n} else if (posBracket > 0) {\nsuffix = nOption.substring(posBracket);\nnOption = nOption.substring(0, posBracket);\n}\ndoValidateConfigurationProperty(result, rows, name, value, longKey, nOption, suffix);\n}\n}\nreturn result;\n}\n""}","java:S3776
"
"{""function"": ""public void remove(CamelContext camelContext, String key, Exchange exchange)\n{\nDefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);\nif (optimistic) {\nLOG.trace(""Removing an exchange with ID {} for key {} in an optimistic manner."", exchange.getExchangeId(), key);\ntry {\nCompletableFuture<GetResponse> completableGetResponse = kvClient.get(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()));\nGetResponse getResponse = completableGetResponse.get();\nList<KeyValue> keyValueList = getResponse.getKvs();\nboolean optimisticLockingError = keyValueList.isEmpty();\nif (!optimisticLockingError) {\nDefaultExchangeHolder holderFound = (DefaultExchangeHolder) convertFromEtcd3Format(keyValueList.get(0).getValue());\noptimisticLockingError = !Objects.equals(holder, holderFound);\nif (!optimisticLockingError) {\nCompletableFuture<DeleteResponse> completableDeleteResponse = kvClient.delete(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()));\nDeleteResponse deleteResponse = completableDeleteResponse.get();\noptimisticLockingError = deleteResponse.getDeleted() == 0;\n}\n}\nif (optimisticLockingError) {\nLOG.warn(""Optimistic locking failed for exchange with key {}: kvClient.delete removed no Exchanges, while it's expected to remove one."", key);\nthrow new OptimisticLockingException();\n}\n} catch (InterruptedException | ExecutionException | ClassNotFoundException | IOException e) {\nLOG.error(e.getMessage(), e);\nthrow new RuntimeCamelException(e.getMessage(), e);\n}\nLOG.trace(""Removed an exchange with ID {} for key {} in an optimistic manner."", exchange.getExchangeId(), key);\nif (useRecovery) {\nLOG.trace(""Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner."", exchange.getExchangeId(), key);\ntry {\nCompletableFuture<PutResponse> completablePutResponse = kvClient.put(ByteSequence.from(String.format(""%s/%s"", persistencePrefixName, key).getBytes()), convertToEtcd3Format(holder));\ncompletablePutResponse.get();\nLOG.trace(""Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner."", exchange.getExchangeId(), key);\n} catch (IOException | InterruptedException | ExecutionException e) {\nLOG.error(e.getMessage(), e);\nthrow new RuntimeCamelException(e.getMessage(), e);\n}\n}\n} else {\nif (useRecovery) {\nLOG.trace(""Removing an exchange with ID {} for key {} in a thread-safe manner."", exchange.getExchangeId(), key);\nTxn transaction = kvClient.txn();\ntry {\nCompletableFuture<GetResponse> completableResponse = kvClient.get(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()));\nGetResponse getResponse = completableResponse.get();\nDefaultExchangeHolder removedHolder = (DefaultExchangeHolder) convertFromEtcd3Format(getResponse.getKvs().get(0).getValue());\ntransaction.If(new Cmp(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()), Cmp.Op.EQUAL, CmpTarget.value(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes())))).Then(Op.delete(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()), DeleteOption.DEFAULT), Op.put(ByteSequence.from(String.format(""%s/%s"", persistencePrefixName, key).getBytes()), convertToEtcd3Format(removedHolder), PutOption.DEFAULT)).commit().get();\nLOG.trace(""Removed an exchange with ID {} for key {} in a thread-safe manner."", exchange.getExchangeId(), key);\nLOG.trace(""Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner."", exchange.getExchangeId(), key);\n} catch (Exception exception) {\nthrow new RuntimeCamelException(exception.getMessage(), exception);\n}\n} else {\nCompletableFuture<DeleteResponse> completableDeleteResponse = kvClient.delete(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()));\ntry {\ncompletableDeleteResponse.get();\n} catch (InterruptedException | ExecutionException e) {\nLOG.error(e.getMessage(), e);\nthrow new RuntimeCamelException(e.getMessage(), e);\n}\n}\n}\n}\n""}","{""function"": ""public void remove(CamelContext camelContext, String key, Exchange exchange)\n{\nDefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders);\nif (optimistic) {\nLOG.trace(""Removing an exchange with ID {} for key {} in an optimistic manner."", exchange.getExchangeId(), key);\ntry {\nCompletableFuture<GetResponse> completableGetResponse = kvClient.get(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()));\nGetResponse getResponse = completableGetResponse.get();\nList<KeyValue> keyValueList = getResponse.getKvs();\nboolean optimisticLockingError = keyValueList.isEmpty();\nif (!optimisticLockingError) {\nDefaultExchangeHolder holderFound = (DefaultExchangeHolder) convertFromEtcd3Format(keyValueList.get(0).getValue());\noptimisticLockingError = !Objects.equals(holder, holderFound);\nif (!optimisticLockingError) {\nCompletableFuture<DeleteResponse> completableDeleteResponse = kvClient.delete(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()));\nDeleteResponse deleteResponse = completableDeleteResponse.get();\noptimisticLockingError = deleteResponse.getDeleted() == 0;\n}\n}\nif (optimisticLockingError) {\nLOG.warn(""Optimistic locking failed for exchange with key {}: kvClient.delete removed no Exchanges, while it's expected to remove one."", key);\nthrow new OptimisticLockingException();\n}\n} catch (InterruptedException | ExecutionException | ClassNotFoundException | IOException e) {\nLOG.error(e.getMessage(), e);\nthrow new RuntimeCamelException(e.getMessage(), e);\n}\nLOG.trace(""Removed an exchange with ID {} for key {} in an optimistic manner."", exchange.getExchangeId(), key);\nif (useRecovery) {\nLOG.trace(""Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner."", exchange.getExchangeId(), key);\ntry {\nCompletableFuture<PutResponse> completablePutResponse = kvClient.put(ByteSequence.from(String.format(""%s/%s"", persistencePrefixName, key).getBytes()), convertToEtcd3Format(holder));\ncompletablePutResponse.get();\nLOG.trace(""Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner."", exchange.getExchangeId(), key);\n} catch (IOException | InterruptedException | ExecutionException e) {\nLOG.error(e.getMessage(), e);\nthrow new RuntimeCamelException(e.getMessage(), e);\n}\n}\n} else {\nif (useRecovery) {\nLOG.trace(""Removing an exchange with ID {} for key {} in a thread-safe manner."", exchange.getExchangeId(), key);\nTxn transaction = kvClient.txn();\ntry {\nCompletableFuture<GetResponse> completableResponse = kvClient.get(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()));\nGetResponse getResponse = completableResponse.get();\nDefaultExchangeHolder removedHolder = (DefaultExchangeHolder) convertFromEtcd3Format(getResponse.getKvs().get(0).getValue());\ntransaction.If(new Cmp(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()), Cmp.Op.EQUAL, CmpTarget.value(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes())))).Then(Op.delete(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()), DeleteOption.DEFAULT), Op.put(ByteSequence.from(String.format(""%s/%s"", persistencePrefixName, key).getBytes()), convertToEtcd3Format(removedHolder), PutOption.DEFAULT)).commit().get();\nLOG.trace(""Removed an exchange with ID {} for key {} in a thread-safe manner."", exchange.getExchangeId(), key);\nLOG.trace(""Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner."", exchange.getExchangeId(), key);\n} catch (Exception exception) {\nthrow new RuntimeCamelException(exception.getMessage(), exception);\n}\n} else {\nCompletableFuture<DeleteResponse> completableDeleteResponse = kvClient.delete(ByteSequence.from(String.format(""%s/%s"", prefixName, key).getBytes()));\ntry {\ncompletableDeleteResponse.get();\n} catch (InterruptedException | ExecutionException e) {\nLOG.error(e.getMessage(), e);\nthrow new RuntimeCamelException(e.getMessage(), e);\n}\n}\n}\n}\n""}","java:S1181
"
"{""function"": ""protected Map<String, Object> prepareRequest(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange) throws Exception\n{\nWrappedMessageContext requestContext = new WrappedMessageContext(new HashMap<>(), null, Scope.APPLICATION);\ncamelExchange.setProperty(Message.MTOM_ENABLED, String.valueOf(endpoint.isMtomEnabled()));\nDataFormat dataFormat = endpoint.getDataFormat();\ncamelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat);\nLOG.trace(""Set Camel Exchange property: {}={}"", DataFormat.class.getName(), dataFormat);\nif (endpoint.isMergeProtocolHeaders()) {\ncamelExchange.setProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.TRUE);\n}\nrequestContext.put(DataFormat.class.getName(), dataFormat);\nif (dataFormat.dealias() == DataFormat.RAW) {\ncxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true);\nLOG.trace(""Set CXF Exchange property: {}={}"", Client.KEEP_CONDUIT_ALIVE, true);\n}\nendpoint.getCxfBinding().populateCxfRequestFromExchange(cxfExchange, camelExchange, requestContext);\nif (endpoint.getCookieHandler() != null) {\ntry {\nMap<String, List<String>> transportHeaders = CastUtils.cast((Map<?, ?>) requestContext.get(CxfConstants.PROTOCOL_HEADERS));\nboolean added;\nif (transportHeaders == null) {\ntransportHeaders = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\nadded = true;\n} else {\nadded = false;\n}\ntransportHeaders.putAll(endpoint.getCookieHandler().loadCookies(camelExchange, endpoint.getRequestUri(camelExchange)));\nif (added && transportHeaders.size() > 0) {\nrequestContext.put(CxfConstants.PROTOCOL_HEADERS, transportHeaders);\n}\n} catch (IOException e) {\nLOG.warn(""Cannot load cookies"", e);\n}\n}\nrequestContext.getScopes().remove(CxfConstants.PROTOCOL_HEADERS);\nreturn requestContext.getWrappedMap();\n}\n""}","{""function"": ""protected Map<String, Object> prepareRequest(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange) throws Exception\n{\nWrappedMessageContext requestContext = new WrappedMessageContext(new HashMap<>(), null, Scope.APPLICATION);\ncamelExchange.setProperty(Message.MTOM_ENABLED, String.valueOf(endpoint.isMtomEnabled()));\nDataFormat dataFormat = endpoint.getDataFormat();\ncamelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat);\nLOG.trace(""Set Camel Exchange property: {}={}"", DataFormat.class.getName(), dataFormat);\nif (endpoint.isMergeProtocolHeaders()) {\ncamelExchange.setProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.TRUE);\n}\nrequestContext.put(DataFormat.class.getName(), dataFormat);\nif (dataFormat.dealias() == DataFormat.RAW) {\ncxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true);\nLOG.trace(""Set CXF Exchange property: {}={}"", Client.KEEP_CONDUIT_ALIVE, true);\n}\nendpoint.getCxfBinding().populateCxfRequestFromExchange(cxfExchange, camelExchange, requestContext);\nif (endpoint.getCookieHandler() != null) {\ntry {\nMap<String, List<String>> transportHeaders = CastUtils.cast((Map<?, ?>) requestContext.get(CxfConstants.PROTOCOL_HEADERS));\nboolean added;\nif (transportHeaders == null) {\ntransportHeaders = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\nadded = true;\n} else {\nadded = false;\n}\ntransportHeaders.putAll(endpoint.getCookieHandler().loadCookies(camelExchange, endpoint.getRequestUri(camelExchange)));\nif (added && transportHeaders.size() > 0) {\nrequestContext.put(CxfConstants.PROTOCOL_HEADERS, transportHeaders);\n}\n} catch (IOException e) {\nLOG.warn(""Cannot load cookies"", e);\n}\n}\nrequestContext.getScopes().remove(CxfConstants.PROTOCOL_HEADERS);\nreturn requestContext.getWrappedMap();\n}\n""}","java:S2293
"
"{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","{""function"": ""private JavaClass generateParser(List<Class<?>> model, ClassLoader classLoader)\n{\nJavaClass parser = new JavaClass(classLoader);\nparser.setMaxImportPerPackage(4);\nparser.setPackage(PARSER_PACKAGE);\nparser.setName(""ModelParser"");\nparser.extendSuperType(""BaseParser"");\nparser.addImport(MODEL_PACKAGE + "".OptionalIdentifiedDefinition"");\nparser.addImport(IOException.class);\nparser.addImport(XML_PULL_PARSER_EXCEPTION);\nparser.addImport(Array.class);\nparser.addImport(List.class);\nparser.addImport(ArrayList.class);\nparser.addImport(org.w3c.dom.Element.class);\nparser.addAnnotation(SuppressWarnings.class).setLiteralValue(""\""unused\"""");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(""org.apache.camel.spi.Resource"", ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(InputStream.class, ""input"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(input, namespace);"");\nparser.addMethod().setConstructor(true).setPublic().setName(""ModelParser"").addParameter(Reader.class, ""reader"").addParameter(String.class, ""namespace"").addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(""super(reader, namespace);"");\nList<Class<?>> elementRefs = Arrays.asList(processorDefinitionClass, expressionDefinitionClass, dataFormatDefinitionClass);\nfor (Class<?> clazz : model) {\nif (clazz.getAnnotation(XmlEnum.class) != null || clazz.isInterface()) {\ncontinue;\n}\nString name = clazz.getSimpleName();\nString qname;\nif (clazz.getDeclaringClass() != null) {\nparser.addImport(clazz.getDeclaringClass());\nqname = clazz.getDeclaringClass().getSimpleName() + ""."" + name;\n} else {\nparser.addImport(clazz);\nqname = name;\n}\nboolean hasDerived = model.stream().anyMatch(cl -> cl.getSuperclass() == clazz);\nList<Member> members = getMembers(clazz);\nList<Member> attributeMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null).collect(Collectors.toList());\nString baseAttributeHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) != null)) {\nbaseAttributeHandler = lowercase(parent.getSimpleName()) + ""AttributeHandler()"";\nbreak;\n}\n}\nString attributes;\nif (attributeMembers.isEmpty()) {\nattributes = ""\n    "" + (baseAttributeHandler != null ? baseAttributeHandler : ""noAttributeHandler()"");\n} else {\nSortedMap<String, String> cases = new TreeMap<>();\nfor (Member member : attributeMembers) {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nString mn = member.getName();\nString an = ((AccessibleObject) member).getAnnotation(XmlAttribute.class).name();\nif (""##default"".equals(an)) {\nan = member instanceof Method ? propname(mn) : mn;\n}\nString sn = member instanceof Method ? mn : ""set"" + uppercase(mn);\ncases.put(an, ""def."" + sn + ""("" + conversion(parser, type, ""val"", clazz.getName()) + "");"");\n}\nString defaultCase = baseAttributeHandler != null ? baseAttributeHandler + "".accept(def, key, val)"" : ""false"";\nif (attributeMembers.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nattributes = "" (def, key, val) -> {\n"" + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    return "" + defaultCase + "";\n"" + ""}"";\n} else {\nattributes = generateCases(cases, defaultCase);\n}\n}\nmembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) != null).forEach(member -> {\nif (!""otherAttributes"".equals(member.getName())) {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlAnyAttribute"");\n}\n});\nList<Member> elementMembers = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null).filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) == null).collect(Collectors.toList());\nList<Member> multiElements = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || ((AccessibleObject) member).getAnnotation(XmlElements.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).collect(Collectors.toList());\nMap<String, String> expressionHandlersDefs = new LinkedHashMap<>();\nMap<String, String> cases = new LinkedHashMap<>();\nList<String[]> externalNamespaces = new ArrayList<>();\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElementRef.class) != null || (clazz == outputDefinitionClass && ""setOutputs"".equals(member.getName()))).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nmodel.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).forEach(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlElements.class) != null).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list = type.getRawClass() == List.class;\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nClass<?> root = list ? type.getActualTypeArgument(0).getRawClass() : type.getRawClass();\nif (elementRefs.contains(root)) {\nexpressionHandlersDefs.put(lowercase(sn.substring(3)), ""    "" + root.getSimpleName() + "" v = doParse"" + root.getSimpleName() + ""Ref(key);\n"" + ""    if (v != null) { \n"" + ""        "" + (list ? ""doAdd(v, def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(v);"") + ""\n"" + ""        return true;\n"" + ""    }\n"");\n} else {\nStream.of(((AccessibleObject) member).getAnnotation(XmlElements.class).value()).forEach(xe -> {\nString en = xe.name();\nString tn = xe.type().getSimpleName();\ncases.put(en, list ? ""doAdd(doParse"" + tn + ""(), def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""(doParse"" + tn + ""());"");\n});\n}\n});\nelementMembers.stream().filter(member -> !multiElements.contains(member)).forEach(member -> {\nType pt = member instanceof Method ? ((Method) member).getGenericParameterTypes()[0] : ((Field) member).getGenericType();\nGenericType type = new GenericType(pt);\nboolean list;\nClass<?> root;\nif (type.getRawClass() == List.class) {\nlist = true;\nroot = type.getActualTypeArgument(0).getRawClass();\n} else if (type.getRawClass().isArray()) {\nlist = true;\nroot = type.getRawClass().getComponentType();\n} else {\nlist = false;\nroot = type.getRawClass();\n}\nString fn = member.getName();\nString en = ""##default"";\nif (((AccessibleObject) member).getAnnotation(XmlElement.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElement.class).name();\nif (""value"".equals(en)) {\nif (((AccessibleObject) member).getAnnotation(XmlElementWrapper.class) != null) {\nen = ((AccessibleObject) member).getAnnotation(XmlElementWrapper.class).name();\n}\n}\n}\nif (""##default"".equals(en)) {\nen = member instanceof Method ? propname(fn) : fn;\n}\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nString gn = member instanceof Method ? ""g"" + sn.substring(1) : ""get"" + uppercase(fn);\nString tn = root.getSimpleName();\nString pc;\nif (((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class) != null) {\nClass<? extends XmlAdapter> adapter = ((AccessibleObject) member).getAnnotation(XmlJavaTypeAdapter.class).value();\nClass<?> cl = adapter;\nwhile (cl.getSuperclass() != XmlAdapter.class) {\ncl = cl.getSuperclass();\n}\nType t = ((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[0];\nClass<?> c = new GenericType(t).getRawClass();\nString n = adapter.getDeclaringClass() != null ? adapter.getDeclaringClass().getSimpleName() + ""."" + adapter.getSimpleName() : adapter.getSimpleName();\nif (c == String.class) {\npc = ""new "" + n + ""().unmarshal(doParseText())"";\n} else if (model.contains(c)) {\npc = ""new "" + n + ""().unmarshal(doParse"" + c.getSimpleName() + ""())"";\n} else {\nthrow new UnsupportedOperationException(""Class "" + clazz.getName() + "" / member "" + member + "": unsupported @XmlJavaTypeAdapter"");\n}\nif (list && type.equals(new GenericType(((ParameterizedType) cl.getGenericSuperclass()).getActualTypeArguments()[1]))) {\nlist = false;\n}\n} else if (model.contains(root)) {\npc = ""doParse"" + tn + ""()"";\n} else if (root == String.class) {\npc = ""doParseText()"";\n} else {\nXmlAnyElement any = ((AccessibleObject) member).getAnnotation(XmlAnyElement.class);\nExternalSchemaElement external = ((AccessibleObject) member).getAnnotation(ExternalSchemaElement.class);\nif (any != null && external != null) {\nexternalNamespaces.add(new String[] { external.documentElement(), external.namespace(), gn, sn });\nreturn;\n} else {\nString n = root.getName();\nif (n.startsWith(""java.lang."")) {\nn = tn;\n}\npc = n + "".valueOf(doParseText())"";\n}\n}\nif (""allowableValues"".equals(en)) {\ncases.put(en, list ? ""doAddValues("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n} else {\ncases.put(en, list ? ""doAdd("" + pc + "", def."" + gn + ""(), def::"" + sn + "");"" : ""def."" + sn + ""("" + pc + "");"");\n}\n});\nString expressionHandler = null;\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlAnyAttribute.class) == null && ((AccessibleObject) member).getAnnotation(XmlValue.class) == null)) {\nexpressionHandler = lowercase(parent.getSimpleName()) + ""ElementHandler()"";\nbreak;\n}\n}\nif (expressionHandlersDefs.size() > 1) {\nthrow new IllegalStateException();\n}\nString externalElements = """";\nif (!externalNamespaces.isEmpty()) {\nboolean first = true;\nStringBuilder sb = new StringBuilder();\nfor (String[] nn : externalNamespaces) {\nString gn = nn[2];\nString sn = nn[3];\nif (first) {\nsb.append(""    if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\nfirst = false;\n} else {\nsb.append(""    else if (\"""" + nn[1] + ""\"".equals(parser.getNamespace())) {\n"");\n}\nsb.append(""        Element el = doParseDOMElement(\"""" + nn[0] + ""\"", \"""" + nn[1] + ""\"", def."" + gn + ""());\n"");\nsb.append(""        if (el != null) {\n"");\nsb.append(""            doAddElement(el, def."" + gn + ""(), def::"" + sn + "");\n"");\nsb.append(""            return true;\n"");\nsb.append(""        }\n"");\nsb.append(""        return false;\n"");\nsb.append(""    }\n"");\n}\nexternalElements = sb.toString();\n}\nString elements;\nif (cases.isEmpty()) {\nif (expressionHandlersDefs.isEmpty()) {\nelements = (expressionHandler == null ? "" noElementHandler()"" : "" "" + expressionHandler);\n} else {\nelements = "" (def, key) -> {\n"" + expressionHandlersDefs.values().iterator().next() + ""    return "" + (expressionHandler == null ? ""false"" : expressionHandler + "".accept(def, key)"") + "";\n"" + ""}"";\n}\n} else {\nString returnClause = (expressionHandlersDefs.isEmpty() ? """" : expressionHandlersDefs.values().iterator().next() + ""    "") + (expressionHandler == null ? ""return false;"" : ""return "" + expressionHandler + "".accept(def, key);"");\nif (cases.size() == 1) {\nMap.Entry<String, String> entry = cases.entrySet().iterator().next();\nelements = "" (def, key) -> {\n"" + externalElements + ""    if (\"""" + entry.getKey() + ""\"".equals(key)) {\n"" + ""        "" + entry.getValue() + ""\n"" + ""        return true;\n"" + ""    }\n"" + ""    "" + returnClause + ""\n"" + ""}"";\n} else {\nStringBuilder sb = new StringBuilder();\nsb.append("" (def, key) -> {\n"" + externalElements + ""    switch (key) {\n"");\nfor (Map.Entry<String, String> entry : cases.entrySet()) {\nsb.append(""        case \"""").append(entry.getKey()).append(""\"": "").append(entry.getValue()).append("" break;\n"");\n}\nsb.append(""        default: "");\nif (expressionHandlersDefs.isEmpty()) {\nsb.append(returnClause);\n} else {\nStream.of(returnClause.split(""\n"")).forEach(s -> sb.append(""\n        "").append(s));\n}\nsb.append(""\n"");\nsb.append(""    }\n"").append(""    return true;\n"").append(""}"");\nelements = sb.toString();\n}\n}\nString value = members.stream().filter(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null).findFirst().map(member -> {\nString fn = member.getName();\nString sn = member instanceof Method ? fn : ""set"" + uppercase(fn);\nif (expressionDefinitionClass.isAssignableFrom(member.getDeclaringClass())) {\nreturn "" expressionDefinitionValueHandler()"";\n} else {\nreturn "" (def, val) -> def."" + sn + ""(val)"";\n}\n}).orElseGet(() -> {\nfor (Class<?> parent = clazz.getSuperclass(); parent != Object.class; parent = parent.getSuperclass()) {\nif (getMembers(parent).stream().anyMatch(member -> ((AccessibleObject) member).getAnnotation(XmlValue.class) != null)) {\nreturn "" "" + lowercase(parent.getSimpleName()) + ""ValueHandler()"";\n}\n}\nreturn "" noValueHandler()"";\n});\nif (clazz == beansDefinitionClass || clazz == applicationDefinitionClass) {\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", ""beans"", ""camel""), ""if (tag != null) {"", String.format(""    return Optional.of(doParse%s());"", name), ""}"", ""return Optional.empty();"");\n}\nif (clazz == routesDefinitionClass || clazz == routeTemplatesDefinitionClass || clazz == templatedRoutesDefinitionClass || clazz == restsDefinitionClass || clazz == routeConfigurationsDefinitionClass) {\nString element = clazz.getAnnotation(XmlRootElement.class).name();\nString capitalElement = Character.toUpperCase(element.charAt(0)) + element.substring(1);\nString singleElement = element.endsWith(""s"") ? element.substring(0, element.length() - 1) : element;\nString singleName = name.replace(""sDefinition"", ""Definition"");\nparser.addMethod().setPublic().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parse"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""String tag = getNextTag(\""%s\"", \""%s\"");"", element, singleElement), ""if (tag != null) {"", ""    switch (tag) {"", String.format(""        case \""%s\"" : return Optional.of(doParse%s());"", element, name), String.format(""        case \""%s\"" : return parseSingle%s();"", singleElement, name), ""    }"", ""}"", ""return Optional.empty();"");\nparser.addMethod().setPrivate().setReturnType(new GenericType(Optional.class, new GenericType(clazz))).setName(""parseSingle"" + name).addThrows(IOException.class).addThrows(XML_PULL_PARSER_EXCEPTION).setBody(String.format(""Optional<%s> single = Optional.of(doParse%s());"", singleName, singleName), ""if (single.isPresent()) {"", String.format(""    List<%s> list = new ArrayList<>();"", singleName), ""    list.add(single.get());"", String.format(""    %s def = new %s();"", name, name), String.format(""    def.set%s(list);"", capitalElement), ""    return Optional.of(def);"", ""}"", ""return Optional.empty();"");\n}\nif (hasDerived) {\nif (!attributeMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> AttributeHandler<T> "" + lowercase(name) + ""AttributeHandler()"").setBody(""return"" + attributes + "";"");\n}\nif (!elementMembers.isEmpty()) {\nparser.addMethod().setSignature(""protected <T extends "" + qname + ""> ElementHandler<T> "" + lowercase(name) + ""ElementHandler()"").setBody(""return"" + elements + "";"");\n}\nif (!Modifier.isAbstract(clazz.getModifiers())) {\nif (externalNamespaces.isEmpty()) {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(), "" + (attributeMembers.isEmpty() ? attributes : lowercase(name) + ""AttributeHandler()"") + "", "" + (elementMembers.isEmpty() ? elements : lowercase(name) + ""ElementHandler()"") + "","" + value + "", true);\n"");\n}\n}\n} else {\nif (""ValueDefinition"".equals(name)) {\nparser.addMethod().setSignature(""protected List<"" + qname + ""> doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParseValue(() -> new "" + qname + ""()"" + "","" + value + "");\n"");\n} else {\nparser.addMethod().setSignature(""protected "" + qname + "" doParse"" + name + ""() throws IOException, XmlPullParserException"").setBody(""return doParse(new "" + qname + ""(),"" + attributes + "","" + elements + "","" + value + "");\n"");\n}\n}\n}\nfor (Class<?> root : elementRefs) {\nparser.addMethod().setSignature(""protected "" + root.getSimpleName() + "" doParse"" + root.getSimpleName() + ""Ref(String key) throws IOException, XmlPullParserException"").setBody(""switch (key) {\n"" + model.stream().filter(root::isAssignableFrom).filter(cl -> cl.getAnnotation(XmlRootElement.class) != null).map(cl -> {\nString en = cl.getAnnotation(XmlRootElement.class).name();\nif (""##default"".equals(en)) {\nen = lowercase(cl.getSimpleName());\n}\nString tn = cl.getSimpleName();\nreturn ""    case \"""" + en + ""\"": return doParse"" + tn + ""();\n"";\n}).collect(Collectors.joining()) + ""    default: return null;\n"" + ""}"");\n}\nreturn parser;\n}\n""}","java:S1192
"
